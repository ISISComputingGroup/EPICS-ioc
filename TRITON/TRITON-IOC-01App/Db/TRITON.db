record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}


#
# Heater and temperature control
#


record(ao, "$(P)TEMP:SP")
{
    field(DTYP, "stream")
    field(OUT, "@devtriton.proto setTSetpoint($(P)) $(PORT)")
	field(PREC, "3")
	field(EGU, "K")
}

record(ai, "$(P)TEMP:SP:RBV")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getTSetpoint($(P)) $(PORT)")
    field(SCAN, "1 second") 
	field(PREC, "3")
	field(EGU, "K")
}

record(stringin, "$(P)HEATER:TYPE")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getHtrType($(P)) $(PORT)")
}

record(ao, "$(P)HEATER:RANGE:SP")
{
    field(DTYP, "stream")
    field(OUT, "@devtriton.proto setHtrRange($(P)) $(PORT)")
	field(PREC, "3")
	field(EGU, "mA")
}

record(ai, "$(P)HEATER:RANGE")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getHtrRange($(P)) $(PORT)")
    field(SCAN, "1 second") 
	field(PREC, "3")
	field(EGU, "mA")
}

record(ai, "$(P)HEATER:POWER")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getHtrPower($(P)) $(PORT)")
    field(SCAN, "1 second")
	field(PREC, "3")
	field(EGU, "uW")
}

record(bi, "$(P)CLOSEDLOOP")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getClosedLoop($(P)) $(PORT)")
    field(SCAN, "1 second")
    
    field(ZNAM, "NO")
    field(ONAM, "YES")
}

record(bo, "$(P)CLOSEDLOOP:SP")
{
    field(DTYP, "stream")
    field(OUT, "@devtriton.proto setClosedLoop($(P)) $(PORT)")
    
    field(ZNAM, "NO")
    field(ONAM, "YES")
}


#
# System status
#


record(waveform, "$(P)STATUS")
{
    field(DTYP, "stream")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(INP,  "@devtriton.proto getStatus $(PORT)")
    field(SCAN, "1 second")
}

record(waveform, "$(P)AUTOMATION")
{
    field(DTYP, "stream")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(INP,  "@devtriton.proto getAutomation $(PORT)")
    field(SCAN, "1 second")
}


#
# Arbitrary commands
#


record(waveform, "$(P)ARBITRARY:SP")
{
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(FLNK, "$(P)ARBITRARY:SP:TRIGGER")
}

record(bo, "$(P)ARBITRARY:SP:TRIGGER")
{
    field(DTYP, "stream")
    field(OUT,  "@devtriton.proto arbitrary($(P)) $(PORT)")
}

record(waveform, "$(P)ARBITRARY")
{
    field(NELM, "512")
    field(FTVL, "CHAR")
}


#
# Diagnostics
#


record(stringin, "$(P)SYS:TIME")
{
	field(DTYP, "stream")
    field(INP, "@devtriton.proto getTime $(PORT)")
	field(SCAN, "1 second")
}

record(waveform, "$(P)SYS:IDN")
{
    field(DTYP, "stream")
    field(INP, "@devtriton.proto getIDN $(PORT)")
	field(PINI, "YES")
	# No need to scan. This won't change.
    field(NELM, "512")
    field(FTVL, "CHAR")
}

record(stringin, "$(P)SYS:ADDR")
{
    field(VAL, "$(IPADDR)")
	field(PINI, "YES")
}
