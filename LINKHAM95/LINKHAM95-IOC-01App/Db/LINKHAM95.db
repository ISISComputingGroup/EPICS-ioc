# Activities needed and their associated PVs
# Reset             Write   $(P)RESET, uses the protocol file
# Interlock Status  Read    $(P)ILK
# Power             Read    $(P)POWER directly, and alias to $(P)POWER:RBV
#                   Write   $(P)POWER:SP, and alias to $(P)POWER:SP:RBV
# Voltage           Read    $(P)VOLT, and alias to $(P)VOLT:RBV
# Current Out       Read    $(P)CURR, and alias to $(P)CURR:RBV
# Remote Mode       Write   (P)REMOTE, there is a PINI to set to REMOTE
# Polarity          Read    $(P)POL, and alias to $(P)POL:RBV
#                   Write   $(P)POL:SP, and alias to $(P)POL:SP:RBV
# Field Unit        Read    The unit currently being displayed, Oersted, Tesla or Gauss, $(P):FIELD:UNIT aliased to $(P)
#                   Write   $(P)FIELD:UNIT:SP aliased to $(P)FIELD:UNIT:SP:RBV
# Field             Read    Converted raw current value to field value, $(P)FIELD aliased to $(P)FIELD:RBV
#                   Write   $(P)FIELD:SP aliased to $(P)FIELD:SP:RBV, this is converted and sent to $(P)SETIRAW for writing to the device

###################
#### T command ####
###################

##############
# Status byte
##############

record(longin, "$(P)IN_STAT")
{
	field(DESC, "Raw status byte")
	field(DTYP, "stream")
	field(INP, "@devlinkham95.proto getStatus($(P)) $(PORT)")
	#field(SCAN, "1 second")
	field(FLNK, "$(P)IN_ERROR")
}

record(mbbi, "$(P)STATUS")
{
	field(DESC, "Device status description")
	field(DTYP, "Raw Soft Channel")
	field(INP, "$(P)IN_STAT")
	#field(SCAN, ".1 second")
	
	field(ZRVL, "1")
	field(ONVL, "16")
	field(TWVL, "32")
	field(THVL, "48")
	field(FRVL, "64")
	field(FVVL, "80")	
	
	field(ZRST, "Stopped")
	field(ONST, "Heating")
	field(TWST, "Cooling")
	field(THST, "Holding. At limit or end of ramp")
	field(FRST, "Holding the limit time")
	field(FVST, "Holding current temperature")
}

#############
# Error byte
#############

record(mbbiDirect, "$(P)IN_ERROR")
{
	field(DESC, "Raw error status byte")
	field(NOBT, "8")
	field(FLNK, "$(P)IN_PUMP_STAT")
}

record(bi, "$(P)FAST_COOL_RATE")
{
	field(DESC, "Cooling rate too fast to maintain")
	field(INP, "$(P)IN_ERROR.B0")
	#field(SCAN, ".1 second")
	field(ZNAM, "OK")
	field(ONAM, "Error")
}

record(bi, "$(P)OPEN_CIRCUIT")
{
	field(DESC, "Stage not connected or sensor is open circuit")
	field(INP, "$(P)IN_ERROR.B1")
	#field(SCAN, ".1 second")
	field(ZNAM, "OK")
	field(ONAM, "Error")
}

record(bi, "$(P)POWER_SURGE")
{
	field(DESC, "Current protection was set due to overload")
	field(INP, "$(P)IN_ERROR.B2")
	#field(SCAN, ".1 second")
	field(ZNAM, "OK")
	field(ONAM, "Error")
}

record(bi, "$(P)NO_EXIT_300")
{
	field(DESC, "TS1500 tried to exit profile at T>300deg")
	field(INP, "$(P)IN_ERROR.B3")
	#field(SCAN, ".1 second")
	field(ZNAM, "OK")
	field(ONAM, "Error")
}

record(bi, "$(P)LINK_ERROR")
{
	field(DESC, "RS232 data transmission error")
	field(INP, "$(P)IN_ERROR.B5")
	#field(SCAN, ".1 second")
	field(ZNAM, "OK")
	field(ONAM, "Error")
}

###################
# Pump status byte
###################

record(longin, "$(P)IN_PUMP_STAT")
{
	field(DESC, "Raw pump status Byte")
	field(FLNK, "$(P)IN_DUMMY")
}

record(calc, "$(P)CALC_PUMP_SPEED")
{
	field(DESC, "Calculate pump speed from byte")
	field(INPA, "$(P)IN_PUMP_STAT")
	field(CALC, "A&31")
}

record(longin, "$(P)PUMP_SPEED")
{
	field(DESC, "Pump speed, 0-30")
	field(INP, "$(P)CALC_PUMP_SPEED PP")
	#field(SCAN, ".1 second")
}

record(mbbi, "$(P)PUMP_STAT")
{
	field(DESC, "Pump status description")
	field(DTYP, "Raw Soft Channel")
	field(INP, "$(P)IN_PUMP_STAT")
	#field(SCAN, ".1 second")
	
	field(ZRVL, "128")
	field(ONVL, "129")
	field(TWVL, "158")	
	
	field(ZRST, "Stopped")
	field(ONST, "Minimum speed")
	field(TWST, "Maximum speed")
}

##################################
# Dummy PV to consume extra bytes
##################################

record(ai, "$(P)IN_DUMMY")
{
	field(DESC, "Dummy PV to consume extra info")
	field(FLNK, "$(P)IN_TEMP")
}

##################
# Temperature RBV
##################

record(waveform, "$(P)IN_TEMP")
{
	field(DESC, "Raw temperature 4-byte value")
	field(NELM, "4")
	field(FTVL, "CHAR")
	field(FLNK, "$(P)TEMP_CONVERTER")
}

record(asub, "$(P)TEMP_CONVERTER")
{
	field(DESC, "Convert raw temperature byte values to double")
	field(SNAM, "convertLinkam95TempToDouble")
	field(INPA, "$(P)IN_TEMP")
	field(NOA, "4")
	field(NEA, "4")
	field(FTA, "CHAR")
	field(OUTA, "$(P)TEMP_RBV PP")
	field(FTVA, "DOUBLE")
}

record(ai, "$(P)TEMP_RBV")
{
	field(DESC, "Temperature RBV")
	field(EGU, "C")
}

######################
#### Rate command ####
######################

record(ao, "$(P)RATE_SP") {
  field(DESC, "Set ramp rate")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setRate $(PORT)")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(ESLO, "0.01")
  field(DRVH, "99.99")
  field(DRVL, "0")
  field(EGU, "C/min")
}

#######################
#### Limit command ####
#######################

record(ao, "$(P)LIMIT_SP") {
  field(DESC, "Set ramp limit")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setLimit $(PORT)")
  field(PREC, "1")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(DRVH, "1500")
  field(DRVL, "-196")
  field(EGU, "C")
}

#############################
#### Start/stop commands ####
#############################

record(bo, "$(P)RAMP_ACTIVE_CMD") {
  field(DESC, "Ramp start/stop/hold control")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setRampControl $(PORT)")
  field(ZNAM, "Start")
  field(ONAM, "Stop")
}

########################################
#### Force heating/cooling commands ####
########################################

record(mbbo, "$(P)RAMP_CONTROL_CMD") {
  field(DESC, "Start ramp heating, cooling or hold")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setRampControl $(PORT)")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "Heat")
  field(ONST, "Cool")
  field(TWST, "Hold")
}

###########################
#### LNP pump commands ####
###########################

record(bo, "$(P)SET_PUMP_MODE") {
  field(DESC, "Set pump mode")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setPumpMode $(PORT)")
  field(ZNAM, "Manual")
  field(ONAM, "Auto")
}

record(longout, "$(P)SET_PUMP_SPEED") {
  field(DESC, "Set pump speed")
  field(DTYP, "stream")
  field(OUT, "@devlinkham95.proto setPumpSpeed $(PORT)")
  field(DRVH, "30")
  field(DRVL, "0")
  field(HOPR, "30")
  field(LOPR, "0")
}