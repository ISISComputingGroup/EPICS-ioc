#FileList for ramp
###################

record(waveform, "$(P)RAMP_DIRBASE:SP")
{
   field(DESC, "Set directory of ramp files")
   field(DTYP, "asynOctetWrite")
   field(PINI, "NO")
   field(INP, "@asyn($(RAMPLIST),0,1)DIRBASE")
   field(FLNK, "$(P)READ_RAMP_DIRBASE:SP")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)RAMP_DIRBASE")
{
   field(DESC, "Get directory of ramp files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(RAMPLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)RAMP_FILES")
{
	field(DESC, "Compressed JSON list of ramp files")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(RAMPLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
}

record(waveform, "$(P)RAMP_PATTERN:SP")
{
   field(DESC, "Set regex search of ramp files")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(RAMPLIST),0,1)SEARCH")
   field(PINI, "NO")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)RAMP_PATTERN")
{
   field(DESC, "Get regex search of ramp files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(RAMPLIST),0,1)SEARCH")
   field(PINI, "NO")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

#ReadASCII
###################
record(waveform, "$(P)READ_RAMP_DIRBASE:SP")
{
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(READ),0,1)DIRBASE")
   field(PINI, "NO")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(stringin, "$(P)RAMP_FILE")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(READ),0,1)DIR")
   field(SCAN, "I/O Intr")
}

record(stringout, "$(P)RAMP_FILE:SP")
{
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(READ),0,1)DIR")
}

record(ao, "$(P)TEMP:SP")
{
   field(DESC, "Temperature setpoint")
   field(DTYP, "asynFloat64")
   field(OUT, "@asyn($(READ),0,1)TGT")
   field(FLNK, "$(P)OUT_SP")
   field(EGU, "K")
   info(INTEREST, "HIGH")
   info(archive, "VAL")
}

record(ao, "$(P)TEMP:SP:RBV")
{
   field(DESC, "Temperature setpoint readback")
   field(DTYP, "asynFloat64")
   field(OUT, "@asyn($(READ),0,1)TGT:RBV")
   field(EGU, "K")
   info(INTEREST, "MEDIUM")
   info(archive, "VAL")
}

record(ao, "$(P)RATE:SP")
{
   field(DESC, "Rate the ramp increases/decreases")
   field(DTYP, "asynFloat64")
   field(OUT, "@asyn($(READ),0,1)RATE")
   field(EGU, "K/s")
}

record(ai, "$(P)RATE")
{
   field(DESC, "Rate the ramp increases/decreases")
   field(DTYP, "asynFloat64")
   field(INP, "@asyn($(READ),0,1)RATE")
   field(EGU, "K/s")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)RAMPING")
{
   field(DESC, "High if ramp is executing")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(READ),0,1)CURRMP")
   field(SCAN, "I/O Intr")   
}

record(ao, "$(P)CURRENT_TEMP")
{
    field(DESC, "The current temperature of the sensor")
	field(DOL, "$(P)TEMP")
	field(OMSL, "closed_loop")
	field(DTYP, "asynFloat64")
	field(OUT, "@asyn($(READ),0,1)CUR")
	field(EGU, "K")
}

record(bo, "$(P)RAMPON:SP")
{
   field(DESC, "Toggles the SP ramp")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(READ),0,1)RMP")
}

record(bi, "$(P)RAMPON")
{
   field(DESC, "Toggles the SP ramp")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(READ),0,1)RMP")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)LUTON:SP")
{
   field(DESC, "Toggles the PID lookup")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(READ),0,1)LUT")
}

record(bi, "$(P)LUTON")
{
   field(DESC, "Toggles the PID lookup")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(READ),0,1)LUT")
   field(SCAN, "I/O Intr")
}

record(ai, "$(P)OUT_SP")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(READ),0,1)SP")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)RAMP_SP.PROC PP")
}

record(ai, "$(P)OUT_P")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(READ),0,1)P")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)RAMP_P")
}

record(ai, "$(P)OUT_I")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(READ),0,1)I")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)RAMP_I")
}

record(ai, "$(P)OUT_D")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(READ),0,1)D")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)RAMP_D")
}

record(ai, "$(P)OUT_MAX")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(READ),0,1)MH")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)RAMP_MAXOUT")
  }

###########

#Pass on PID ramp
record(ao, "$(P)RAMP_SP")
{
    field(DTYP, "Soft Channel")
	field(DOL, "$(P)OUT_SP")
	field(FLNK, "$(P)TEMP:SP:CONV.PROC PP")	
	field(OMSL, "closed_loop")
	field(OIF, "Full")
}

record(ao, "$(P)RAMP_P")
{
    field(DTYP, "Soft Channel")
	field(DOL, "$(P)OUT_P")
	field(OMSL, "closed_loop")
	field(OIF, "Full")
	field(OUT, "$(P)P:SP PP")
}

record(ao, "$(P)RAMP_I")
{
    field(DTYP, "Soft Channel")
	field(DOL, "$(P)OUT_I")
	field(OMSL, "closed_loop")
	field(OIF, "Full")
	field(OUT, "$(P)I:SP PP")
}

record(ao, "$(P)RAMP_D")
{
    field(DTYP, "Soft Channel")
	field(DOL, "$(P)OUT_D")
	field(OMSL, "closed_loop")
	field(OIF, "Full")
	field(OUT, "$(P)D:SP PP")
}

record(ao, "$(P)RAMP_MAXOUT")
{
    field(DTYP, "Soft Channel")
	field(DOL, "$(P)OUT_MAX")
	field(OMSL, "closed_loop")
	field(OIF, "Full")
	field(OUT, "$(P)MAX_OUTPUT:SP PP")
}

##################

#Fanout reads so that they can be interrupted

record(fanout, "$(P)READ") {
	field(SCAN, "5 second")
	field(LNK1, "$(P)P PP")
	field(LNK2, "$(P)I PP")
	field(LNK3, "$(P)D PP")
	field(LNK4, "$(P)OUTPUT PP")	
	field(LNK5, "$(P)MAX_OUTPUT PP")
	field(LNK6, "$(P)READ1 PP")
	field(SELM, "All")
}

record(fanout, "$(P)READ1") {
	field(SCAN, "Passive")
	field(LNK1, "$(P)AUTOTUNE PP")
	field(LNK2, "$(P)SENSOR PP")
	field(LNK3, "$(P)RBV PP")
	field(LNK4, "$(P)SP:RBV PP")
	field(LNK5, "$(P)HILIM PP")
	field(LNK6, "$(P)LOWLIM PP")	
	field(SELM, "All")
}

####
record(stringin, "$(P)ADDRESS") {
    field(DTYP, "Soft Channel")
    field(DESC, "Eurotherm address")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, "$(GAD)$(LAD)")
}


record(ai, "$(P)OUTPUT") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Output Readback")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),OP) $(PORT)")
    field(EGU, "%")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:OUTPUT")
    field(SDIS, "$(Q)DISABLE")
    info(archive, "VAL")
}

record(ai, "$(P)MAX_OUTPUT") {
    field(DESC, "Max Output Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),HO) $(PORT)")
    field(EGU, "%")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:MAX_OUTPUT")
    field(SDIS, "$(Q)DISABLE")
    info(archive, "VAL")
}

record(ao, "$(P)MAX_OUTPUT:SP") {
    field(DESC, "D Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),HO,$(P)) $(PORT)")
    field(DRVH, "100")
    field(DRVL, "0")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:MAX_OUTPUT:SP")
    field(SDIS, "$(Q)DISABLE")
	field(FLNK, "$(P)MAX_OUTPUT.PROC PP")
    info(archive, "VAL")
}

alias("$(P)MAX_OUTPUT", "$(P)MAX_OUTPUT:SP:RBV")

record(mbbi, "$(P)ERR") {
    field(DESC, "Error message")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto readhex($(GAD),$(LAD),EE) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "No Error")
    field(ONVL, "1")
    field(ONST, "Invalid Param")
    field(TWVL, "2")
    field(TWST, "Read Only")
    field(THVL, "7")
    field(THST, "Incorrect Msg")
    field(FRVL, "8")
    field(FRST, "Limit Error")
    field(PINI, "YES")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:ERR")
    field(SDIS, "$(Q)DISABLE")
}

record(ai, "$(P)P") {
    info(INTEREST, "MEDIUM")
    field(DESC, "P Param Readback")
	field(SCAN, "Passive")		
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),XP) $(PORT)")	
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:P")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)P:SP") {
    field(DESC, "P Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),XP,$(P)) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:P:SP")
    field(SDIS, "$(Q)DISABLE")
	field(FLNK, "$(P)P.PROC")
}

alias("$(P)P", "$(P)P:SP:RBV")

record(ai, "$(P)I") {
    info(INTEREST, "MEDIUM")
    field(DESC, "I Param Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),TI) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:I")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)I:SP") {
    field(DESC, "I Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),TI,$(P)) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:I:SP")
    field(SDIS, "$(Q)DISABLE")
	field(FLNK, "$(P)I.PROC")
}

alias("$(P)I", "$(P)I:SP:RBV")

record(ai, "$(P)D") {
    info(INTEREST, "MEDIUM")
	field(DESC, "D Param Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),TD) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:D")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)D:SP") {
    field(DESC, "D Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),TD,$(P)) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:D:SP")
    field(SDIS, "$(Q)DISABLE")
	field(FLNK, "$(P)D.PROC")
}

alias("$(P)D", "$(P)D:SP:RBV")

record(ai, "$(P)AUTOTUNE") {
    field(DESC, "Autotune Readback")
    field(DTYP, "stream")
    field(SCAN, "Passive")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),AT) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:AUTOTUNE")
    field(SDIS, "$(Q)DISABLE")
}

record(ao, "$(P)AUTOTUNE:SP") {
    field(DESC, "D Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),AT,$(P)) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:AUTOTUNE:SP")
    field(SDIS, "$(Q)DISABLE")
	field(FLNK, "$(P)AUTOTUNE.PROC")
}

alias("$(P)AUTOTUNE", "$(P)AUTOTUNE:SP:RBV")

record(ai, "$(P)SENSOR") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Sensor Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),PV) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:SENSOR")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
}

record(stringin, "$(P)CAL:SEL:RBV") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Calibration file")
    field(DTYP, "Soft Channel")
	field(INP, "$(P)TEMP.NSPE MS")
	field(PINI, "YES")
	field(SCAN, "1 second")
    info(archive, "VAL")
}

record(stringin, "$(P)CAL:RBV")
{
    field(DESC, "Current Calibration file")
    field(DTYP, "Soft Channel")
	field(INP, "$(P)TEMP.SPEC")
	field(PINI, "YES")
	field(SCAN, "1 second")
    info(archive, "VAL")
}

record(bi, "$(P)CAL:APPLY")
{
    field(DTYP, "Soft Channel")
	field(ZNAM, "WAIT")
    field(ONAM, "APPLY")
	field(VAL, "0")
	field(FLNK, "$(P)CAL:APPLY:UPDATE.PROC")
}

record(bo, "$(P)CAL:APPLY:RST")
{
    field(DTYP, "Soft Channel")
	field(ZNAM, "STOP APPLY")
    field(ONAM, "")
	field(VAL, "0")
	field(OUT, "$(P)CAL:APPLY")
}

record(stringout, "$(P)CAL:SEL")
{
    field(DESC, "Set Calibration file")
    field(DTYP, "Soft Channel")
	field(FLNK, "$(P)CAL:SEL:UPDATE.PROC")
    field(PINI, "YES")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
#    info(autosaveFields_pass0, "VAL")
}

record(scalcout, "$(P)CAL:SEL:FMT")
{
	field(INPA, "$(P)CAL:SEL:VAL")
	field(CALC, "$P('%s.test',A)")
}

record(sseq, "$(P)CAL:SEL:UPDATE")
{
	field(DOL1, "$(P)CAL:SEL.VAL")
	field(LNK1, "$(P)TEMP.NSPE")
	field(DOL2, "$(P)CAL:SEL")
	field(LNK2, "$(P)TEMP:SP:RBV:CONV.NSPE")
	field(DOL3, "$(P)CAL:SEL")
	field(LNK3, "$(P)TEMP:HIGHLIMIT.NSPE")
	field(DOL4, "$(P)CAL:SEL")
	field(LNK4, "$(P)TEMP:LOWLIMIT.NSPE")
	field(DOL5, "$(P)CAL:SEL")
	field(LNK5, "$(P)TEMP:SP:CONV.NSPE")
	field(DOL6, "1")
	field(LNK6, "$(P)CAL:SEL:UPDATE:NOW.PROC")
}

record(dfanout, "$(P)CAL:SEL:UPDATE:NOW")
{
	field(VAL, "1")
	field(OUTA, "$(P)CAL:APPLY.VAL")
	field(OUTB, "$(P)CAL:APPLY.PROC")
}

record(seq, "$(P)CAL:APPLY:UPDATE")
{
	field(DOL1, "$(P)CAL:APPLY")
	field(LNK1, "$(P)TEMP.INIT NPP")
	field(DOL2, "$(P)CAL:APPLY")
	field(LNK2, "$(P)TEMP:SP:RBV:CONV.INIT NPP")
	field(DOL3, "$(P)CAL:APPLY")
	field(LNK3, "$(P)TEMP:HIGHLIMIT.INIT NPP")
	field(DOL4, "$(P)CAL:APPLY")
	field(LNK4, "$(P)TEMP:LOWLIMIT.INIT NPP")
	field(DOL5, "$(P)CAL:APPLY")
	field(LNK5, "$(P)TEMP:SP:CONV.INIT NPP")
	field(DOL6, "0")
	field(DLY6, "2")
	field(LNK6, "$(P)CAL:APPLY:RST.PROC")
}

# FileList for sensor calibration
#######################

record(waveform, "$(P)SENSOR_DIRBASE:SP")
{
   field(DESC, "Set directory of sensor calib files")
   field(DTYP, "asynOctetWrite")
   field(PINI, "NO")
   field(INP, "@asyn($(SENSORLIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)SENSOR_DIRBASE")
{
   field(DESC, "Get directory of sensor calib files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(SENSORLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)SENSOR_FILES")
{
	field(DESC, "Compressed JSON list of sensor files")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(SENSORLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
}

record(waveform, "$(P)SENSOR_PATTERN:SP")
{
   field(DESC, "Set regex search of sensor calib files")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(SENSORLIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)SENSOR_PATTERN")
{
   field(DESC, "Get regex search of sensor calib files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(SENSORLIST),0,1)SEARCH")
   field(PINI, "NO")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(cvt, "$(P)TEMP")
{
	field(SCAN, "1 second")
    field(DESC, "Temperature")
    info(INTEREST, "HIGH")
	field(INPY, "$(P)RBV")
    field(YSLO, 1)
	field(METH, "1D TABLE INVERTED")
	field(SPEC, "None.txt")
	field(TDIR, "$(SDIR)")
    field(PREC, "3")
	field(FLNK, "$(P)CURRENT_TEMP PP")
    info(archive, "VAL")
}

record(cvt, "$(P)TEMP:SP:RBV:CONV")
{
	field(SCAN, "1 second")
	field(INPY, "$(P)SP:RBV PP")
	field(OUT, "$(P)TEMP:SP:RBV PP")
    field(YSLO, 1)
	field(METH, "1D TABLE INVERTED")
	field(SPEC, "None.txt")
    field(PREC, "3")
	field(TDIR, "$(SDIR)")
}

record(cvt, "$(P)TEMP:HIGHLIMIT")
{
	field(SCAN, "1 second")
	field(INPY, "$(P)HILIM PP")
    field(YSLO, 1)
	field(METH, "1D TABLE INVERTED")
	field(SPEC, "None.txt")
	field(TDIR, "$(SDIR)")
    field(PREC, "3")
    info(archive, "VAL")
}

record(cvt, "$(P)TEMP:LOWLIMIT")
{
	field(SCAN, "1 second")
	field(INPY, "$(P)LOWLIM PP")
    field(YSLO, 1)
	field(METH, "1D TABLE INVERTED")
	field(SPEC, "None.txt")
	field(TDIR, "$(SDIR)")
    field(PREC, "3")
    info(archive, "VAL")
}

record(cvt, "$(P)TEMP:SP:CONV")
{
	field(OUT, "$(P)SP PP")
	field(INPX, "$(P)RAMP_SP")
    field(YSLO, 1)
	field(METH, "1D TABLE")
	field(SPEC, "None.txt")
	field(TDIR, "$(SDIR)")
    field(PREC, "3")
}

record(ai, "$(P)RBV") {
    info(INTEREST, "HIGH")
    field(DESC, "Temperature Readback")
    field(DTYP, "stream")
	field(SCAN, "Passive")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),PV) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
	field(FLNK, "$(P)TEMP.PROC PP")
    info(archive, "VAL")
}

record(ai, "$(P)SP:RBV") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Temperature Setpoint Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),SP) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP:RBV")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)SP") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Temperature Setpoint")
    field(DTYP, "stream")
    field(OUT, "@eurotherm2k.proto write($(GAD),$(LAD),SL,$(P)) $(PORT)")
	field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP")
    field(SDIS, "$(Q)DISABLE")
	field(EGU, "")
    field(PREC, "3")
	field(FLNK, "$(P)SP:RBV.PROC PP")
    info(archive, "VAL")
}

record(ai, "$(P)HILIM") {
    field(DESC, "Setpoint Highlimit Readback")
	field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),HS) $(PORT)")
	field(FLNK, "$(P)LOWLIM.PROC")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:HIGHLIMIT")
    field(SDIS, "$(Q)DISABLE")
    field(PREC, "3")
}

record(ai, "$(P)LOWLIM") {
    field(DESC, "Setpoint Lowlimit Readback")
	field(SCAN, "Passive")    
	field(DTYP, "stream")
    field(INP, "@eurotherm2k.proto read($(GAD),$(LAD),LS) $(PORT)")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:LOWLIMIT")
    field(SDIS, "$(Q)DISABLE")
    field(PREC, "3")
}

### SIMULATION RECORDS ###

record(ai, "$(P)SIM:MAX_OUTPUT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:MAX_OUTPUT","$(P)SIM:MAX_OUTPUT:SP")

alias("$(P)SIM:MAX_OUTPUT","$(P)SIM:MAX_OUTPUT:SP:RBV")

record(ai, "$(P)SIM:TEMP:LOWLIMIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:D")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:D","$(P)SIM:D:SP")

alias("$(P)SIM:D","$(P)SIM:D:SP:RBV")

record(mbbi, "$(P)SIM:ERR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:TEMP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:TEMP","$(P)SIM:TEMP:SP")

alias("$(P)SIM:TEMP","$(P)SIM:TEMP:SP:RBV")

record(ai, "$(P)SIM:I")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:I","$(P)SIM:I:SP")

alias("$(P)SIM:I","$(P)SIM:I:SP:RBV")

record(ai, "$(P)SIM:AUTOTUNE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:AUTOTUNE","$(P)SIM:AUTOTUNE:SP")

alias("$(P)SIM:AUTOTUNE","$(P)SIM:AUTOTUNE:SP:RBV")

record(ai, "$(P)SIM:SENSOR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:P")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:P","$(P)SIM:P:SP")

alias("$(P)SIM:P","$(P)SIM:P:SP:RBV")

record(ai, "$(P)SIM:OUTPUT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:TEMP:HIGHLIMIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}