record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(stringin, "$(P)ID")
{
	field(PINI, "1")
    field(DTYP, "stream")
    field(INP,  "@rotsc_$(VERSION).proto getID() $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ID")
    field(SDIS, "$(P)DISABLE")
}

record(stringin, "$(P)RAW_STATUS")
{
    field(SCAN, "1 second")
	field(PHAS, "1")
    field(DTYP, "stream")
    field(INP,  "@rotsc_$(VERSION).proto getStat($(P),RAW_MTR_STAT,$(ERR)_NUMBER,POSN) $(PORT)")
	field(FLNK, "$(P)STAT_FAN")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RAW_STATUS")
    field(SDIS, "$(P)DISABLE")
}

record(fanout, "$(P)STAT_FAN")
{
	field(LNK1, "$(P)CALC_MTR_1_ENB.PROC")
    field(LNK2, "$(P)CALC_MTR_0_ENB.PROC")
    field(LNK3, "$(P)CALC_ACTUATOR_ARM_POSN.PROC")
	field(LNK4, "$(P)CALC_CAR_AT_IDX.PROC")
    field(LNK5, "$(P)CALC_CAR_AT_POS_1.PROC")
	field(LNK6, "$(P)STAT_FAN_01.PROC")
}

record(fanout, "$(P)STAT_FAN_01")
{
	field(LNK1, "$(P)CALC_SAMPLE_ARM_UP.PROC")
	field(LNK2, "$(P)CALC_SAMPLE_ARM_DOWN.PROC")
	field(LNK3, "$(P)CALC_MTR_1_DIRECTION.PROC")
	field(LNK4, "$(P)CALC_MTR_1_STATUS.PROC")
	field(LNK5, "$(P)CALC_MTR_0_STATUS.PROC")
	field(LNK6, "$(P)STAT_FAN_02.PROC")
}

record(fanout, "$(P)STAT_FAN_02")
{
	field(LNK1, "$(P)CALC_MTR_0_DIRECTION.PROC")
	field(LNK2, "$(P)POSN.PROC")
	field(LNK3, "$(P)$(ERR)_NUMBER.PROC")
}

record(stringin, "$(P)RAW_MTR_STAT")
{
	field(FLNK, "$(P)MTR_STAT_FAN.PROC")
}

record(fanout, "$(P)MTR_STAT_FAN")
{
	field(LNK1, "$(P)CALC_MTR_0_ACTIVE.PROC")
	field(LNK2, "$(P)CALC_MTR_1_ACTIVE.PROC")
}

record(ai, "$(P)POSN")
{
	field(DESC, "The position of the rotation")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(EGU, "") # Fixed positions of 1-20
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:POSN:SP")
	field(SDIS, "$(P)DISABLE")
}

record(calc, "$(P)CALC_STATUS_OFFSET")
{
	# HRPD version gives us more bits, we can just read with an offset
	field(PINI, "1")
	field(CALC, "$(VERSION)*5")
}

record(scalcout, "$(P)CALC_ACTUATOR_ARM_POSN")
{
    field(CALC, "AA[0+BB,0+BB]")
    field(INAA, "$(P)RAW_STATUS PP MS")
	field(INBB, "$(P)CALC_STATUS_OFFSET")
    field(OUT, "$(P)ACTUATOR_ARM_POSITION PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)ACTUATOR_ARM_POSITION")
{
	field(DESC, "The position of the arm")
	field(ONAM, "RAISED")
	field(ZNAM, "LOWERED")
	info(INTEREST, "HIGH")
	info(archive, "VAL")
}

record(scalcout, "$(P)CALC_CAR_AT_IDX")
{
    field(CALC, "AA[2+BB,2+BB]")
    field(INAA, "$(P)RAW_STATUS PP MS")
	field(INBB, "$(P)CALC_STATUS_OFFSET")
    field(OUT, "$(P)CAROUSEL_AT_IDX PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)CAROUSEL_AT_IDX")
{
	field(DESC, "The carousel has reached the index?")
	field(ONAM, "AT INDEX")
	field(ZNAM, "OFF INDEX")
	info(INTEREST, "MEDIUM")
}

record(scalcout, "$(P)CALC_CAR_AT_POS_1")
{
    field(CALC, "AA[3+BB,3+BB]")
    field(INAA, "$(P)RAW_STATUS PP MS")
	field(INBB, "$(P)CALC_STATUS_OFFSET")
    field(OUT, "$(P)CAROUSEL_AT_POS_1 PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)CAROUSEL_AT_POS_1")
{
	field(DESC, "Is the carousel at position 1")
	field(ONAM, "AT POSITION 1")
	field(ZNAM, "OFF POSITION 1")
	info(INTEREST, "MEDIUM")
}

record(scalcout, "$(P)CALC_SAMPLE_ARM_UP")
{
    field(CALC, "AA[4+BB,4+BB]")
    field(INAA, "$(P)RAW_STATUS PP MS")
	field(INBB, "$(P)CALC_STATUS_OFFSET")
    field(OUT, "$(P)SAMPLE_ARM_UP PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)SAMPLE_ARM_UP")
{
	field(DESC, "Whether the sample arm is up")
	field(ONAM, "UP")
	field(ZNAM, "NOT UP")
}

record(scalcout, "$(P)CALC_SAMPLE_ARM_DOWN")
{
    field(CALC, "AA[5+BB,5+BB]")
    field(INAA, "$(P)RAW_STATUS PP MS")
	field(INBB, "$(P)CALC_STATUS_OFFSET")
    field(OUT, "$(P)SAMPLE_ARM_DOWN PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)SAMPLE_ARM_DOWN")
{
	field(DESC, "Whether the sample arm is down")
	field(ONAM, "DOWN")
	field(ZNAM, "NOT DOWN")
	info(INTEREST, "MEDIUM")
}

record(scalcout, "$(P)CALC_MTR_1_ACTIVE")
{
    field(CALC, "AA[0,0]")
    field(INAA, "$(P)RAW_MTR_STAT PP MS")
    field(OUT, "$(P)MOTOR_1_ACTIVE PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)MOTOR_1_ACTIVE")
{
	field(DESC, "The active/idle state of the arm motor")
	field(ONAM, "ACTIVE")
	field(ZNAM, "IDLE")
	info(INTEREST, "MEDIUM")
}

record(scalcout, "$(P)CALC_MTR_0_ACTIVE")
{
	# HRPD version gives three motor status bits rather than two
    field(CALC, "AA[($(VERSION)+1),($(VERSION)+1)]")
    field(INAA, "$(P)RAW_MTR_STAT PP MS")
    field(OUT, "$(P)MOTOR_0_ACTIVE PP MS")
	field(IVOA, "Don't drive outputs")
}

record(bo, "$(P)MOTOR_0_ACTIVE")
{
	field(DESC, "The active/idle state of rotating motor")
	field(ONAM, "ACTIVE")
	field(ZNAM, "IDLE")
	info(INTEREST, "MEDIUM")
}

record(bo, "$(P)GO_FORWARD")
{
	field(DTYP, "stream")
	field(DESC, "Move carousel one step forward")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(fw,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
	info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:GO_FORWARD")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)GO_BACKWARD")
{
	field(DTYP, "stream")
	field(DESC, "Move carousel one step backward")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(bk,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
	info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:GO_BACKWARD")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)HALT")
{
	field(DTYP, "stream")
	field(DESC, "Halt all motors")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(ht,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:HALT")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)RESET_0")
{
	field(DTYP, "stream")
	field(DESC, "Reset the rotating drive")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(r0,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RESET_0")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)RESET_1")
{
	field(DTYP, "stream")
	field(DESC, "Reset the arm drive")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(r1,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RESET_1")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INIT")
{
	field(VAL, "0")
	field(DTYP, "stream")
	field(DESC, "Initialise the device")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(in,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
	info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INIT")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)LOWER_ARM")
{
	field(DTYP, "stream")
	field(DESC, "Lower the sample arm")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(lo,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
	info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:LOWER_ARM")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)RAISE_ARM")
{
	field(DTYP, "stream")
	field(DESC, "Raise the sample arm")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(ra,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
	info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RAISE_ARM")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)RETRIEVE_DROPPED")
{
	field(DTYP, "stream")
	field(DESC, "Retrieve a dropped sample")
	field(OUT, "@rotsc_$(VERSION).proto sendCommand(rt,$(P)$(CMD_ERR)_NUMBER) $(PORT)")
	field(FLNK, "$(P)$(CMD_ERR)_NUMBER.PROC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RETRIEVE_DROPPED")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)POSN:SP")
{
  field(DTYP, "Soft Channel")
  field(DESC, "Move to the position and lower the arm")
	field(SCAN, "Passive")
	field(FLNK, "$(P)POSN:SP:_SEND_IF_CHANGED") #forward links to check if move is necessary
	info(INTEREST, "HIGH")
	field(EGU, "")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:POSN:SP")
    field(SDIS, "$(P)DISABLE")
}

record(calcout, "$(P)POSN:SP:_SEND_IF_CHANGED")
{
  field(INPA, "$(P)POSN:SP") #takes "variable"
  field(INPB, "$(P)POSN") #takes other "variable"
  field(CALC, "A!=B") # compares and prevents moving to position that it is already in.
  	field(OOPT, "When Non-zero") #???
  field(OUT, "$(P)POSN:SP:RAW.PROC") #Not sure what the RAW is for
}


record(ao, "$(P)POSN:SP:RAW")
{
	field(DTYP, "stream")
  field(DRVH, "20")
  field(DRVL, "1")
  field(OIF, "Full")
	field(OMSL, "closed_loop")
	field(DOL, "$(P)POSN:SP")
	field(OUT, "@rotsc_$(VERSION).proto moveWithLower($(P)$(CMD_ERR)_NUMBER) $(PORT)") #moveWithLower in 2 places?
  # field(OUT, "@rotsc_$(VERSION).proto moveWithLower($(P)POSN:SP) $(PORT)")
}

record(calc, "$(P)CALC_MOVE_FINISHED")
{
	field(DESC, "Has the device has finished moving")
	field(SCAN, "Passive")
	field(INPA, "$(P)MOTOR_0_ACTIVE CP")
	field(INPB, "$(P)MOTOR_1_ACTIVE CP")
	field(CALC, "(!A)&&(!B)")
	field(ASG, "READONLY")
	info(INTEREST, "MEDIUM")
}

record(calc, "$(P)IS_INITIALISED")
{
	field(DESC, "Has the device has been initialised")
	field(INPA, "$(P)POSN.VAL CP")
	field(CALC, "A>0")
    field(ASG, "READONLY")
	info(INTEREST, "MEDIUM")
}

record(calcout, "$(P)CALC_STAT")
{
	field(DESC, "Make text version of status")
	field(INPA, "$(P)IS_INITIALISED CP")
	field(INPB, "$(P)CALC_MOVE_FINISHED CP")
	field(CALC, "(!A)?0:B?1:2")
	field(OUT, "$(P)STAT PP")
}

record(mbbi, "$(P)STAT")
{
	field(DESC, "Device status")
	field(ZRVL, "0")
	field(ZRST, "Uninitialised")
	field(ONVL, "1")
	field(ONST, "Idle")
	field(TWVL, "2")
	field(TWST, "Moving")
	info(INTEREST, "MEDIUM")
}

### SIMULATION RECORDS ###

record(bo, "$(P)SIM:RESET_0")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:RESET_1")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:POSN:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:RETRIEVE_DROPPED")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:ID")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:GO_BACKWARD")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:RAW_STATUS")
{
	field(DESC, "Series of status bits")
	field(VAL, "1110011111001100 000 01")
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:GO_FORWARD")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:INIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Raw Soft Channel")
    field(OUT, "$(P)SIM:POSN:SP PP")
}

record(bo, "$(P)SIM:RAISE_ARM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:HALT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:LOWER_ARM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
