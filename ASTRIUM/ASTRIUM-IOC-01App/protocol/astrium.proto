InTerminator = "\n";

ReadTimeout = 2000;
WriteTimeout = 2000;
ReplyTimeout = 2000;
LockTimeout = 10000;

acc = "#%*[^#]#ACCEPT ";

getStatus {
    out "STATUS";
    in "#%*[^#]#ACCEPT CH=%*d# State= %[^#]#ASPEED= %(\$1\$2.A)f#RSPEED= %*f#APHASE= %(\$1\$2.B)f#RPHASE= %(\$1\$2.C)f#AVETO = %(\$1\$2.D)f#DIR   = %(\$1\$3){CW|CCW}#MONIT = %(\$1\$4)[^#]#FLOWR = %(\$1\$2.E)f#WTEMP = %(\$1\$2.F)f#MTEMP = %(\$1\$2.G)f#MVIBR = %(\$1\$2.H)f#MVACU = %(\$1\$2.I)f#DATE%*[^#]#TIME%*#s";
}

setFreq {
    out "FREQ %d";
    in $acc;
    
    # Give the device a chance to digest the new frequency setpoint
    wait 1000;
    
    # If speed is sent without then updating phase, it will phase to the wrong place.
    # The phase setpoint will be correct, but it will actually phase somewhere else.
    # So add a phase set here.
    out "PHASE %(\$1)f";
    in $acc;
}

setPhase {
    out "PHASE %f";
    in $acc;
    
    # Give the device a chance to digest the new phase setpoint
    wait 1000;
    
    # Update phase setpoint readback immediately after setting phase.
    # This is important because we send the phase readback value back to the
    # device as part of setFreq, and we don't want to get a race condition when
    # setting phase and freq together. Having them both as part of the same protocol
    # means it is uninterruptible.
    
    out "STATUS";
    # Ignore everything except RPHASE.
    in "#%*[^#]#ACCEPT CH=%*d# State= %*[^#]#ASPEED= %*f#RSPEED= %*f#APHASE= %*f#RPHASE= %(\$1)f#AVETO = %*f#DIR   = %*{CW|CCW}#MONIT = %*[^#]#FLOWR = %*f#WTEMP = %*f#MTEMP = %*f#MVIBR = %*f#MVACU = %*f#DATE%*[^#]#TIME%*#s";
    
}

brake {
    out "BRAKE";
    in $acc;
}

calib {
    out "CALIB";
    in $acc;
}
