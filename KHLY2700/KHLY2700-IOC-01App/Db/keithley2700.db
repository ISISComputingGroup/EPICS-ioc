record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
}

record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

##################################################
#
# DB file for Keithley 2700
#
##################################################


record(stringin, "$(P)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getIDN $(PORT)")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:IDN")
    field(SDIS, "$(P)DISABLE")
}

record(calcout, "$(P)CH:RANGE:SP")
{
	field(DESC, "Write start and end of scan range")
	field(DTYP, "stream")
	field(INPA, "$(P)CH:START:SP ")
	field(INPB, "$(P)CH:END:SP")
	field(CALC, "0")
	field(OUT, "@devKeithley_2700.proto setScanChannels $(PORT)")
}
alias("$(P)CH:RANGE:SP","$(P)CH:RANGE")

record(ao, "$(P)CH:START:SP")
{
	field(DESC, "Set channel scan range start point")
	field(DTYP, "stream")
	field(EGU, "")
	field(OUT, "@devKeithley_2700.proto setScanChannelsStart($(P)CH) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:START:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)CH:START")
{
	field(DESC, "Return first channel in scan range")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(INP, "@devKeithley_2700.proto getChannelsStart $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:START")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)CH:END")
{
	field(DESC, "Return last channel in scan range")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(INP, "@devKeithley_2700.proto getChannelsEnd $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:END")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)CH:END:SP")
{
	field(DESC, "Set end point of channel range to scan")
	field(DTYP, "stream")
	field(OUT, "@devKeithley_2700.proto setScanChannelsEnd($(P)CH) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:END:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)BUFFER:CLEAR:SP")
{
	field(DESC, "Clear readings from buffer")
	field(DTYP, "stream")
	field(ZNAM, "")
	field(ONAM, "")
	field(OUT, "@devKeithley_2700.proto clearBuffer $(PORT)")    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:CLEAR:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFFER:CLEAR:SP","$(P)BUFFER:CLEAR")

record(bo, "$(P)SYSTEM:CLEAR:SP")
{
	field(DESC, "Clear error message from queue")
	field(DTYP, "stream")
	field(ZNAM, "")
	field(ONAM, "")
	field(OUT, "@devKeithley_2700.proto clearSystemErrors $(PORT)")  

    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SYSTEM:CLEAR:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)SYSTEM:CLEAR:SP","$(P)SYSTEM:CLEAR")

record(mbbo, "$(P)MEASUREMENT:SP") {
	field(DESC, "Set measurement function")
	field(DTYP, "stream")
	field(ZRST, "VOLT")
    field(ONST, "VOLT:AC")
    field(TWST, "CURR")
    field(THST, "CURR:AC")
    field(FRST, "RES")
    field(FVST, "FRES")
    field(SXST, "CONT")
    field(SVST, "FREQ")
    field(EIST, "PER")
	field(OUT, "@devKeithley_2700.proto setMeasurement($(P)CH) $(PORT)")  
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MEASUREMENT:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)MEASUREMENT:SP","$(P)MEASUREMENT")

record(mbbo, "$(P)BUFFER:SOURCE:SP") 
{
    field(DESC, "Set buffer feed source")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferFeedSource $(PORT)")
    field(ZRST, "SENS")
    field(ONST, "CALC")
    field(TWST, "NONE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:SOURCE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFFER:SOURCE:SP", "$(P)BUFFER:SOURCE")

record(bo, "$(P)BUFFER:CLEAR:AUTO:SP") 
{
    field(DESC, "Set Buffer State")
    field(SCAN, "1 second")
    field(OUT,  "@devKeithley_2700.proto setBufferAutoClearStatus $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:CLEAR:AUTO:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFFER:CLEAR:AUTO:SP","$(P)BUFFER:CLEAR:AUTO")

record(ai, "$(P)BUFFER:NEXT") 
{
    field(DESC, "Next Buffer reading location")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getNextBufferReadingLoc $(PORT)")
	info(ARCHIVE, "VAL")
    info(INTEREST, "HIGH")
	field(EGU, "")
	field(FLNK, "$(P)COUNT:CALC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:NEXT")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)COUNT")
{
	field(DESC, "Number of buffer readings to return")
	info(INTEREST, "LOW")
	field(EGU, "")
}

record(ao, "$(P)CURRENT")
{
	field(DESC, "Current buffer read location")
	info(INTEREST, "LOW")
	field(EGU, "")
}

record(calcout, "$(P)COUNT:CALC") 
{
	field(DESC, "Calculating number of readings")
	field(OOPT, "Every Time")
	field(INPA, "$(P)BUFFER:NEXT")
	field(INPB, "$(P)CURRENT")
	field(CALC, "A-B")
	field(OUT, "$(P)COUNT PP")	
	#field(FLNK, "$(P)BUFFER:READINGS")
	field(FLNK, "$(P)CURRENT:CALC")
}

## return string of readings from Start to +Count
record(waveform, "$(P)BUFFER:READINGS")
{
    field(DESC, "Buffer Readings")
	field(NELM, "100")
	field(FTVL, "DOUBLE")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getBuffReadings($(P)) $(PORT)")
	info(ARCHIVE, "VAL")
    info(INTEREST, "HIGH")
	field(PREC, "5")
	field(FLNK, "$(P)CURRENT:CALC")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:READINGS")
    field(SDIS, "$(P)DISABLE")
}

record(calcout, "$(P)CURRENT:CALC")
{
	field(DESC, "Update current buffer memory location")
	field(INPA, "$(P)BUFFER:NEXT")
	field(CALC, "A")
	field(OUT, "$(P)CURRENT PP")
	field(OOPT, "Every Time")
	field(FLNK, "$(P)BUFFER:READINGS:PARSE:READINGS")
}

# These aSub records parse BUFFER:READINGS into 
# channel PVs (CHNL:XXX:READING and CHNL:XXX:TIMESTAMP)

# They are duplicated as I couldn't find a way to set waveform values from 
# a single C file and we are limited in the number of OUT fields an aSub record
# can have.

record(aSub,"$(P)BUFFER:READINGS:PARSE:READINGS")
{
    field(SNAM, "parse_channel_readings")
    field(FTA, "DOUBLE")
    field(INPA, "$(P)BUFFER:READINGS")
	field(NOA, "100")
    field(OUTA, "$(P)CHNL:101:READING PP")
    field(OUTB, "$(P)CHNL:102:READING PP")
    field(OUTC, "$(P)CHNL:103:READING PP")
    field(OUTD, "$(P)CHNL:104:READING PP")
    field(OUTE, "$(P)CHNL:105:READING PP")
    field(OUTF, "$(P)CHNL:106:READING PP")
    field(OUTG, "$(P)CHNL:107:READING PP")
    field(OUTH, "$(P)CHNL:108:READING PP")
    field(OUTI, "$(P)CHNL:109:READING PP")
    field(OUTJ, "$(P)CHNL:110:READING PP")
    field(OUTK, "$(P)CHNL:201:READING PP")
    field(OUTL, "$(P)CHNL:202:READING PP")
    field(OUTM, "$(P)CHNL:203:READING PP")
    field(OUTN, "$(P)CHNL:204:READING PP")
    field(OUTO, "$(P)CHNL:205:READING PP")
    field(OUTP, "$(P)CHNL:206:READING PP")
    field(OUTQ, "$(P)CHNL:207:READING PP")
    field(OUTR, "$(P)CHNL:208:READING PP")
    field(OUTS, "$(P)CHNL:209:READING PP")
    field(OUTT, "$(P)CHNL:210:READING PP")
	field(FLNK, "$(P)BUFFER:READINGS:PARSE:TIMESTAMPS")
}

record(aSub,"$(P)BUFFER:READINGS:PARSE:TIMESTAMPS")
{
    field(SNAM, "parse_channel_timestamps")
    field(FTA, "DOUBLE")
    field(INPA, "$(P)BUFFER:READINGS")
	field(NOA, "100")
    field(OUTA, "$(P)CHNL:101:TIMESTAMP PP")
    field(OUTB, "$(P)CHNL:102:TIMESTAMP PP")
    field(OUTC, "$(P)CHNL:103:TIMESTAMP PP")
    field(OUTD, "$(P)CHNL:104:TIMESTAMP PP")
    field(OUTE, "$(P)CHNL:105:TIMESTAMP PP")
    field(OUTF, "$(P)CHNL:106:TIMESTAMP PP")
    field(OUTG, "$(P)CHNL:107:TIMESTAMP PP")
    field(OUTH, "$(P)CHNL:108:TIMESTAMP PP")
    field(OUTI, "$(P)CHNL:109:TIMESTAMP PP")
    field(OUTJ, "$(P)CHNL:110:TIMESTAMP PP")
    field(OUTK, "$(P)CHNL:201:TIMESTAMP PP")
    field(OUTL, "$(P)CHNL:202:TIMESTAMP PP")
    field(OUTM, "$(P)CHNL:203:TIMESTAMP PP")
    field(OUTN, "$(P)CHNL:204:TIMESTAMP PP")
    field(OUTO, "$(P)CHNL:205:TIMESTAMP PP")
    field(OUTP, "$(P)CHNL:206:TIMESTAMP PP")
    field(OUTQ, "$(P)CHNL:207:TIMESTAMP PP")
    field(OUTR, "$(P)CHNL:208:TIMESTAMP PP")
    field(OUTS, "$(P)CHNL:209:TIMESTAMP PP")
    field(OUTT, "$(P)CHNL:210:TIMESTAMP PP")
	field(FLNK, "$(P)CURRENT:CALC")
}

record(ai, "$(P)BUFFER:MEM:AVAIL")
{
    field(DESC, "Available buffer bytes")
    field(DTYP, "stream")
	field(SCAN, "1 second")	
    field(INP,  "@devKeithley_2700.proto getBufferMemory($(P)BUFFER:MEM:USED) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:MEM:AVAIL")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)BUFFER:MEM:USED")
{
    field(DESC, "Bytes used by buffer for stored readings")
	field(EGU, "")
}

record(ao, "$(P)BUFFER:SIZE:SP") 
{
    field(DESC, "Set Size of Buffer")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferSize $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:SIZE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)BUFFER:SIZE") 
{
    field(DESC, "Get Size of Buffer")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto getBufferSize $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:SIZE")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)TIMESTAMP:FORMAT:SP") 
{
    field(DESC, "Query Time Stamp Format")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setTimeStamp $(PORT)")
    field(ZNAM, "ABS")
    field(ONAM, "DELT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIMESTAMP:FORMAT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)TIMESTAMP:FORMAT") 
{
    field(DESC, "Query Time Stamp Format")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto getTimeStamp $(PORT)")
    field(ZNAM, "ABS")
    field(ONAM, "DELT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIMESTAMP:FORMAT")
    field(SDIS, "$(P)DISABLE")
}

 record(bi, "$(P)DELAYMODE") 
{
    field(DESC, "Enable/Disable auto delay")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getDelayState $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIMESTAMP:FORMAT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)DELAYMODE:SP") 
{
    field(DESC, "Enable/Disable auto delay")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setDelayState $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DELAYMODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)INITMODE") 
{
    field(DESC, "continuous initiation state - default on")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getInitState $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INITMODE")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INITMODE:SP") 
{
    field(DESC, "Enable/Disable continuous initiation")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setInitState $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INITMODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)SAMPLECOUNT") 
{
    field(DESC, "Query sample count")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getSampleCount $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLECOUNT")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)SAMPLECOUNT:SP") 
{
    field(DESC, "Set sample count")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setSampleCount $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLECOUNT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)CONTROLSOURCE:SP") 
{
    field(DESC, "Set programmed control source")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setControlSource $(PORT)")
    field(ZRST, "IMM")
    field(ONST, "TIM")
    field(TWST, "MAN")
    field(THST, "BUS")
    field(FRST, "EXT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CONTROLSOURCE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)CONTROLSOURCE:SP", "$(P)CONTROLSOURCE")

record(stringout, "$(P)DATAELEMENTS:SP")
{
    field(DESC, "set elements returned by trace:data")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setDataElements $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DATAELEMENTS:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)DATAELEMENTS:SP","$(P)DATAELEMENTS")

record(bo, "$(P)FRES:AUTORANGE:SP") 
{
    field(DESC, "Toggle auto range on/off")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setAutoRange($(P)CH) $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:AUTORANGE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)FRES:AUTORANGE") 
{
    field(DESC, "Get FResistance autorange mode")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto getAutoRange $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:AUTORANGE:SP")
    field(SDIS, "$(P)DISABLE")
}

# digits between 4-7
record(ao, "$(P)FRES:DIGITS:SP") 
{
	field(DESC, "FRES value for digit range")
	field(EGU, "")
	field(DTYP, "stream")
	field(OUT, "@devKeithley_2700.proto setFResDigits($(P)CH) $(PORT)")
	field(HIHI, "8")
	field(LOLO, "3")
	field(HHSV,"MAJOR")
	field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:DIGITS:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)FRES:DIGITS:SP", "$(P)FRES:DIGITS")

# number of plc cycles
record(ao, "$(P)FRES:NPLC:SP") 
{
    field(DESC, "Set Intergration Rate")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setFResistancePlcRate $(PORT)")
    field(HIHI, "61")
    field(LOLO, "0")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:NPLC:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)FRES:NPLC:SP", "$(P)FRES:NPLC")

record(mbbo, "$(P)BUFFER:CONTROLMODE:SP") 
{
    field(DESC, "Set Buffer Control Mode")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferControl $(PORT)")
    field(ZRST, "NEXT")
    field(ONST, "ALW")
    field(TWST, "NEV")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:CONTROLMODE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFFER:CONTROLMODE:SP", "$(P)BUFFER:CONTROLMODE")

record(bo, "$(P)SCAN:STATE:SP") 
{
	field(DESC, "Toggle scan on or off")
	field(DTYP, "stream")
	field(OUT,  "@devKeithley_2700.proto setScanState $(PORT)")
	field(ZNAM, "INT")
	field(ONAM, "NONE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SCAN:STATE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)SCAN:STATE:SP", "$(P)SCAN:STATE")

### SIMULATION RECORDS ###

record(bi, "$(P)SIM:INITMODE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:INITMODE","$(P)SIM:INITMODE:SP")

record(mbbo, "$(P)SIM:BUFFER:SOURCE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFFER:SOURCE","$(P)SIM:BUFFER:SOURCE:SP")

record(ao, "$(P)SIM:BUFFER:SIZE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFFER:SIZE","$(P)SIM:BUFFER:SIZE:SP")

record(bo, "$(P)SIM:SYSTEM:CLEAR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SYSTEM:CLEAR","$(P)SIM:SYSTEM:CLEAR:SP")

record(bi, "$(P)SIM:FRES:AUTORANGE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:AUTORANGE","$(P)SIM:FRES:AUTORANGE:SP")

record(ai, "$(P)SIM:BUFFER:NEXT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:FRES:NPLC")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:NPLC","$(P)SIM:FRES:NPLC:SP")

record(bi, "$(P)SIM:SCAN:STATE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SCAN:STATE","$(P)SIM:SCAN:STATE:SP")

record(stringout, "$(P)SIM:DATAELEMENTS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:DATAELEMENTS","$(P)SIM:DATAELEMENTS:SP")

record(ai, "$(P)SIM:CH:END")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CH:END","$(P)SIM:CH:END:SP")

record(bo, "$(P)SIM:BUFFER:CLEAR:AUTO")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFFER:CLEAR:AUTO","$(P)SIM:BUFFER:CLEAR:AUTO:SP")

record(ai, "$(P)SIM:CH:START")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CH:START","$(P)SIM:CH:START:SP")

record(ai, "$(P)SIM:BUFFER:MEM:AVAIL")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:BUFFER:CLEAR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFFER:CLEAR","$(P)SIM:BUFFER:CLEAR:SP")

record(waveform, "$(P)SIM:BUFFER:READINGS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(NELM, "100")
    field(FTVL, "DOUBLE")
}

record(bo, "$(P)SIM:DELAYMODE:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(mbbo, "$(P)SIM:BUFFER:CONTROLMODE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFFER:CONTROLMODE","$(P)SIM:BUFFER:CONTROLMODE:SP")

record(ai, "$(P)SIM:SAMPLECOUNT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SAMPLECOUNT","$(P)SIM:SAMPLECOUNT:SP")

record(ao, "$(P)SIM:FRES:DIGITS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:DIGITS","$(P)SIM:FRES:DIGITS:SP")

record(mbbo, "$(P)SIM:MEASUREMENT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:MEASUREMENT","$(P)SIM:MEASUREMENT:SP")

record(stringin, "$(P)SIM:IDN")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:TIMESTAMP:FORMAT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:TIMESTAMP:FORMAT","$(P)SIM:TIMESTAMP:FORMAT:SP")

record(mbbo, "$(P)SIM:CONTROLSOURCE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CONTROLSOURCE","$(P)SIM:CONTROLSOURCE:SP")
