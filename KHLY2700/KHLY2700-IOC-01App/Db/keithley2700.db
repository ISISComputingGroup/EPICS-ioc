record(bo, "$(P)SIM")
{
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

#
# INIT:SEQ and INIT:SEQ:TWO set up the initial state of the Keithley 2700
# to read FResistance values across channels 101:210.
#

record(sseq, "$(P)INIT:SEQ") {
	field(PINI, "YES")
	field(DESC, "Initialisation of values")

	# Clear all system errors
	field(LNK1, "$(P)SYSTEM:CLEAR:SP PP")
	field(DO1, "0")
	field(WAIT1, "Wait")

	# Empty buffer readings
	field(LNK2, "$(P)BUFF:CLEAR:SP PP")
	field(STR2, "")
	field(WAIT2, "Wait")

	# Empty buffer readings
	field(LNK3, "$(P)CH:RANGE:SP PP")
	field(STR3, "101:210")
	field(WAIT3, "Wait")

	# Set function to 'FResistance' and set channels
	field(LNK4, "$(P)MEASUREMENT:SP PP")
	field(STR4, "FRES")
	field(WAIT4, "Wait")

	# Set auto range to on
	field(LNK5, "$(P)FRES:AUTORANGE:SP PP")
	field(STR5, "ON")
	field(WAIT5, "Wait")

	# Set number of digits to 7
	field(LNK6, "$(P)FRES:DIGITS:SP PP")
	field(DO6, "7")
	field(WAIT6, "Wait")

	# Set PLC cycles
	field(LNK7, "$(P)FRES:NPLC:SP PP")
	field(DO7, "5")
	field(WAIT7, "Wait")

	# Set control source to Immediate
	field(LNK8, "$(P)CONTROLSOURCE:SP PP")
	field(STR8, "IMM")
	field(WAIT8, "Wait")

	# Set auto delay to On
	field(LNK9, "$(P)DELAYMODE:SP PP")
	field(STR9, "ON")
	field(WAIT9, "Wait")

	field(FLNK, "$(P)INIT:SEQ:TWO PP")
}

record(sseq, "$(P)INIT:SEQ:TWO") {

	# Set trace buffer to auto clear
	field(LNK1, "$(P)BUFF:AUTOCLEAR:SP PP")
	field(STR1, "ON")
	field(WAIT1, "Wait")

	# Set trace buffer points to 1000
	field(LNK2, "$(P)BUFF:SIZE:SP PP")
	field(DO2, "1000")
	field(WAIT2, "Wait")

	# Set buffer source to raw (sens)
	field(LNK3, "$(P)BUFF:SOURCE:SP PP")
	field(STR3, "SENS")
	field(WAIT3, "Wait")

	# Set buffer control mode to Always
	field(LNK4, "$(P)BUFF:CONTROLMODE:SP PP")
	field(STR4, "ALW")
	field(WAIT4, "Wait")

	# Set timestamp format to Absolute
	field(LNK5, "$(P)TIME:FORMAT:SP PP")
	field(STR5, "ABS")
	field(WAIT5, "Wait")

	# Set continuous initiation to On
	field(LNK6, "$(P)INITMODE:SP PP")
	field(STR6, "ON")
	field(WAIT6, "Wait")

	# Set sample count to 1
	field(LNK7, "$(P)SAMPLECOUNT:SP PP")
	field(DO7, "1")
	field(WAIT7, "Wait")

	# # Set readback elements (reading, channel, timestamp)
	field(LNK8, "$(P)DATAELEMENTS:SP PP")
	field(STR8, "READ,CHAN,TST")
	field(WAIT8, "Wait")

  # Set scan to Internal (starts clicks)
  field(LNK9, "$(P)SCAN:STATE:SP PP")
  field(STR9, "INT")
  field(WAIT9, "Wait")
}

record(stringin, "$(P)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getIDN $(PORT)")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:IDN")
    field(SDIS, "$(P)DISABLE")
}

record(stringout, "$(P)CH:RANGE:SP")
{
	field(DESC, "Write start and end of scan range")
	field(DTYP, "stream")
	field(OUT, "@devKeithley_2700.proto setScanChannels $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:RANGE:SP")
    field(SDIS, "$(P)DISABLE")
}

alias("$(P)CH:RANGE:SP","$(P)CH:RANGE")

record(ao, "$(P)CH:START:SP")
{
	field(DESC, "Set channel scan range start point")
	field(DTYP, "stream")
	field(EGU, "")
	field(OUT, "@devKeithley_2700.proto setScanChannelsStart($(P)CH) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:START:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)CH:START")
{
	field(DESC, "Return first channel in scan range")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(INP, "@devKeithley_2700.proto getChannelsStart $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:START")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)CH:END")
{
	field(DESC, "Return last channel in scan range")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(INP, "@devKeithley_2700.proto getChannelsEnd $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:END")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)CH:END:SP")
{
  field(DESC, "Set end point of channel range to scan")
  field(DTYP, "stream")
  field(OUT, "@devKeithley_2700.proto setScanChannelsEnd($(P)CH) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CH:END:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)BUFF:CLEAR:SP")
{
  field(DESC, "Clear readings from buffer")
  field(DTYP, "stream")
  field(ZNAM, "")
  field(ONAM, "")
  field(OUT, "@devKeithley_2700.proto clearBuffer $(PORT)")
  field(FLNK,  "$(P)LAST:READ_LOC:RST")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFFER:CLEAR:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFF:CLEAR:SP","$(P)BUFF:CLEAR")

record(bo, "$(P)SYSTEM:CLEAR:SP")
{
	field(DESC, "Clear error message from queue")
	field(DTYP, "stream")
	field(ZNAM, "")
	field(ONAM, "")
	field(OUT, "@devKeithley_2700.proto clearSystemErrors $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SYSTEM:CLEAR:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)SYSTEM:CLEAR:SP","$(P)SYSTEM:CLEAR")

record(mbbo, "$(P)MEASUREMENT:SP") {
	field(DESC, "Set measurement function")
	field(DTYP, "stream")
	field(ZRST, "VOLT:DC")
    field(ONST, "VOLT:AC")
    field(TWST, "CURR:DC")
    field(THST, "CURR:AC")
    field(FRST, "RES")
    field(FVST, "FRES")
    field(SXST, "CONT")
    field(SVST, "FREQ")
    field(EIST, "PER")
	field(OUT, "@devKeithley_2700.proto setMeasurement($(P)CH) $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MEASUREMENT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(mbbi, "$(P)MEASUREMENT") {
	field(DESC, "Get measurement function")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(ZRST, "VOLT:DC")
    field(ONST, "VOLT:AC")
    field(TWST, "CURR:DC")
    field(THST, "CURR:AC")
    field(FRST, "RES")
    field(FVST, "FRES")
    field(SXST, "CONT")
    field(SVST, "FREQ")
    field(EIST, "PER")
	field(INP, "@devKeithley_2700.proto getMeasurement $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MEASUREMENT")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)BUFF:SOURCE:SP")
{
    field(DESC, "Set buffer feed source")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferFeedSource $(PORT)")
    field(ZRST, "SENS")
    field(ONST, "CALC")
    field(TWST, "NONE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:SOURCE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFF:SOURCE:SP", "$(P)BUFF:SOURCE")

record(bo, "$(P)BUFF:AUTOCLEAR:SP")
{
    field(DESC, "Set Buffer auto clear")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferStatus $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:AUTOCLEAR:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)BUFF:AUTOCLEAR")
{
    field(DESC, "Get buffer auto clear status")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getBufferStatus $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:AUTOCLEAR")
    field(SDIS, "$(P)DISABLE")
}







record(ai, "$(P)BUFF:NEXT") {
  field(DESC, "Next free buffer location")
  field(SCAN, ".2 second")
  field(DTYP, "stream")
  field(INP,  "@devKeithley_2700.proto getNextBufferReadingLoc $(PORT)")
  info(ARCHIVE, "VAL")
  info(INTEREST, "HIGH")
  field(EGU, "") # Proto command uses this value

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:BUFFER:NEXT")
  field(SDIS, "$(P)DISABLE")

  field(FLNK, "$(P)INDEX:START:CALC")
}

record(calcout,  "$(P)INDEX:START:CALC") {
  field(DESC,  "Where to start reading from")
  field(INPA, "$(P)BUFF:NEXT")
  field(INPB, "$(P)INDEX:START")
  field(CALC,  "((A<B)&&(A>0))?0:B")
  field(OUT,  "$(P)INDEX:START PP")
}

record(ao, "$(P)INDEX:START") {
  field(DESC, "Index loc to start retrieve readings")
  field(PINI,  "YES")
  field(VAL, "0")
  field(FLNK, "$(P)COUNT:CALC")
}

record(calcout, "$(P)COUNT:CALC") {
  field(DESC, "calculates number of readings to return")
  field(INPA, "$(P)BUFF:NEXT")
  field(INPB, "$(P)INDEX:START")
  field(INPC, "$(P)BUFF:SIZE")
  # if next free buff location is >= index to start reading from, then this is
  # the normal case, and count is simply next free buffer location - starting
  # index. If not, then check if next buffer location is reported as 0. If it is
  # then buffer has filled and there are readings yet to be retrieved from the
  # buffer, so retrieve them. If next buffer location is not 0, then readings
  # have been cleared from the buffer, so just read from index 0 up to next free
  # buffer location. See Wiki page for more detail
  field(CALC, "(A>=B)?(A-B):((A=0)?(C-B):A)")
  field(OUT, "$(P)COUNT PP")
}

record(ao, "$(P)COUNT") {
  field(DESC, "number of items to return")
  field(FLNK,  "$(P)BUFF:READ:TRIG")
}

record(calcout, "$(P)BUFF:READ:TRIG") {
  field(INPA,  "$(P)COUNT")
  field(CALC,  "A>0?1:0")
  # forward link predicated on COUNT>0 ?
  field(OOPT,  "When Non-zero")
  field(OUT,  "$(P)BUFF:READ PP") # this will send 1 to BUFF:READ
}

record(waveform, "$(P)BUFF:READ")
{
  field(DESC, "Buffer readings from start to +count")
  field(NELM, "$(BUFF_SIZE)")
  field(FTVL, "DOUBLE")
  field(DTYP, "stream")
  field(INP,  "@devKeithley_2700.proto getBufferReadings($(P)) $(PORT)")
  info(ARCHIVE, "VAL")
  info(INTEREST, "HIGH")
  field(PREC, "5")
  field(FLNK, "$(P)BUFF:READ:PARSE:READINGS")
  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:BUFF:READ")
  field(SDIS, "$(P)DISABLE")
}

record(calcout, "$(P)INDEX:START:UPDATE") {  # this needs to be triggered at the end of each read
  field(DESC, "Update start index after reads")
  field(INPA, "$(P)BUFF:NEXT") # May not work if record scans before read op completes
  field(CALC, "A")
  field(OUT, "$(P)INDEX:START PP")
  field(TPRO,  "1")
}









# These aSub records parse BUFF:READ into
# channel PVs (CHNL:XXX:READ and CHNL:XXX:TIME)

record(aSub,"$(P)BUFF:READ:PARSE:READINGS")
{
  field(SNAM, "parse_channel_readings")
  field(FTA, "DOUBLE")
  field(INPA, "$(P)BUFF:READ")
  field(NOA, "100")
  field(OUTA, "$(P)CHNL:101:READ PP")
  field(OUTB, "$(P)CHNL:102:READ PP")
  field(OUTC, "$(P)CHNL:103:READ PP")
  field(OUTD, "$(P)CHNL:104:READ PP")
  field(OUTE, "$(P)CHNL:105:READ PP")
  field(OUTF, "$(P)CHNL:106:READ PP")
  field(OUTG, "$(P)CHNL:107:READ PP")
  field(OUTH, "$(P)CHNL:108:READ PP")
  field(OUTI, "$(P)CHNL:109:READ PP")
  field(OUTJ, "$(P)CHNL:110:READ PP")
  field(OUTK, "$(P)CHNL:201:READ PP")
  field(OUTL, "$(P)CHNL:202:READ PP")
  field(OUTM, "$(P)CHNL:203:READ PP")
  field(OUTN, "$(P)CHNL:204:READ PP")
  field(OUTO, "$(P)CHNL:205:READ PP")
  field(OUTP, "$(P)CHNL:206:READ PP")
  field(OUTQ, "$(P)CHNL:207:READ PP")
  field(OUTR, "$(P)CHNL:208:READ PP")
  field(OUTS, "$(P)CHNL:209:READ PP")
  field(OUTT, "$(P)CHNL:210:READ PP")
	field(FLNK, "$(P)BUFF:READ:PARSE:TIME")
}

record(aSub,"$(P)BUFF:READ:PARSE:TIME")
{
  field(SNAM, "parse_channel_timestamps")
  field(FTA, "DOUBLE")
  field(INPA, "$(P)BUFF:READ")
	field(NOA, "100")
  field(OUTA, "$(P)CHNL:101:TIME PP")
  field(OUTB, "$(P)CHNL:102:TIME PP")
  field(OUTC, "$(P)CHNL:103:TIME PP")
  field(OUTD, "$(P)CHNL:104:TIME PP")
  field(OUTE, "$(P)CHNL:105:TIME PP")
  field(OUTF, "$(P)CHNL:106:TIME PP")
  field(OUTG, "$(P)CHNL:107:TIME PP")
  field(OUTH, "$(P)CHNL:108:TIME PP")
  field(OUTI, "$(P)CHNL:109:TIME PP")
  field(OUTJ, "$(P)CHNL:110:TIME PP")
  field(OUTK, "$(P)CHNL:201:TIME PP")
  field(OUTL, "$(P)CHNL:202:TIME PP")
  field(OUTM, "$(P)CHNL:203:TIME PP")
  field(OUTN, "$(P)CHNL:204:TIME PP")
  field(OUTO, "$(P)CHNL:205:TIME PP")
  field(OUTP, "$(P)CHNL:206:TIME PP")
  field(OUTQ, "$(P)CHNL:207:TIME PP")
  field(OUTR, "$(P)CHNL:208:TIME PP")
  field(OUTS, "$(P)CHNL:209:TIME PP")
  field(OUTT, "$(P)CHNL:210:TIME PP")
  field(FLNK, "$(P)INDEX:START:UPDATE")
  field(TPRO,  "1")
}

record(ai, "$(P)BUFFER:MEM:AVAIL")
{
  field(DESC, "Available buffer bytes")
  field(DTYP, "stream")
	field(SCAN, "1 second")
  field(INP,  "@devKeithley_2700.proto getBufferMemory($(P)BUFF:MEM:USED) $(PORT)")
  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:BUFF:MEM:AVAIL")
  field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)BUFF:MEM:USED")
{
  field(DESC, "Bytes used by buffer for stored readings")
  field(EGU, "")
}

record(ao, "$(P)BUFF:SIZE:SP")
{
    field(DESC, "Set Size of Buffer")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferSize $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:SIZE:SP")
    field(SDIS, "$(P)DISABLE")
}
record(ai, "$(P)BUFF:SIZE")
{
    field(DESC, "Get Size of Buffer")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getBufferSize $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:SIZE")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)TIME:FORMAT:SP")
{
    field(DESC, "Set Time Stamp Format")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setTimeStamp $(PORT)")
    field(ZNAM, "ABS")
    field(ONAM, "DELT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIME:FORMAT:SP PP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)TIME:FORMAT")
{
    field(DESC, "Get Time Stamp Format")
	field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getTimeStamp $(PORT)")
    field(ZNAM, "ABS")
    field(ONAM, "DELT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIME:FORMAT")
    field(SDIS, "$(P)DISABLE")
}

 record(bi, "$(P)DELAYMODE")
{
    field(DESC, "Get auto delay mode")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getDelayState $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DELAYMODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)DELAYMODE:SP")
{
    field(DESC, "Enable/Disable auto delay")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setDelayState $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DELAYMODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)INITMODE")
{
    field(DESC, "continuous initiation state - default on")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getInitState $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INITMODE")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INITMODE:SP")
{
    field(DESC, "Enable/Disable continuous initiation")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setInitState $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INITMODE:SP")
    field(SDIS, "$(P)DISABLE")
}




record(ai, "$(P)SAMPLECOUNT")
{
    field(DESC, "Query sample count")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devKeithley_2700.proto getSampleCount $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLECOUNT")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)SAMPLECOUNT:SP")
{
    field(DESC, "Set sample count")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setSampleCount $(PORT)")
    field(HIHI, "55001")
    field(LOLO, "1")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLECOUNT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)CONTROLSOURCE:SP")
{
    field(DESC, "Set programmed control source")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setControlSource $(PORT)")
    field(ZRST, "IMM")
    field(ONST, "TIM")
    field(TWST, "MAN")
    field(THST, "BUS")
    field(FRST, "EXT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CONTROLSOURCE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)CONTROLSOURCE:SP", "$(P)CONTROLSOURCE")

record(stringout, "$(P)DATAELEMENTS:SP")
{
    field(DESC, "set elements returned by trace:data")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setDataElements $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:DATAELEMENTS:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)DATAELEMENTS:SP","$(P)DATAELEMENTS")

record(bo, "$(P)FRES:AUTORANGE:SP")
{
    field(DESC, "Toggle auto range on/off")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setAutoRange($(P)CH) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:AUTORANGE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)FRES:AUTORANGE")
{
    field(DESC, "Get FResistance autorange mode")
    field(DTYP, "stream")
	field(SCAN, "1 second")
    field(INP,  "@devKeithley_2700.proto getAutoRange $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:AUTORANGE")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)FRES:DIGITS:SP")
{
	field(DESC, "FRES value for digit range")
	field(EGU, "")
	field(DTYP, "stream")
	field(OUT, "@devKeithley_2700.proto setFResDigits($(P)CH) $(PORT)")
	field(HIHI, "8")
	field(LOLO, "3")
	field(HHSV,"MAJOR")
	field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:DIGITS:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)FRES:DIGITS:SP", "$(P)FRES:DIGITS")

record(ao, "$(P)FRES:NPLC:SP")
{
    field(DESC, "Set Intergration Rate")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setFResistancePlcRate $(PORT)")
    field(HIHI, "61")
    field(LOLO, "0")
    field(HHSV,"MAJOR")
    field(LLSV,"MAJOR")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FRES:NPLC:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)FRES:NPLC:SP", "$(P)FRES:NPLC")

record(mbbo, "$(P)BUFF:CONTROLMODE:SP")
{
    field(DESC, "Set Buffer Control Mode")
    field(DTYP, "stream")
    field(OUT,  "@devKeithley_2700.proto setBufferControl $(PORT)")
    field(ZRST, "NEXT")
    field(ONST, "ALW")
    field(TWST, "NEV")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BUFF:CONTROLMODE:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)BUFF:CONTROLMODE:SP", "$(P)BUFF:CONTROLMODE")

record(bo, "$(P)SCAN:STATE:SP")
{
	field(DESC, "Toggle scan on or off")
	field(DTYP, "stream")
	field(OUT,  "@devKeithley_2700.proto setScanState $(PORT)")
	field(ZNAM, "INT")
	field(ONAM, "NONE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SCAN:STATE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)SCAN:STATE")
{
	field(DESC, "Get scan state")
	field(DTYP, "stream")
	field(SCAN, "1 second")
	field(INP,  "@devKeithley_2700.proto getScanState $(PORT)")
	field(ZNAM, "INT")
	field(ONAM, "NONE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SCAN:STATE:SP")
    field(SDIS, "$(P)DISABLE")
}

### SIMULATION RECORDS ###

record(bi, "$(P)SIM:INITMODE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:INITMODE","$(P)SIM:INITMODE:SP")

record(mbbo, "$(P)SIM:BUFF:SOURCE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFF:SOURCE","$(P)SIM:BUFF:SOURCE:SP")

record(ao, "$(P)SIM:BUFF:SIZE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFF:SIZE","$(P)SIM:BUFF:SIZE:SP")

record(bo, "$(P)SIM:SYSTEM:CLEAR")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SYSTEM:CLEAR","$(P)SIM:SYSTEM:CLEAR:SP")

record(bi, "$(P)SIM:FRES:AUTORANGE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:AUTORANGE","$(P)SIM:FRES:AUTORANGE:SP")

record(ai, "$(P)SIM:BUFF:NEXT")
{

    field(DTYP, "Soft Channel")
}

record(ao, "$(P)SIM:FRES:NPLC")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:NPLC","$(P)SIM:FRES:NPLC:SP")

record(bi, "$(P)SIM:SCAN:STATE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SCAN:STATE","$(P)SIM:SCAN:STATE:SP")

record(stringout, "$(P)SIM:DATAELEMENTS")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:DATAELEMENTS","$(P)SIM:DATAELEMENTS:SP")

record(ai, "$(P)SIM:CH:END")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CH:END","$(P)SIM:CH:END:SP")

record(ai, "$(P)SIM:CH:RANGE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CH:RANGE","$(P)SIM:CH:RANGE:SP")

record(bo, "$(P)SIM:BUFF:AUTOCLEAR")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFF:AUTOCLEAR","$(P)SIM:BUFF:AUTOCLEAR:SP")

record(ai, "$(P)SIM:CH:START")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CH:START","$(P)SIM:CH:START:SP")

record(ai, "$(P)SIM:BUFF:MEM:AVAIL")
{

    field(DTYP, "Soft Channel")
}

record(bo, "$(P)SIM:BUFF:CLEAR")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFF:CLEAR","$(P)SIM:BUFF:CLEAR:SP")

record(waveform, "$(P)SIM:BUFF:READ")
{

    field(DTYP, "Soft Channel")
    field(NELM, "100")
    field(FTVL, "DOUBLE")
}

record(bo, "$(P)SIM:DELAYMODE:SP")
{

    field(DTYP, "Soft Channel")
}

record(mbbo, "$(P)SIM:BUFF:CONTROLMODE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:BUFF:CONTROLMODE","$(P)SIM:BUFF:CONTROLMODE:SP")

record(ai, "$(P)SIM:SAMPLECOUNT")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SAMPLECOUNT","$(P)SIM:SAMPLECOUNT:SP")

record(ao, "$(P)SIM:FRES:DIGITS")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FRES:DIGITS","$(P)SIM:FRES:DIGITS:SP")

record(mbbo, "$(P)SIM:MEASUREMENT")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:MEASUREMENT","$(P)SIM:MEASUREMENT:SP")

record(stringin, "$(P)SIM:IDN")
{

    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:TIME:FORMAT")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:TIME:FORMAT","$(P)SIM:TIME:FORMAT:SP")

record(mbbo, "$(P)SIM:CONTROLSOURCE")
{

    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CONTROLSOURCE","$(P)SIM:CONTROLSOURCE:SP")
