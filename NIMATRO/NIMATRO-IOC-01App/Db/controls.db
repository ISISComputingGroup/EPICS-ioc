record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
}

record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}


# Initially generated by $Id$
# 
# auto-generated EPICS records specify an asyn port "lvfp", but this can be changed - it just needs
# to match the first argument of the relevant lvDCOMConfigure() command in the IOC st.cmd 
# 
      
# 
# Definitions from configSection "frontpanel" in XML input file
#
#     lvDCOMConfigure("lvfp", "frontpanel", "/path/to/lvinput.xml")
# 

# Write to LabVIEW control "Speed" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ai, "$(P)SPEED")
{
	field(DESC, "Speed")
    field(DTYP, "asynFloat64")
	field(SCAN, ".5 second")
    field(INP,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
    field(EGU, "cm^2/min")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SPEED")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)SPEED:SP")
{
	field(DESC, "Speed set point")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
    field(EGU, "cm^2/min")
	field(DRVH, $(SPEED_HIGH_LIMIT))  # Device high limit
	field(DRVL, $(SPEED_LOW_LIMIT)) # Device low limit
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SPEED:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)SPEED:SP:RBV")
{
	field(DESC, "Speed set point read back value")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
    field(SCAN, ".5 second")
    field(EGU, "cm^2/min")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SPEED:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

#alias("$(P)SPEED:SP", "$(P)SPEED:SP:RBV")

# Read LabVIEW control/indicator "pressure" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ai, "$(P)PRESSURE")
{
	field(DESC, "Pressure")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)pressure")
    field(PREC, "3")
    field(SCAN, ".5 second")
    field(EGU, "mN/m")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Target Pressure" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ao, "$(P)PRESSURE:SP")
{
	field(DESC, "Pressure set point")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target_Pressure")
    field(PREC, "3")
    field(EGU, "mN/m")
	field(DRVH, $(PRESSURE_HIGH_LIMIT))  # Device high limit
	field(DRVL, $(PRESSURE_LOW_LIMIT)) # Device low limit
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PRESSURE:SP:RBV")
{
	field(DESC, "pressure set point read back value")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Target_Pressure")
    field(PREC, "3")
    field(SCAN, ".5 second")
    field(EGU, "mN/m")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "area" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"

# EGU Note: Default the area is cm^2. However this can be changed on the NIMA Trough.vi but doesn't pass the units
# to the Nima Trough Interface (which we scan to populate records). 
record(ai, "$(P)AREA")
{
	field(DESC, "Area (default=cm^2)")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)area")
    field(PREC, "3")
	field(EGU, "cm^2")
    field(SCAN, ".5 second")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:AREA")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Target  Area" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ao, "$(P)AREA:SP")
{
	field(DESC, "Area set point")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target__Area")
    field(PREC, "3")
    field(EGU, "cm^2")
	field(DRVH, $(AREA_HIGH_LIMIT)) # Device high limit
    field(DRVL, $(AREA_LOW_LIMIT))	 # Device low limit
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:AREA:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)AREA:SP:RBV")
{
	field(DESC, "Area set point read back value")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Target__Area")
    field(PREC, "3")
    field(SCAN, ".5 second")
    field(EGU, "cm^2")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:AREA:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Trough Status" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(stringin, "$(P)TROUGH:STAT")
{
	field(DESC, "Trough status")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(lvfp,0,0)Trough_Status")
    field(SCAN, ".5 second")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TROUGH:STAT")
    field(SDIS, "$(P)DISABLE")
}


record(bi, "$(P)CONTROL:STATE") {
	field(DESC, "Start/Stop program control")
	
	field(ZNAM, "STOP")
	field(ONAM, "START")
    
	info(INTEREST, "HIGH")
}

alias("$(P)CONTROL:STATE", "$(P)CONTROL:STATE:SP")

# Add 1 to the value of the toggle set point to map the fanout 
# forward link index.
record(calcout, "$(P)_CONTROL:STATE:CALC") {
	field(INPA, "$(P)CONTROL:STATE CP")
	
	field(CALC, "A+1")
	
	field(OUT, "$(P)_CONTROL:STATE.SELN PP")
}

record(fanout, "$(P)_CONTROL:STATE") {
	field(SELM, "Specified")
	
	field(LNK1, "$(P)CONTROL:STOP PP")
	field(LNK2, "$(P)CONTROL:START PP")
}

# Write to LabVIEW control "Start Control" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)CONTROL:START")
{
	field(DESC, "Start program control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Start_Control")
    field(ZNAM, "START")
    field(ONAM, "START")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CONTROL:START")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Stop Control" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)CONTROL:STOP")
{
	field(DESC, "Stop program control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Control")
    field(ZNAM, "STOP")
    field(ONAM, "STOP")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CONTROL:STOP")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Mode" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(mbbo, "$(P)MODE")
{
	field(DESC, "Control mode selection")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Mode")

    field(ZRVL, 0)
    field(ZRST, "Barr Speed Control")
        
    field(ONVL, 1)
    field(ONST, "Pressure Control")
        
    field(TWVL, 2)
    field(TWST, "Area Control")
        
    field(THVL, 3)
    field(THST, "Isotherm-Cycles")
        
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MODE")
    field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Return Message" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(waveform, "$(P)RETURN:MESSAGE")
{
	field(DESC, "Device return message")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Return_Message")
    field(SCAN, ".5 second")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RETURN:MESSAGE")
    field(SDIS, "$(P)DISABLE")
}

# Read LabVIEW control/indicator "Target Reached" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bi, "$(P)TARGET:REACHED")
{
	field(DESC, "Target reached")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Target_Reached")
    field(SCAN, ".5 second")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TARGET:REACHED")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)BARRIER:STATE")
{
    field(DESC, "Set the barrier state")
    
    field(ZRST, "STOPPED")
    field(ONST, "OPEN")
    field(TWST, "CLOSE")
    
    info(INTEREST, "HIGH")
}

alias("$(P)BARRIER:STATE", "$(P)BARRIER:STATE:SP")

record(calcout, "$(P)_BARRIER:STATE:CALC") {
    field(DESC, "Add 1 to offset for fanout record index")
	field(INPA, "$(P)BARRIER:STATE:SP CP")
	
	field(CALC, "A+1")
	
	field(OUT, "$(P)_BARRIER:STATE.SELN PP")
}

record(fanout, "$(P)_BARRIER:STATE") {
	field(SELM, "Specified")
	
	field(LNK1, "$(P)BARRIER:STOP PP")
	field(LNK2, "$(P)BARRIER:OPEN PP")
    field(LNK3, "$(P)BARRIER:CLOSE PP")
}

# Write to LabVIEW control "Open Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:OPEN")
{
	field(DESC, "Open barrier")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Open_Barrier")
    field(ZNAM, "OPEN")
    field(ONAM, "OPEN")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BARRIER:OPEN")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Close Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:CLOSE")
{
	field(DESC, "Close barrier")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Close_Barrier")
    field(ZNAM, "CLOSE")
    field(ONAM, "CLOSE")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BARRIER:CLOSE")
    field(SDIS, "$(P)DISABLE")
}

# Write to LabVIEW control "Stop Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:STOP")
{
	field(DESC, "Stop barrier movement")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Barrier")
    field(ZNAM, "STOP")
    field(ONAM, "STOP")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:BARRIER:STOP")
    field(SDIS, "$(P)DISABLE")
}

### SIMULATION RECORDS ###

record(ai,"$(P)SIM:SPEED")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:SPEED","$(P)SIM:SPEED:SP")

alias("$(P)SIM:SPEED","$(P)SIM:SPEED:SP:RBV")

record(ai,"$(P)SIM:PRESSURE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:PRESSURE", "$(P)SIM:PRESSURE:SP")

alias("$(P)SIM:PRESSURE", "$(P)SIM:PRESSURE:SP:RBV")

record(ai,"$(P)SIM:AREA")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:AREA", "$(P)SIM:AREA:SP")

alias("$(P)SIM:AREA", "$(P)SIM:AREA:SP:RBV")

record(waveform,"$(P)SIM:RETURN:MESSAGE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")    field(FTVL, "CHAR")
}

record(bo,"$(P)SIM:BARRIER:CLOSE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo,"$(P)SIM:CONTROL:STOP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi,"$(P)SIM:TARGET:REACHED")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin,"$(P)SIM:TROUGH:STAT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo,"$(P)SIM:CONTROL:START")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo,"$(P)SIM:BARRIER:STOP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo,"$(P)SIM:DELETE:RUNS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(mbbo,"$(P)SIM:MODE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bo,"$(P)SIM:BARRIER:OPEN")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
