
# Initially generated by $Id$
# 
# auto-generated EPICS records specify an asyn port "lvfp", but this can be changed - it just needs
# to match the first argument of the relevant lvDCOMConfigure() command in the IOC st.cmd 
# 
      
# 
# Definitions from configSection "frontpanel" in XML input file
#
#     lvDCOMConfigure("lvfp", "frontpanel", "/path/to/lvinput.xml")
# 

# Write to LabVIEW control "Speed" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ao, "$(P)SPEED:SP")
{
	field(DESC, "LabVIEW 'Speed'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
    field(EGU, "cm^2/min")
    info(INTEREST, "HIGH")
}

# Read LabVIEW control/indicator "Trough Status" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(stringin, "$(P)TROUGH:STAT")
{
	field(DESC, "LabVIEW 'Trough Status'")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(lvfp,0,0)Trough_Status")
    field(SCAN, ".5 second")
}

# Write to LabVIEW control "Start Control" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)CONTROL:START")
{
	field(DESC, "LabVIEW 'Start Control'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Start_Control")
    field(ZNAM, "")
    field(ONAM, "START")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Stop Control" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)CONTROL:STOP")
{
	field(DESC, "LabVIEW 'Stop Control'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Control")
    field(ZNAM, "")
    field(ONAM, "STOP")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Mode" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(mbbo, "$(P)MODE")
{
	field(DESC, "LabVIEW 'Mode'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Mode")

    field(ZRVL, 0)
    field(ZRST, "Barr Speed Control")
        
    field(ONVL, 1)
    field(ONST, "Pressure Control")
        
    field(TWVL, 2)
    field(TWST, "Area Control")
        
    field(THVL, 3)
    field(THST, "Isotherm-Cycles")
        
}

# Write to LabVIEW control "Target Pressure" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ao, "$(P)PRESSURE:SP")
{
	field(DESC, "LabVIEW 'Target Pressure'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target_Pressure")
    field(PREC, "3")
    field(EGU, "mN/m")
    info(INTEREST, "MEDIUM")
}

# Read LabVIEW control/indicator "pressure" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ai, "$(P)PRESSURE")
{
	field(DESC, "LabVIEW 'pressure'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)pressure")
    field(PREC, "3")
    field(SCAN, ".5 second")
    field(EGU, "mN/m")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

alias("$(P)PRESSURE:SP", "$(P)PRESSURE:SP:RBV")

# Write to LabVIEW control "Target  Area" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ao, "$(P)AREA:SP")
{
	field(DESC, "LabVIEW 'Target  Area'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target__Area")
    field(PREC, "3")
    field(EGU, "cm^2")
    info(INTEREST, "MEDIUM")
}

# Read LabVIEW control/indicator "area" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(ai, "$(P)AREA")
{
	field(DESC, "LabVIEW 'area'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)area")
    field(PREC, "3")
    field(SCAN, ".5 second")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

alias("$(P)AREA:SP", "$(P)AREA:SP:RBV")

# Read LabVIEW control/indicator "Return Message" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(waveform, "$(P)RETURN:MESSAGE")
{
	field(DESC, "LabVIEW 'Return Message'")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Return_Message")
    field(SCAN, ".5 second")
}

# Read LabVIEW control/indicator "Target Reached" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bi, "$(P)TARGET:REACHED")
{
	field(DESC, "LabVIEW 'Target Reached'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Target_Reached")
    field(SCAN, ".5 second")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Close Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:CLOSE")
{
	field(DESC, "LabVIEW 'Close Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Close_Barrier")
    field(ZNAM, "")
    field(ONAM, "CLOSE")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Open Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:OPEN")
{
	field(DESC, "LabVIEW 'Open Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Open_Barrier")
    field(ZNAM, "")
    field(ONAM, "OPEN")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Stop Barrier" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)BARRIER:STOP")
{
	field(DESC, "LabVIEW 'Stop Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Barrier")
    field(ZNAM, "")
    field(ONAM, "STOP")
    info(INTEREST, "HIGH")
}

# Write to LabVIEW control "Delete all runs" on "C:/LabVIEW Modules/Drivers/Nima Trough/Nima Trough Code/VIs/Nima Trough Interface.vi"
record(bo, "$(P)DELETE:RUNS")
{
	field(DESC, "LabVIEW 'Delete all runs'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Delete_all_runs")
    field(ZNAM, "")
    field(ONAM, "DELETE")
}

