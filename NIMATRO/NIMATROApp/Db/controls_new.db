
# Initially generated by $Id$
# 
# auto-generated EPICS records specify an asyn port "lvfp", but this can be changed - it just needs
# to match the first argument of the relevant lvDCOMConfigure() command in the IOC st.cmd 
# 
      
# 
# Definitions from configSection "frontpanel" in XML input file
#
#     lvDCOMConfigure("lvfp", "frontpanel", "/path/to/lvinput.xml")
# 
      
# Read LabVIEW control/indicator "Speed" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ai, "$(P)Speed_RBV")
{
	field(DESC, "LabVIEW 'Speed'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Speed" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ao, "$(P)Speed")
{
	field(DESC, "LabVIEW 'Speed'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Speed")
    field(PREC, "3")
}


## Creating both stringout/stringin and waveform records for "Trough Status" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
## EPICS strings are restricted to 40 characters in length, if your strings are
## longer than this choose the character waveform records and adjust NELM if necessary

# Read LabVIEW control/indicator "Trough Status" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(stringin, "$(P)Trough_Status_RBV")
{
	field(DESC, "LabVIEW 'Trough Status'")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(lvfp,0,0)Trough_Status")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Trough Status" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(stringout, "$(P)Trough_Status")
{
	field(DESC, "LabVIEW 'Trough Status'")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(lvfp,0,0)Trough_Status")
}

# Read LabVIEW control/indicator "Trough Status" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(waveform, "$(P)Trough_StatusWF_RBV")
{
	field(DESC, "LabVIEW 'Trough Status'")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Trough_Status")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Trough Status" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(waveform, "$(P)Trough_StatusWF")
{
	field(DESC, "LabVIEW 'Trough Status'")
    field(DTYP, "asynOctetWrite")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Trough_Status")
}


# Read LabVIEW control/indicator "Start Control" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Start_Control_RBV")
{
	field(DESC, "LabVIEW 'Start Control'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Start_Control")
    field(SCAN, ".1 second")
    field(ZNAM, "Start Control")
    field(ONAM, "")
}

# Write to LabVIEW control "Start Control" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Start_Control")
{
	field(DESC, "LabVIEW 'Start Control'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Start_Control")
    field(ZNAM, "Start Control")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Stop Control" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Stop_Control_RBV")
{
	field(DESC, "LabVIEW 'Stop Control'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Stop_Control")
    field(SCAN, ".1 second")
    field(ZNAM, "Stop Control")
    field(ONAM, "")
}

# Write to LabVIEW control "Stop Control" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Stop_Control")
{
	field(DESC, "LabVIEW 'Stop Control'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Control")
    field(ZNAM, "Stop Control")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Mode" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(mbbi, "$(P)Mode_RBV")
{
	field(DESC, "LabVIEW 'Mode'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Mode")
    field(SCAN, ".1 second")

    field(ZRVL, 0)
    field(ZRST, "Barr Speed Control")
        
    field(ONVL, 1)
    field(ONST, "Pressure Control")
        
    field(TWVL, 2)
    field(TWST, "Area Control")
        
    field(THVL, 3)
    field(THST, "Isotherm-Cycles")
        
}

# Write to LabVIEW control "Mode" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(mbbo, "$(P)Mode")
{
	field(DESC, "LabVIEW 'Mode'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Mode")

    field(ZRVL, 0)
    field(ZRST, "Barr Speed Control")
        
    field(ONVL, 1)
    field(ONST, "Pressure Control")
        
    field(TWVL, 2)
    field(TWST, "Area Control")
        
    field(THVL, 3)
    field(THST, "Isotherm-Cycles")
        
}


# Read LabVIEW control/indicator "Target Pressure" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ai, "$(P)Target_Pressure_RBV")
{
	field(DESC, "LabVIEW 'Target Pressure'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Target_Pressure")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Target Pressure" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ao, "$(P)Target_Pressure")
{
	field(DESC, "LabVIEW 'Target Pressure'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target_Pressure")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Target  Area" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ai, "$(P)Target__Area_RBV")
{
	field(DESC, "LabVIEW 'Target  Area'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Target__Area")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Target  Area" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ao, "$(P)Target__Area")
{
	field(DESC, "LabVIEW 'Target  Area'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Target__Area")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "area" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ai, "$(P)area_RBV")
{
	field(DESC, "LabVIEW 'area'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)area")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "area" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ao, "$(P)area")
{
	field(DESC, "LabVIEW 'area'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)area")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "pressure" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ai, "$(P)pressure_RBV")
{
	field(DESC, "LabVIEW 'pressure'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)pressure")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "pressure" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(ao, "$(P)pressure")
{
	field(DESC, "LabVIEW 'pressure'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)pressure")
    field(PREC, "3")
}


## Creating both stringout/stringin and waveform records for "Return Message" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
## EPICS strings are restricted to 40 characters in length, if your strings are
## longer than this choose the character waveform records and adjust NELM if necessary

# Read LabVIEW control/indicator "Return Message" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(stringin, "$(P)Return_Message_RBV")
{
	field(DESC, "LabVIEW 'Return Message'")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(lvfp,0,0)Return_Message")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Return Message" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(stringout, "$(P)Return_Message")
{
	field(DESC, "LabVIEW 'Return Message'")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(lvfp,0,0)Return_Message")
}

# Read LabVIEW control/indicator "Return Message" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(waveform, "$(P)Return_MessageWF_RBV")
{
	field(DESC, "LabVIEW 'Return Message'")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Return_Message")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Return Message" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(waveform, "$(P)Return_MessageWF")
{
	field(DESC, "LabVIEW 'Return Message'")
    field(DTYP, "asynOctetWrite")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)Return_Message")
}


# Read LabVIEW control/indicator "Target Reached" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Target_Reached_RBV")
{
	field(DESC, "LabVIEW 'Target Reached'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Target_Reached")
    field(SCAN, ".1 second")
    field(ZNAM, "")
    field(ONAM, "")
}

# Write to LabVIEW control "Target Reached" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Target_Reached")
{
	field(DESC, "LabVIEW 'Target Reached'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Target_Reached")
    field(ZNAM, "")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Close Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Close_Barrier_RBV")
{
	field(DESC, "LabVIEW 'Close Barrier'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Close_Barrier")
    field(SCAN, ".1 second")
    field(ZNAM, "Close Barrier ")
    field(ONAM, "")
}

# Write to LabVIEW control "Close Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Close_Barrier")
{
	field(DESC, "LabVIEW 'Close Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Close_Barrier")
    field(ZNAM, "Close Barrier ")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Open Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Open_Barrier_RBV")
{
	field(DESC, "LabVIEW 'Open Barrier'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Open_Barrier")
    field(SCAN, ".1 second")
    field(ZNAM, "Open Barrier")
    field(ONAM, "")
}

# Write to LabVIEW control "Open Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Open_Barrier")
{
	field(DESC, "LabVIEW 'Open Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Open_Barrier")
    field(ZNAM, "Open Barrier")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Stop Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Stop_Barrier_RBV")
{
	field(DESC, "LabVIEW 'Stop Barrier'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Stop_Barrier")
    field(SCAN, ".1 second")
    field(ZNAM, "Stop Barrier")
    field(ONAM, "")
}

# Write to LabVIEW control "Stop Barrier" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Stop_Barrier")
{
	field(DESC, "LabVIEW 'Stop Barrier'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_Barrier")
    field(ZNAM, "Stop Barrier")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Delete all runs" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bi, "$(P)Delete_all_runs_RBV")
{
	field(DESC, "LabVIEW 'Delete all runs'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Delete_all_runs")
    field(SCAN, ".1 second")
    field(ZNAM, "Delete all runs")
    field(ONAM, "")
}

# Write to LabVIEW control "Delete all runs" on "C:/Instrument/Apps/EPICS/ioc/master/NIMATRO/NIMATROApp/protocol/Test.vi"
record(bo, "$(P)Delete_all_runs")
{
	field(DESC, "LabVIEW 'Delete all runs'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Delete_all_runs")
    field(ZNAM, "Delete all runs")
    field(ONAM, "")
}

