record(mbbi, "$(P)WAVE:STATUS")
{
	field(DESC, "Status of the waveform generator")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto getWaveformStatus $(PORT)")
    field(ZRST, "Stopped")
    field(ONST, "Running")
    field(TWST, "Holding")
    field(THST, "Finishing")
    field(FRST, "Aborted")
    field(FVST, "Disabled")
    field(SXST, "Slaved")
    field(SVST, "Slave Locked")
    field(EIST, "Sweeping")
    field(NIST, "Dwelling")
    field(FLNK, "$(P)WAVE:_STAT_FAN")
    field(EGU, "")
    info(archive, "VAL")
}

record(fanout,"$(P)WAVE:_STAT_FAN") {
    field(LNK1, "$(P)WAVE:_RUN_CALC PP")
    field(LNK2, "$(P)WAVE:_CONT_CALC PP")
    field(SELM, "All")
}

record(calcout,"$(P)WAVE:_RUN_CALC") {
    field(INPA, "$(P)WAVE:STATUS")
    field(CALC, "A==1 || A==3")
    field(OOPT, "Every Time")
	field(OUT, "$(P)WAVE:RUNNING PP")
}

record(calcout,"$(P)WAVE:_CONT_CALC") {
    field(INPA, "$(P)WAVE:STATUS")
    field(CALC, "A==1")
    field(OOPT, "Every Time")
	field(OUT, "$(P)WAVE:CONTINUING PP")
}

record(bi, "$(P)WAVE:RUNNING")
{
	field(DESC, "Waveform generator is running/finishing?")
	field(ZNAM, "Not running")
    field(ONAM, "Running")
}

record(bi, "$(P)WAVE:CONTINUING")
{
	field(DESC, "Waveform generator is running?")
	field(ZNAM, "Not continuing")
    field(ONAM, "Continuing")
}

record(bo, "$(P)WAVE:START:RAW")
{
	field(DESC, "Start the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformStart $(PORT)")
}

record(seq, "$(P)WAVE:START:_SEQ")
{
	field(DESC, "Start the waveform generator")
    
    # Send the start command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:START:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:START:_SEQ", "$(P)WAVE:START:SP")
alias("$(P)WAVE:START:_SEQ", "$(P)WAVE:START")

record(bo, "$(P)WAVE:STOP:RAW")
{
	field(DESC, "Stop the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformStop $(PORT)")
}

record(seq, "$(P)WAVE:STOP:_SEQ")
{
	field(DESC, "Stop the waveform generator")
    
    # Send the stop command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:STOP:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:STOP:_SEQ", "$(P)WAVE:STOP:SP")
alias("$(P)WAVE:STOP:_SEQ", "$(P)WAVE:STOP")

record(bo, "$(P)WAVE:ABORT:RAW")
{
	field(DESC, "Abort the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformAbort $(PORT)")
}

record(seq, "$(P)WAVE:ABORT:_SEQ")
{
	field(DESC, "Abort the waveform generator")
    
    # Send the abort command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:ABORT:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:ABORT:_SEQ", "$(P)WAVE:ABORT:SP")
alias("$(P)WAVE:ABORT:_SEQ", "$(P)WAVE:ABORT")

record(ao, "$(P)WAVE:AMP:SP:RAW")
{
	field(DESC, "Set the amplitude of the waveform generator")
}

record(ao, "$(P)WAVE:FREQ:SP")
{
	field(DESC, "Set the frequency of the waveform generator")
}

record(mbbo, "$(P)WAVE:TYPE:SP")
{
	field(DESC, "Set the wave type of the waveform generator")
}

record(bo, "$(P)WAVE:QUART:OFF")
{
	field(DESC, "Switch off quarter cycle control")
}

record(ao, "$(P)WAVE:QUART:SP")
{
	field(DESC, "Set quarter cycle event detector")
}

record(ai, "$(P)WAVE:QUART")
{
	field(DESC, "Elapsed quarter cycle counter")
}

record(bo, "$(P)WAVE:HOLD")
{
	field(DESC, "Hold quarter cycle event detection")
}

record(bo, "$(P)WAVE:LOG:MAINTAIN")
{
	field(DESC, "No action on quarter cycle event detection")
}

record(bo, "$(P)WAVE:QUART:ARM")
{
	field(DESC, "Arm quarter cycle event detection")
}

record(ao, "$(P)WAVE:AMP:SP")
{
	field(DESC, "Set the waveform generator amplitude")
}

record(calcout, "$(P)WAVE:AMP:POS")
{
	field(DESC, "Position-based wave amplitude")
}

record(calcout, "$(P)WAVE:AMP:STRESS")
{
	field(DESC, "Stress-based wave amplitude")
}

record(calcout, "$(P)WAVE:AMP:STRAIN")
{
	field(DESC, "Strain-based wave amplitude")
}