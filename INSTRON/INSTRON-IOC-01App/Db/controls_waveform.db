#
# STATE CONTROLS
#

record(mbbi, "$(P)WAVE:STATUS")
{
	field(DESC, "Status of the wave generator")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto getWaveformStatus $(PORT)")
    field(ZRST, "Stopped")
    field(ONST, "Running")
    field(TWST, "Holding")
    field(THST, "Finishing")
    field(FRST, "Aborted")
    field(FVST, "Disabled")
    field(SXST, "Slaved")
    field(SVST, "Slave Locked")
    field(EIST, "Sweeping")
    field(NIST, "Dwelling")
    field(FLNK, "$(P)WAVE:_STAT_FAN")
}

record(fanout,"$(P)WAVE:_STAT_FAN") 
{
    field(LNK1, "$(P)WAVE:_RUN_CALC PP")
    field(LNK2, "$(P)WAVE:_CONT_CALC PP")
    field(SELM, "All")
}

record(calcout,"$(P)WAVE:_RUN_CALC") 
{
    field(INPA, "$(P)WAVE:STATUS")
    field(CALC, "A==1 || A==3")
    field(OOPT, "Every Time")
	field(OUT, "$(P)WAVE:RUNNING PP")
}

record(calcout,"$(P)WAVE:_CONT_CALC") 
{
    field(INPA, "$(P)WAVE:STATUS")
    field(CALC, "A==1")
    field(OOPT, "Every Time")
	field(OUT, "$(P)WAVE:CONTINUING PP")
}

record(bi, "$(P)WAVE:RUNNING")
{
	field(DESC, "Waveform generator is running/finishing?")
	field(ZNAM, "Not running")
    field(ONAM, "Running")
}

record(bi, "$(P)WAVE:CONTINUING")
{
	field(DESC, "Waveform generator is running?")
	field(ZNAM, "Not continuing")
    field(ONAM, "Continuing")
}

record(bo, "$(P)WAVE:START:RAW")
{
	field(DESC, "Start the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformStart $(PORT)")
}

record(seq, "$(P)WAVE:START:_SEQ")
{
    ###
	###	NEEDS ADDITIONAL SEQUENCE ITEMS!!!
	###
	
	field(DESC, "Start the waveform generator")
    
    # Send the start command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:START:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:START:_SEQ", "$(P)WAVE:START:SP")
alias("$(P)WAVE:START:_SEQ", "$(P)WAVE:START")

record(bo, "$(P)WAVE:STOP:RAW")
{
	field(DESC, "Stop the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformStop $(PORT)")
}

record(seq, "$(P)WAVE:STOP:_SEQ")
{
    ###
	###	NEEDS ADDITIONAL SEQUENCE ITEMS!!!
	###
	field(DESC, "Stop the waveform generator")
    
    # Send the stop command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:STOP:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:STOP:_SEQ", "$(P)WAVE:STOP:SP")
alias("$(P)WAVE:STOP:_SEQ", "$(P)WAVE:STOP")

record(bo, "$(P)WAVE:ABORT:RAW")
{
	field(DESC, "Abort the waveform generator")
	field(DTYP, "stream")
	field(OUT,  "@devInstron.proto setWaveformAbort $(PORT)")
}

record(seq, "$(P)WAVE:ABORT:_SEQ")
{
	field(DESC, "Abort the waveform generator")
    
    # Send the abort command
    field(DO1, "1")
    field(LNK1, "$(P)WAVE:ABORT:RAW.PROC")
    
    field(SELM, "All") 
}

alias("$(P)WAVE:ABORT:_SEQ", "$(P)WAVE:ABORT:SP")
alias("$(P)WAVE:ABORT:_SEQ", "$(P)WAVE:ABORT")

record(bo, "$(P)WAVE:HOLD")
{
	field(DESC, "Hold quarter cycle event detection")
	field(DESC, "Set quarter cycle event detector")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformQuart $(PORT)")
}

record(bo, "$(P)WAVE:LOG:MAINTAIN")
{
	field(DESC, "No action on quart event detection")
}

#
# GENERATOR SETTINGS
#

record(mbbo, "$(P)WAVE:TYPE:SP")
{
	field(DESC, "Set the wave type of the wave generator")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformType($(P)CHANNEL:SP) $(PORT)")
    
    field(ZRST, "Sine")    
    field(ONST, "Triangle")       
    field(TWST, "Square")
    field(THST, "Haversine")
	field(FRST, "Havetriangle")
	field(FVST, "Haversquare")
	field(SXST, "Sensor")
	field(SVST, "Aux")
	field(EIST, "Sawtooth")
}

record(mbbi, "$(P)WAVE:TYPE")
{
	field(DESC, "Set the wave type of the wave generator")
	field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@devInstron.proto getWaveformType($(P)CHANNEL) $(PORT)")
    
    field(ZRST, "Sine")    
    field(ONST, "Triangle")       
    field(TWST, "Square")
    field(THST, "Haversine")
	field(FRST, "Havetriangle")
	field(FVST, "Haversquare")
	field(SXST, "Sensor")
	field(SVST, "Aux")
	field(EIST, "Sawtooth")
    
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(EIVL, "8")
}

record(ao, "$(P)WAVE:AMP:SP")
{
	field(DESC, "Set the waveform generator amplitude")
	field(PREC, "3")
	field(EGU, "m")
	field(FLNK, "$(P)WAVE:AMP:SP:_FAN")
}

record(fanout, "$(P)WAVE:AMP:SP:_FAN")
{
	field(LNK1, "$(P)WAVE:AMP:SP:_POS")
	field(LNK2, "$(P)WAVE:AMP:SP:_STRESS")
	field(LNK3, "$(P)WAVE:AMP:SP:_STRAIN")
	field(LNK4, "$(P)WAVE:AMP:SP:_FWD")
}

record(calc, "$(P)WAVE:AMP:SP:_POS")
{
	field(DESC, "Position-based wave amplitude")
    field(INPA, "$(P)WAVE:AMP:SP")
	field(INPB, "$(P)POS:SCALE")
	field(INPC, "1000")
    field(CALC, "A/(B*C)")
}

record(calc, "$(P)WAVE:AMP:SP:_STRESS")
{
	field(DESC, "Stress-based wave amplitude")
    field(INPA, "$(P)WAVE:AMP:SP")
	field(INPB, "$(P)STRESS:SCALE")
	field(INPC, "$(P)STRESS:AREA")
    field(CALC, "(A*C)/B")
}

record(calc, "$(P)WAVE:AMP:SP:_STRAIN")
{
	field(DESC, "Strain-based wave amplitude")
    field(INPA, "$(P)WAVE:AMP:SP")
	field(INPB, "$(P)STRAIN:SCALE")
	field(INPC, "$(P)STRAIN:LENGTH")
    field(CALC, "A/(B*C*100000)")
}

record(calcout, "$(P)WAVE:AMP:SP:_FWD")
{
    field(OOPT, "Every Time")
	field(INPA, "$(P)WAVE:AMP:SP:_POS")
	field(INPB, "$(P)WAVE:AMP:SP:_STRESS")
	field(INPC, "$(P)WAVE:AMP:SP:_STRAIN")
	field(INPD, "$(P)CHANNEL:SP.RVAL")
	field(CALC, "D=1 ? A : (D=2 ? B : (D=3 ? C : -1.0))")
	field(OUT, "$(P)WAVE:AMP:SP:_RAW PP")
}

record(ao, "$(P)WAVE:AMP:SP:_RAW")
{
	field(DESC, "Set the amp of the wave generator")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformAmplitude($(P)CHANNEL:SP) $(PORT)")
}

record(ai, "$(P)WAVE:AMP")
{
	field(DESC, "Get the amp of the wave generator")
	field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@devInstron.proto getWaveformAmplitude($(P)CHANNEL) $(PORT)")
	field(PREC, "3")
	field(EGU, "m")
}

record(ao, "$(P)WAVE:FREQ:SP")
{
	field(DESC, "Set the wave generator freq")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformFrequency($(P)CHANNEL:SP) $(PORT)")
	field(PREC, "3")
	field(EGU, "Hz")
}

record(ai, "$(P)WAVE:FREQ")
{
	field(DESC, "Get the freq of the wave generator")
	field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@devInstron.proto getWaveformFrequency($(P)CHANNEL) $(PORT)")
	field(PREC, "3")
	field(EGU, "Hz")
}

##
## QUARTER CYCLE COUNTER EVENT DETECTOR CONTROLS
##

record(mbbi, "$(P)QUART:STATUS")
{
	field(DESC, "Switch off quarter cycle control")
	field(DTYP, "stream")
	field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@devInstron.proto getWaveformQuartStatus $(PORT)")
    
    field(ZRST, "Off")    
    field(ONST, "Prepared")       
    field(TWST, "Armed")
    field(THST, "INVALID")
	field(FRST, "Tripped")
	field(FVST, "INVALID")
	field(SXST, "Prepared (GDI)")
	field(SVST, "Armed (GDI)")
	field(EIST, "INVALID")
	field(NIST, "Tripped (GDI)")
    
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(EIVL, "8")
	field(NIVL, "9")
}

record(bo, "$(P)QUART:OFF:SP")
{
	field(DESC, "Switch off quarter cycle control")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformQuartOff $(PORT)")
}

alias("$(P)QUART:OFF:SP", "$(P)QUART:OFF")

record(ao, "$(P)QUART:CYCLE:SP")
{
	field(DESC, "Set the required number of cycles")
	field(PREC, "0")
	field(EGU, "")
	field(FLNK, "$(P)QUART:SP:_CALC")
}

record(calcout, "$(P)QUART:SP:_CALC")
{
	field(DESC, "Turns cycles into quarters")
    field(OOPT, "Every Time")
	field(INPA, "$(P)QUART:CYCLE:SP")
	field(CALC, "4*A")
	field(OUT, "$(P)QUART:SP PP")
}

record(ao, "$(P)QUART:SP")
{
	field(DESC, "Set quarter cycle event detector")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformQuart $(PORT)")
	field(PREC, "0")
	field(EGU, "")
}

record(ai, "$(P)QUART")
{
	field(DESC, "Elapsed quarter cycle counter")
	field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@devInstron.proto getWaveformQuart $(PORT)")
	field(PREC, "0")
	field(EGU, "")
	field(FLNK, "$(P)QUART:_STOP")
}

record(calcout, "$(P)QUART:_STOP")
{
    field(OOPT, "When Non-zero")
	field(INPA, "$(P)QUART")
	field(INPB, "$(P)QUART:SP")
	field(CALC, "A%4=0 && A>=B")
	field(OUT, "$(P)WAVE:STOP PP")
}

record(bo, "$(P)QUART:ARM:SP")
{
	field(DESC, "Arm quarter cycle event detection")
	field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setWaveformQuartArm $(PORT)")
}

alias("$(P)QUART:ARM:SP", "$(P)QUART:ARM")