record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}
    
record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(mbbi, "$(P)CHANNEL")
{
    field(DESC, "Current control channel")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getCurrentControlChannel $(PORT)")
    field(SCAN, "Passive")
    
    field(ZRVL, 1)
    field(ZRST, "Position")    
    field(ONVL, 2)
    field(ONST, "Stress")       
    field(TWVL, 3)
    field(TWST, "Strain")
    
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)CHANNEL:SP")
{
    field(DESC, "Control channel setpoint")
    field(DTYP, "stream")
    
    field(ZRVL, 1)
    field(ZRST, "Position")    
    field(ONVL, 2)
    field(ONST, "Stress")       
    field(TWVL, 3)
    field(TWST, "Strain")
    
    field(OUT,  "@devInstron.proto setCurrentControlChannel $(PORT)")
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)WATCHDOG:STATUS")
{
    field(DESC, "Watchdog status")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getWatchdogStatus $(PORT)")
    field(SCAN, "Passive")
    field(SIML, "$(P)SIM")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SDIS, "$(P)DISABLE")
}
    
record(bo, "$(P)WATCHDOG:STATUS:SP")
{
    field(DESC, "Disable the watchdog")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto disableWatchdog $(PORT)")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")  
}

record(bi, "$(P)CONTROLMODE")
{
    field(DESC, "Control mode")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getControlMode $(PORT)")
    field(SCAN, "Passive")
    field(SIML, "$(P)SIM")
    field(ZNAM, "FRONTPANEL")
    field(ONAM, "COMPUTER")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INIT")
{
    field(DESC, "Initialize comms")
    field(DTYP, "stream")
    field(VAL, "0")
    field(OUT,  "@devInstron.proto initRoutine $(PORT)")
    
    field(PINI, "YES")
}

record(mbbiDirect, "$(P)STATUS:FRAME")
{
    field(DESC, "Status bits")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto getStatus $(PORT)")
    field(SCAN, "Passive")
    field(FLNK, "$(P)STATUS:_FANOUT")
}

record(fanout, "$(P)STATUS:_FANOUT")
{
    field(LNK1, "$(P)STATUS:_CALC")
    field(LNK2, "$(P)ACTUATOR:STATUS")
    field(SELM, "All")
}

record(mbbi, "$(P)STATUS:DISP")
{
    field(DESC, "Display string for rig status")
    field(INP, "$(P)STATUS:_CALC")

    field(ZRST, "System OK")
    field(ONST, "Travel limit exceeded")
    field(TWST, "Power amplifier too hot")
    field(THST, "Emergency stop pushed")
    field(FRST, "Invalid status from rig")
    field(FVST, "Invalid status from rig")
    field(SXST, "Emergency stop pushed")
    field(SVST, "Oil too hot")
    field(EIST, "Oil level too low")
    field(NIST, "Motor too hot")
    field(TEST, "Oil pressure too high")
    field(ELST, "Oil pressure too low")     
    field(TVST, "Manifold/pump blocked")
    field(TTST, "Oil level going too low")
    field(FTST, "Manifold low pressure")
    field(FFST, "System OK")
}

record(calc, "$(P)STATUS:_CALC")
{
    field(DESC, "Calculation for finding display string")
    
    field(INPA, "$(P)STATUS:FRAME.B9 CP")
    field(INPB, "$(P)STATUS:FRAME.BA CP")
    field(INPC, "$(P)STATUS:FRAME.BB CP")
    field(INPD, "$(P)STATUS:FRAME.BC CP")
    
    field(CALC, "A+(2*B)+(4*C)+(8*D)") 
    field(FLNK, "$(P)STATUS:DISP")
}

record(calc, "$(P)ACTUATOR:STATUS")
{
    field(INPA, "$(P)STATUS:FRAME.B3 CP")
    field(CALC, "A=0?1:0")
}

record(stringout, "$(P)ARBITRARY:SP")
{
	field(DESC, "General write command")
	field(FLNK, "$(P)ARBITRARY")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)ARBITRARY")
{
    field(DESC, "General input command response")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto arbRW($(P)ARBITRARY:SP) $(PORT)")
    field(SCAN, "Passive")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bo, "$(P)PANIC:SP")
{
	field(DESC, "Panic stop setpoint")
    field(DTYP, "Soft Channel")
    field(ZNAM, "STOPPED")
    field(ONAM, "PANIC STOP")
    # Initial value.
    field(VAL, "1")
    field(FLNK, "$(P)PANIC:RAW")
}

record(calcout, "$(P)PANIC:RAW")
{
    field(DTYP, "stream")
    field(INPA, "$(P)PANIC:SP")
    field(CALC, "A=0")
    field(OOPT, "When Non-zero")
	field(OUT, "@devInstron.proto panicStop $(PORT)")
}

record(mbbo, "$(P)MOVE:SP")
{
    field(DESC, "Rig movement type")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setMovementType $(PORT)")

    field(ZRST, "STOP")
    field(ONST, "START")
    field(TWST, "HOLD")
    field(THST, "CONTINUE")
}

record(mbbi, "$(P)MOVE")
{
	field(DESC, "Current movement type")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getMovementType $(PORT)")
    field(SCAN, "Passive")
    
    field(ZRST, "STOPPED")
    field(ONST, "RAMP_RUNNING")
    field(TWST, "RAMP_HOLDING")
    field(FVST, "RAND_HOLDING")
    field(SXST, "RAND_RUNNING")
    
    field(FLNK, "$(P)MOVE:_FAN")
}

record(fanout, "$(P)MOVE:_FAN")
{
    field(LNK1, "$(P)MOVE:_STOPIFHOLDING")
    field(LNK2, "$(P)GOING:_CALC")
    field(SELM, "All") 
}

record(calcout, "$(P)MOVE:_STOPIFHOLDING")
{
    field(INPA, "$(P)MOVE")
    field(CALC, "A = 2 || A = 5")
    field(OOPT, "When Non-zero")
	field(OUT, "$(P)MOVE:_END PP")
}

record(seq, "$(P)MOVE:GO:SP")
{
    field(DESC, "Start movement")   
    field(DO1, "1")
    field(LNK1, "$(P)MOVE:SP PP")
    field(DO2, "1")
    field(LNK2, "$(P)STOP:SP PP")   
    field(SELM, "All") 
}

record(seq, "$(P)MOVE:_END")
{
	field(DESC, "End movement")   
    field(DO1, "0")
    field(LNK1, "$(P)MOVE:SP PP")    
    field(SELM, "All")
}

record(calcout, "$(P)GOING:_CALC")
{
    field(INPA, "$(P)MOVE")
    field(CALC, "A=1 || A=6")
    field(OOPT, "Every Time")
	field(OUT, "$(P)GOING PP")
}

record(bi, "$(P)GOING")
{
    field(VAL, "0")
    field(ZNAM, "NO")
    field(ONAM, "YES")
}

record(seq, "$(P)READALL")
{
	field(DESC, "Read all data from rig")
    
    # Disable watchdog
    field(DO1, "0")
    field(LNK1, "$(P)WATCHDOG:STATUS:SP PP")
    
    field(LNK2, "$(P)PANIC PP")
    field(LNK3, "$(P)MOVE PP")
    field(LNK4, "$(P)STATUS:FRAME PP")
    field(LNK5, "$(P)CHANNEL PP")
    
    field(SCAN, "1 second")
    field(SELM, "All")
}

record(mbbo, "$(P)READALL:SCAN:SP")
{
    field(OUT, "$(P)READALL.SCAN PP")
    field(DTYP, "Raw Soft Channel")
    
    field(ZRVL, "3")
    field(ONVL, "4")
    field(TWVL, "5")
    field(THVL, "6")
    field(FRVL, "7")
    field(FVVL, "8")
    field(SXVL, "9")
    
    field(ZRST, "10 second")
    field(ONST, "5 second")
    field(TWST, "2 second")
    field(THST, "1 second")
    field(FRST, ".5 second")
    field(FVST, ".2 second")
    field(SXST, ".1 second")
    
    field(VAL, "3")
    field(PINI, "YES")
    
}

record(bo, "$(P)STOP:SP")
{
	field(DESC, "Stop rig")
    field(ZNAM, "STOPPED")
    field(ONAM, "STOP RIG")
    # Initial value.
    field(VAL, "1")
    field(FLNK, "$(P)STOP:_FANOUT")
}

record(fanout, "$(P)STOP:_FANOUT")
{
    field(LNK1, "$(P)STOP:_CALC_WAVEFORM")
    field(LNK2, "$(P)STOP:_CALC_RAMP")
    field(SELM, "All")
}

record(calcout, "$(P)STOP:_CALC_RAMP")
{
    # TODO: Replace with $(P)WAVE:RUN once that PV has been implemented.
    field(INPA, "0")
    field(INPB, "$(P)STOP:SP")
    field(CALC, "A = 0 && B = 0")
    field(OOPT, "When Non-zero")
	field(OUT, "$(P)STOP:_STOP_RAMP PP")
}

record(calcout, "$(P)STOP:_CALC_WAVEFORM")
{
    # TODO: Replace with $(P)WAVE:RUN once that PV has been implemented.
    field(INPA, "0")
    field(INPB, "$(P)STOP:SP")
    field(CALC, "A = 1 && B = 0")
    field(OOPT, "When Non-zero")
	field(OUT, "$(P)STOP:_STOP_WAVEFORM PP")
}

record(seq, "$(P)STOP:_STOP_RAMP")
{
	field(DESC, "Stop ramp")   
    field(DO1, "0")
    field(LNK1, "$(P)MOVE:SP PP")    
    field(SELM, "All")
}

record(seq, "$(P)STOP:_STOP_WAVEFORM")
{
	field(DESC, "TODO: Insert actual PV")   
    field(DO1, "0")
    field(LNK1, "$(P)WAVE:STOP:RAW PP")    
    field(SELM, "All")
}
