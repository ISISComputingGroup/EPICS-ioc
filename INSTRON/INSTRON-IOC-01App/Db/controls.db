record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}
    
record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(mbbi, "$(P)CHANNEL")
{
    field(DESC, "Current control channel")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getCurrentControlChannel $(PORT)")
    field(SCAN, "Passive")
    
    field(ZRVL, 1)
    field(ZRST, "Position")    
    field(ONVL, 2)
    field(ONST, "Stress")       
    field(TWVL, 3)
    field(TWST, "Strain")
    
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)CHANNEL:SP")
{
    field(DESC, "Control channel setpoint")
    field(DTYP, "stream")
    
    field(ZRVL, 1)
    field(ZRST, "Position")    
    field(ONVL, 2)
    field(ONST, "Stress")       
    field(TWVL, 3)
    field(TWST, "Strain")
    
    field(OUT,  "@devInstron.proto setCurrentControlChannel $(PORT)")
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)WATCHDOG:STATUS")
{
    field(DESC, "Watchdog status")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getWatchdogStatus $(PORT)")
    field(SCAN, "Passive")
    field(SIML, "$(P)SIM")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SDIS, "$(P)DISABLE")
}
    
record(bo, "$(P)WATCHDOG:STATUS:SP")
{
    field(DESC, "Disable the watchdog")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto disableWatchdog $(PORT)")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")  
}

record(bi, "$(P)CONTROLMODE")
{
    field(DESC, "Control mode")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getControlMode $(PORT)")
    field(SCAN, "Passive")
    field(SIML, "$(P)SIM")
    field(ZNAM, "FRONTPANEL")
    field(ONAM, "COMPUTER")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INIT")
{
    field(DESC, "Initialize comms")
    field(DTYP, "stream")
    field(VAL, "0")
    field(OUT,  "@devInstron.proto initRoutine $(PORT)")
    
    field(PINI, "YES")
}

record(mbbiDirect, "$(P)STATUS:FRAME")
{
    field(DESC, "Status bits")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto getStatus $(PORT)")
    field(SCAN, "Passive")
    #field(ZRVL, "0")
    #field(ONVL, "1")
    field(FLNK, "$(P)STATUS:_FANOUT")
}

record(fanout, "$(P)STATUS:_FANOUT")
{
    field(LNK1, "$(P)STATUS:_CALC")
    field(LNK2, "$(P)ACTUATOR:STATUS")
    field(SELM, "All")
}

record(mbbi, "$(P)STATUS:DISP")
{
    field(DESC, "Display string for rig status")
    field(INP, "$(P)STATUS:_CALC")

    field(SXVL, "6")
    field(SVVL, "7")
    field(EIVL, "8")
    field(NIVL, "9")
    field(TEVL, "10")
    field(ELVL, "11")
    field(TVVL, "12")
    field(TTVL, "13")
    field(FTVL, "14")
    field(FFVL, "15")

    field(SXST, "Emergency stop pushed")
    field(SVST, "Oil too hot")
    field(EIST, "Oil level too low")
    field(NIST, "Motor too hot")
    field(TEST, "Oil pressure too high")
    field(ELST, "Oil pressure too low")     
    field(TVST, "Manifold/pump blocked")
    field(TTST, "Oil level going too low")
    field(FTST, "Manifold low pressure")
    field(FFST, "System OK")
}

record(calc, "$(P)STATUS:_CALC")
{
    field(DESC, "Calculation for finding display string")
    
    field(INPA, "$(P)STATUS:FRAME.B9 CP")
    field(INPB, "$(P)STATUS:FRAME.BA CP")
    field(INPC, "$(P)STATUS:FRAME.BB CP")
    field(INPD, "$(P)STATUS:FRAME.BC CP")
    
    field(CALC, "A+(2*B)+(4*C)+(8*D)") 
    field(FLNK, "$(P)STATUS:DISP")
}

record(calc, "$(P)ACTUATOR:STATUS")
{
    field(INPA, "$(P)STATUS:FRAME.B3 CP")
    field(CALC, "A=0?1:0")
}

record(stringout, "$(P)ARBITRARY:SP")
{
	field(DESC, "General write command")
	field(FLNK, "$(P)ARBITRARY")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)ARBITRARY")
{
    field(DESC, "General input command response")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto arbRW($(P)ARBITRARY:SP) $(PORT)")
    field(SCAN, "Passive")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)PANIC")
{
	field(DESC, "Panic stop")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getActuatorStatus $(PORT)")
    field(SCAN, "Passive")
    field(ZNAM, "STOPPED")
    field(ONAM, "PANIC STOP")
}

record(bo, "$(P)PANIC:SP")
{
	field(DESC, "Panic stop")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto panicStop $(PORT)")
    field(ZNAM, "STOPPED")
    field(ONAM, "PANIC STOP")
}

record(mbbo, "$(P)MOVE:SP")
{
    field(DESC, "Rig movement type")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setMovementType $(PORT)")

    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "STOP")
    field(ONST, "START")
    field(TWST, "HOLD")
    field(THST, "CONTINUE")
}

record(mbbi, "$(P)MOVE")
{
	field(DESC, "Current movement type")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getMovementType $(PORT)")
    field(SCAN, "Passive")
    
    field(ZRVL, "0")
    field(TWVL, "2")
    field(FVVL, "5")
    field(ZRST, "STOPED")
    field(TWST, "HOLD_RAMP")
    field(FVST, "HOLD_RAND")
    
    field(FLNK, "$(P)MOVE:_STOPIFHOLDING")
}

record(calcout, "$(P)MOVE:_STOPIFHOLDING")
{
    field(INPA, "$(P)MOVE")
    field(CALC, "A = 2 || A = 5")
    field(OOPT, "When Non-zero")
	field(OUT, "$(P)MOVE:_END PP")
}

record(seq, "$(P)MOVE:_END")
{
	field(DESC, "End movement")   
    field(DO1, "0")
    field(LNK1, "$(P)MOVE:SP PP")    
    field(SELM, "All")
}

record(seq, "$(P)READALL")
{
	field(DESC, "Read all data from rig")
    
    # Disable watchdog
    field(DO1, "0")
    field(LNK1, "$(P)WATCHDOG:STATUS:SP PP")
    
    field(LNK2, "$(P)PANIC PP")
    field(LNK3, "$(P)MOVE PP")
    field(LNK4, "$(P)STATUS:FRAME PP")
    field(LNK5, "$(P)CHANNEL PP")
    
    field(SCAN, "10 second")
    field(SELM, "All")
}
