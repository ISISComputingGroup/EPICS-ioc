record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}
    
record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(longin, "$(P)CHANNEL:RAW")
{
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getCurrentControlChannel $(PORT)")
    field(SCAN, "Passive")
}

record(mbbi, "$(P)CHANNEL")
{
    field(INP,  "$(P)CHANNEL:RAW CP MS")
	field(DTYP, "Raw Soft Channel")
	
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(ONST, "Position")
	field(TWST, "Stress")
	field(THST, "Strain")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CHANNEL")
    field(SDIS, "$(P)DISABLE")
}

record(mbbi, "$(P)CHANNEL:GUI")
{
    field(DESC, "Current control channel")
    field(INP, "$(P)CHANNEL CP MS")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(ONST, "Position")
	field(TWST, "Stress")
	field(THST, "Strain")
	
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CHANNEL:GUI")
    field(SDIS, "$(P)DISABLE")
	    
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# This is used by channel :TYPE:_CHANNEL_LABEL
# It is just a clean list of the original unmodified channel names
# otherwise it recursively appends " - disabled" which we don't want.
record(mbbi, "$(P)_CHANNELSLIST_CLEAN")
{
    field(ZRVL, 1)
    field(ZRST, "Position")    
    field(ONVL, 2)
    field(ONST, "Stress")       
    field(TWVL, 3)
    field(TWST, "Strain")
}

record(mbbo, "$(P)CHANNEL:SP")
{
    field(DESC, "Control channel setpoint")
    field(DTYP, "stream")
    
	# Have to start from ZRVL so that dropdown displays correctly in CSS
    field(ZRVL, 1)
    field(ZRST, "Position")
    field(ONVL, 2)
    field(ONST, "Stress")
    field(TWVL, 3)
    field(TWST, "Strain")
    
    field(OUT,  "@devInstron.proto setCurrentControlChannel $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CHANNEL:SP")
    field(SDIS, "$(P)DISABLE")
	
	field(FLNK, "$(P)WAVE:AMP:_CALC_UNITS")
}

record(bi, "$(P)WATCHDOG:STAT")
{
    field(DESC, "Watchdog STAT")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getWatchdogStatus $(PORT)")
    field(SCAN, "Passive")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:WATCHDOG:STAT")
    field(SDIS, "$(P)DISABLE")
}
    
record(bo, "$(P)WATCHDOG:STAT:SP")
{
    field(DESC, "Disable the watchdog")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto disableWatchdog $(PORT)")
    field(ZNAM, "DISABLED")
    field(ONAM, "ENABLED")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:WATCHDOG:STAT:SP")
    field(SDIS, "$(P)DISABLE")  
}

record(bi, "$(P)CONTROLMODE")
{
    field(DESC, "Control mode")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getControlMode $(PORT)")
    field(SCAN, "Passive")
    field(ZNAM, "FRONTPANEL")
    field(ONAM, "COMPUTER")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CONTROLMODE")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)INIT")
{
    field(DESC, "Initialize comms")
    field(DTYP, "stream")
    field(VAL, "0")
    field(OUT,  "@devInstron.proto initRoutine $(PORT)")
    field(FLNK, "$(P)INITSEQ")
    
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:INIT")
    field(SDIS, "$(P)DISABLE")
}

record(seq, "$(P)INITSEQ")
{
    field(DESC, "Initialize comms")   
    field(LNK1, "$(P)READ_VAR PP")
    
    field(DO2, "3")
    field(LNK2, "$(P)AXES:RAMP:WFTYP:SP PP")
    
    field(SELM, "All") 
}

record(mbbiDirect, "$(P)STAT:FRAME")
{
    field(DESC, "Status bits")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto getStatus $(PORT)")
    field(SCAN, "Passive")
    field(FLNK, "$(P)STAT:_FANOUT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:STAT:FRAME")
    field(SDIS, "$(P)DISABLE")
}

record(fanout, "$(P)STAT:_FANOUT")
{
    field(LNK1, "$(P)STAT:_CALC")
    field(LNK2, "$(P)ACTUATOR:STAT:_CALC")
    field(SELM, "All")
}

record(mbbi, "$(P)STAT:DISP")
{
    field(DESC, "Display string for rig status")
    field(INP, "$(P)STAT:_CALC MSS")

    field(ZRST, "System OK")
    field(ZRSV, "NO_ALARM")
    
    field(ONST, "Travel limit exceeded")
    field(ONSV, "MAJOR")
    
    field(TWST, "Power amplifier too hot")
    field(TWSV, "MAJOR")
    
    field(THST, "Emergency stop pushed")
    field(THSV, "MAJOR")
    
    field(FRST, "Invalid status from rig")
    field(FRSV, "MAJOR")
    
    field(FVST, "Invalid status from rig")
    field(FVSV, "MAJOR")
    
    field(SXST, "Emergency stop pushed")
    field(SXSV, "MAJOR")
    
    field(SVST, "Oil too hot")
    field(SVSV, "MAJOR")
    
    field(EIST, "Oil level too low")
    field(EISV, "MAJOR")
    
    field(NIST, "Motor too hot")
    field(NISV, "MAJOR")
    
    field(TEST, "Oil pressure too high")
    field(TESV, "MAJOR")
    
    field(ELST, "Oil pressure too low")     
    field(ELSV, "MAJOR")
    
    field(TVST, "Manifold/pump blocked")
    field(TVSV, "MAJOR")
    
    field(TTST, "Oil level going too low")
    field(TTSV, "MAJOR")
    
    field(FTST, "Manifold low pressure")
    field(FTSV, "MAJOR")
    
    field(FFST, "System OK")
    field(FFSV, "NO_ALARM")
    
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    info(alarm, "INSTRON")
}

record(calc, "$(P)STAT:_CALC")
{
    field(DESC, "Calculation for finding display string")
    
    field(INPA, "$(P)STAT:FRAME.B9 CP MSS")
    field(INPB, "$(P)STAT:FRAME.BA CP MSS")
    field(INPC, "$(P)STAT:FRAME.BB CP MSS")
    field(INPD, "$(P)STAT:FRAME.BC CP MSS")
    
    field(CALC, "A+(2*B)+(4*C)+(8*D)") 
    field(FLNK, "$(P)STAT:DISP")
}

record(calcout, "$(P)ACTUATOR:STAT:_CALC")
{
    field(INPA, "$(P)STAT:FRAME.B3 CP")
    field(CALC, "A=0?1:0")
    field(OOPT, "Every Time")
    field(OUT, "$(P)ACTUATOR:STAT PP")
}

record(bi, "$(P)ACTUATOR:STAT")
{
    field(DTYP, "Soft Channel")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(stringout, "$(P)ARBITRARY:SP")
{
    field(DESC, "General write command")
    field(FLNK, "$(P)ARBITRARY PP")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ARBITRARY")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)ARBITRARY")
{
    field(DESC, "General input command response")
    field(DTYP, "stream")
    field(INP, "@devInstron.proto arbRW($(P)ARBITRARY:SP) $(PORT)")
    field(SCAN, "Passive")
    field(SIOL, "$(P)SIM:ARBITRARY")
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(mbbo, "$(P)MOVE:SP")
{
    field(DESC, "Rig movement type")
    field(DTYP, "stream")
    field(OUT,  "@devInstron.proto setMovementType $(PORT)")

    field(ZRST, "STOP")
    field(ONST, "START")
    field(TWST, "HOLD")
    field(THST, "CONTINUE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MOVE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(mbbi, "$(P)MOVE")
{
    field(DESC, "Current movement type")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto getMovementType $(PORT)")
    field(SCAN, "Passive")
    
    field(ZRST, "STOPPED")
    field(ONST, "RAMP_RUNNING")
    field(TWST, "RAMP_HOLDING")
    field(FVST, "RAND_HOLDING")
    field(SXST, "RAND_RUNNING")
    
    field(FLNK, "$(P)MOVE:_FAN")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MOVE")
    field(SDIS, "$(P)DISABLE")
    
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(fanout, "$(P)MOVE:_FAN")
{
    field(LNK1, "$(P)MOVE:_STOPIFHOLDING")
    field(LNK2, "$(P)GOING:_CALC")
    field(SELM, "All") 
}

record(calcout, "$(P)MOVE:_STOPIFHOLDING")
{
    field(INPA, "$(P)MOVE")
    field(CALC, "A = 2 || A = 5")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)MOVE:_END PP")
}

record(seq, "$(P)MOVE:GO:SP")
{
    field(DESC, "Start movement")   
    field(DO1, "1")
    field(LNK1, "$(P)MOVE:SP PP")
    field(SELM, "All") 
}

record(seq, "$(P)MOVE:_END")
{
    field(DESC, "End movement")   
    field(DO1, "0")
    field(LNK1, "$(P)MOVE:SP PP")    
    field(SELM, "All")
}

record(calcout, "$(P)GOING:_CALC")
{
    field(INPA, "$(P)MOVE")
    field(CALC, "A=1 || A=6")
    field(OOPT, "Every Time")
    field(OUT, "$(P)GOING PP")
}

record(bi, "$(P)GOING")
{
    field(DESC, "Whether the rig is going to SP")
    field(VAL, "0")
	field(PINI, "YES")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(seq, "$(P)READ_SLOW")
{
    field(DESC, "Read data from rig (slow scan)")
    
    # Disable watchdog
    field(DO1, "0")
    field(LNK1, "$(P)WATCHDOG:STAT:SP PP")
    
    field(LNK2, "$(P)MOVE PP")
    field(LNK3, "$(P)STAT:FRAME PP")
    field(LNK4, "$(P)CHANNEL:RAW PP")

    field(LNK5, "$(P)CONTROLS:SPECIFIC:READALL PP")
	field(LNK6, "$(P)WAVE:READALL PP")
    
    field(SCAN, "1 second")
    field(SELM, "All")
}

record(seq, "$(P)READ_VAR")
{
    field(DESC, "Read data from rig (variable scan)")
    
    # Disable watchdog
    field(DO1, "0")
    field(LNK1, "$(P)WATCHDOG:STAT:SP PP")
	
    field(LNK2, "$(P)POS:READALL PP")
    field(LNK3, "$(P)STRESS:READALL PP")
    field(LNK4, "$(P)STRAIN:READALL PP")
	
    field(LNK5, "$(P)READ_VAR:COUNT:_CALC PP")
    
    field(SCAN, "1 second")
    field(SELM, "All")
}

record(calcout, "$(P)READ_VAR:COUNT:_CALC") {
	field(INPA, "$(P)READ_VAR:COUNT")
    field(CALC, "A+1")
    field(OOPT, "Every Time")
	field(OUT, "$(P)READ_VAR:COUNT PP")
}

record(ai, "$(P)READ_VAR:COUNT") {
	field(DESC, "Heartbeat for reader")
	field(VAL, "0")
	field(PINI, "YES")
}

record(mbbo, "$(P)READ_VAR:SCAN:SP")
{
    field(OUT, "$(P)READ_VAR.SCAN PP")
    field(DTYP, "Raw Soft Channel")
    
    field(ZRVL, "3")
    field(ONVL, "4")
    field(TWVL, "5")
    field(THVL, "6")
    field(FRVL, "7")
    field(FVVL, "8")
    
    field(ZRST, "10 second")
    field(ONST, "5 second")
    field(TWST, "2 second")
    field(THST, "1 second")
    field(FRST, ".5 second")
    field(FVST, ".2 second")
    # Don't use a .1 second option, this is too fast for the rig.
    
    field(VAL, "3")
    field(PINI, "YES")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:READ_VAR:SCAN:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)PANIC:SP")
{
    field(DESC, "Panic stop setpoint")
    field(DTYP, "stream")
    field(OUT, "@devInstron.proto panicStop $(PORT)")
    field(ZNAM, "READY")
    field(ONAM, "STOPPING")
    # Initial value.
    field(VAL, "0")
    field(FLNK, "$(P)PANIC:_SEQ")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PANIC:SP")
    field(SDIS, "$(P)DISABLE")
}

record(seq, "$(P)PANIC:_SEQ")
{
    field(DESC, "Reset panic stop button")
    
    # Reset panic stop button.
    field(DO1, "0")
    field(LNK1, "$(P)PANIC:SP")

    # End move.
    field(DO2, "0")
    field(LNK2, "$(P)STOP:SP PP")
    
    field(SELM, "All") 
}

record(bo, "$(P)STOP:SP")
{
    field(DESC, "Stop rig")
    field(ZNAM, "READY")
    field(ONAM, "STOPPING")
    # Initial value.
    field(VAL, "0")
    field(FLNK, "$(P)STOP:_FAN")
}

record(seq, "$(P)STOP:_RESET")
{
    field(DO1, "0")
    field(LNK1, "$(P)STOP:SP")
    field(SELM, "All")
}

record(fanout, "$(P)STOP:_FAN")
{
    field(LNK1, "$(P)STOP:_CALC_WAVEFORM PP")
    field(LNK2, "$(P)STOP:_CALC_RAMP PP")
    field(SELM, "All") 
}

record(calcout, "$(P)STOP:_CALC_RAMP")
{
    # TODO: Replace with $(P)WAVE:RUN once that PV has been implemented.
    field(INPA, "0")
    field(INPB, "$(P)STOP:SP")
    field(CALC, "A = 0 && B = 1")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)STOP:_STOP_RAMP PP")
    field(FLNK, "$(P)STOP:_RESET")
}

record(calcout, "$(P)STOP:_CALC_WAVEFORM")
{
    # TODO: Replace with $(P)WAVE:RUN once that PV has been implemented.
    field(INPA, "0")
    field(INPB, "$(P)STOP:SP")
    field(CALC, "A = 1 && B = 1")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)STOP:_STOP_WAVEFORM PP")
    field(FLNK, "$(P)STOP:_RESET")
}

record(seq, "$(P)STOP:_STOP_RAMP")
{
    field(DESC, "Stop ramp")   
    field(DO1, "0")
    field(LNK1, "$(P)MOVE:SP PP")    
    field(SELM, "All")
}

record(seq, "$(P)STOP:_STOP_WAVEFORM")
{
    field(DESC, "TODO: Insert actual PV")   
    field(DO1, "0")
    field(LNK1, "$(P)WAVE:STOP:RAW PP")    
    field(SELM, "All")
}

record(mbbo, "$(P)AXES:RAMP:WFTYP:SP")
{
    field(DESC, "Set all ramp waveform types")
    field(ZRST, "Ramp")
    field(ONST, "Dual ramp")
    field(TWST, "Trapezium")
    field(THST, "Absolute ramp")
    field(FRST, "Absolute hold ramp")
    field(FVST, "Absolute rate ramp")
    field(OUT, "${P}AXES:RAMP:WFTYP:SP:_FAN PP")
}

record(dfanout, "${P}AXES:RAMP:WFTYP:SP:_FAN") {
  field(DESC, "Fan out the axes WFTYP pv")
  field(OUTA, "$(P)POS:RAMP:WFTYP:SP PP")
  field(OUTB, "$(P)STRESS:RAMP:WFTYP:SP PP")
  field(OUTC, "$(P)STRAIN:RAMP:WFTYP:SP PP")
}


### SIMULATION RECORDS ###

record(bi, "$(P)SIM:WATCHDOG:STAT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:WATCHDOG:STAT","$(P)SIM:WATCHDOG:STAT:SP")

record(stringin, "$(P)SIM:ARBITRARY")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:ARBITRARY","$(P)SIM:ARBITRARY:SP")

record(bo, "$(P)SIM:PANIC:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(mbbi, "$(P)SIM:CHANNEL")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:CHANNEL","$(P)SIM:CHANNEL:SP")
alias("$(P)SIM:CHANNEL","$(P)SIM:CHANNEL:GUI")

record(mbbo, "$(P)SIM:READ_VAR:SCAN:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)SIM:CONTROLMODE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(VAL, "1")
}

record(bo, "$(P)SIM:INIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(mbbi, "$(P)SIM:MOVE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:MOVE","$(P)SIM:MOVE:SP")

record(mbbiDirect, "$(P)SIM:STAT:FRAME")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(bi, "$(P)WATCHDOG:_DISABLE")
{
    field(DESC, "Disables the watchdog")
    field(DTYP, "stream")
    field(INP,  "@devInstron.proto disableWatchdog $(PORT)")
    field(SCAN, "1 second")
}
