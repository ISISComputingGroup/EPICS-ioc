# Individual comp mode PV needed for OPI
alias("$(P)COMP:MODE","$(P)$(Q)COMP:MODE")

record(ai, "$(P)$(Q)FREQ")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The actual frequency")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)FREQ")
    field(SCAN, "1 second")
	field(EGU, "Hz")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:FREQ")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)$(Q)FREQ:SP")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "Sets the nominal frequency")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(CHANNEL),0)NOMFREQ")
	field(EGU, "Hz")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:FREQ:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)$(Q)FREQ:SP:RBV")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The nominal frequency")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)NOMFREQ")
    field(SCAN, "1 second")
	field(EGU, "Hz")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:FREQ:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)$(Q)PHAS")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The actual phase")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)PHASE")
    field(SCAN, "1 second")
	field(EGU, "us")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)$(Q)PHAS:SP")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "Sets the nominal phase")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(CHANNEL),0)NOMPHASE")
	field(EGU, "")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)$(Q)PHAS:SP:RBV")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The nominal phase")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)NOMPHASE")
    field(SCAN, "1 second")
	field(EGU, "us")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)$(Q)PHAS_ERR")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The actual phase error")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)PHASEERROR")
    field(SCAN, "1 second")
	field(EGU, "")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS_ERR")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)$(Q)PHAS_ERR:SP")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "Sets the nominal phase error")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(CHANNEL),0)NOMPHASEERROR")
	field(EGU, "")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS_ERR:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)$(Q)PHAS_ERR:SP:RBV")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The nominal phase error")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)NOMPHASEERROR")
    field(SCAN, "1 second")
	field(EGU, "")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:PHAS_ERR:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)$(Q)DIR")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The direction")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)DIR")
    field(SCAN, "1 second")
    field(ZNAM, "CCW")
    field(ONAM, "CW")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:DIR")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)$(Q)VETO")
}

record(bo, "$(P)$(Q)DIR:SP")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "Sets the nominal direction")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(CHANNEL),0)NOMDIR")
    field(ZNAM, "CCW")
    field(ONAM, "CW")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:DIR:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)$(Q)DIR:SP:RBV")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The nominal direction")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)NOMDIR")
    field(SCAN, "1 second")
    field(ZNAM, "CCW")
    field(ONAM, "CW")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:DIR:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)$(Q)DIR:ENABLED")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "Whether the direction can be changed")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)DIRENABLED")
    field(SCAN, "10 second")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:DIR:ENABLED")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)$(Q)VETO")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    # Update triggered by DIR
    field(DESC, "Whether it is vetoing")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)VETO")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:VETO")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)$(Q)READY")
}

record(bi, "$(P)$(Q)READY")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    # Update triggered by VETO
    field(DESC, "Whether it is ready")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)READY")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:READY")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)$(Q)INSYNC")
}

record(bi, "$(P)$(Q)INSYNC")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    # Update triggered by READY
    field(DESC, "Whether it is synchronised")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)INSYNC")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    info(INTEREST, "MEDIUM")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:INSYNC")
    field(SDIS, "$(P)DISABLE")
}

record(stringin, "$(P)$(Q)VALIDFREQS")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The frequencies allowed")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)VALIDFREQS")
    field(SCAN, "5 second")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:VALIDFREQS")
    field(SDIS, "$(P)DISABLE")
    field(PINI, "YES")
}

record(stringin, "$(P)$(Q)NAME")
{
    field(ASG, "$(ASG$(CHANNEL)=DEFAULT)")
    field(DESC, "The name of the chopper")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(CHANNEL),0)CHOPNAME")
    field(SCAN, "5 second")
    field(SIML, "$(P)SIM")
	field(SIOL, "$(P)$(Q)SIM:NAME")
    field(SDIS, "$(P)DISABLE")
}

### SIMULATION RECORDS ###

record(ai, "$(P)$(Q)SIM:FREQ")
{
    field(DTYP, "Soft Channel")
    field(VAL, "0")
}

alias("$(P)$(Q)SIM:FREQ","$(P)$(Q)SIM:FREQ:SP")
alias("$(P)$(Q)SIM:FREQ","$(P)$(Q)SIM:FREQ:SP:RBV")

record(ai, "$(P)$(Q)SIM:PHAS")
{
    field(DTYP, "Soft Channel")
    field(VAL, "0")
}

alias("$(P)$(Q)SIM:PHAS","$(P)$(Q)SIM:PHAS:SP")
alias("$(P)$(Q)SIM:PHAS","$(P)$(Q)SIM:PHAS:SP:RBV")

record(ai, "$(P)$(Q)SIM:PHAS_ERR")
{
    field(DTYP, "Soft Channel")
    field(VAL, "0")
}

alias("$(P)$(Q)SIM:PHAS_ERR","$(P)$(Q)SIM:PHAS_ERR:SP")
alias("$(P)$(Q)SIM:PHAS_ERR","$(P)$(Q)SIM:PHAS_ERR:SP:RBV")

record(bi, "$(P)$(Q)SIM:DIR")
{
    field(DTYP, "Soft Channel")
    field(VAL, "0")
}

alias("$(P)$(Q)SIM:DIR","$(P)$(Q)SIM:DIR:SP")
alias("$(P)$(Q)SIM:DIR","$(P)$(Q)SIM:DIR:SP:RBV")

record(bi, "$(P)$(Q)SIM:DIR:ENABLED")
{
    field(DTYP, "Soft Channel")
    field(VAL, "1")
}

record(bi, "$(P)$(Q)SIM:VETO")
{
    field(DTYP, "Soft Channel")
    field(VAL, "1")
}

record(bi, "$(P)$(Q)SIM:READY")
{
    field(DTYP, "Soft Channel")
    field(VAL, "1")
}

record(bi, "$(P)$(Q)SIM:INSYNC")
{
    field(DTYP, "Soft Channel")
    field(VAL, "1")
}

record(stringin, "$(P)$(Q)SIM:VALIDFREQS")
{
    field(DTYP, "Soft Channel")
    field(VAL, "1|5|10|100")
}

record(stringin, "$(P)$(Q)SIM:NAME")
{
    field(DTYP, "Soft Channel")
    field(VAL, "Simulated Chopper")
}
