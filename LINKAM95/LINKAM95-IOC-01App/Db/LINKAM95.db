# Activities needed and their associated PVs
# Reset             Write   $(P)RESET, uses the protocol file
# Interlock Status  Read    $(P)ILK
# Power             Read    $(P)POWER directly, and alias to $(P)POWER:RBV
#                   Write   $(P)POWER:SP, and alias to $(P)POWER:SP:RBV
# Voltage           Read    $(P)VOLT, and alias to $(P)VOLT:RBV
# Current Out       Read    $(P)CURR, and alias to $(P)CURR:RBV
# Remote Mode       Write   (P)REMOTE, there is a PINI to set to REMOTE
# Polarity          Read    $(P)POL, and alias to $(P)POL:RBV
#                   Write   $(P)POL:SP, and alias to $(P)POL:SP:RBV
# Field Unit        Read    The unit currently being displayed, Oersted, Tesla or Gauss, $(P):FIELD:UNIT aliased to $(P)
#                   Write   $(P)FIELD:UNIT:SP aliased to $(P)FIELD:UNIT:SP:RBV
# Field             Read    Converted raw current value to field value, $(P)FIELD aliased to $(P)FIELD:RBV
#                   Write   $(P)FIELD:SP aliased to $(P)FIELD:SP:RBV, this is converted and sent to $(P)SETIRAW for writing to the device

record(bo, "$(P)SIM") 
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
}

record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "0")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

###################
#### T command ####
###################

record(stringin, "$(P)RAW_STAT")
{
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP, "@devlinkam95.proto getStatus $(port)")
    field(FLNK, "$(P)FAN_STAT")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RAW_STAT")
    info(archive, "VAL")
}

record(stringout, "$(P)SIM:RAW_STAT")
{
}

record(fanout, "$(P)FAN_STAT")
{
    field(LNK1, "$(P)CALC_STAT")
    field(LNK2, "$(P)CALC_ERR")
    field(LNK3, "$(P)CALC_PUMP")
    field(LNK4, "$(P)PARSE_TEMP")
}


##############
# Status byte
##############

record(scalcout, "$(P)CALC_STAT")
{
    field(CALC, "BYTE(AA[0,0])")
    field(INAA, "$(P)RAW_STAT")
    field(OUT, "$(P)STATUS.RVAL PP")
}

record(mbbi, "$(P)STATUS")
{
    field(DESC, "Device status description")
    field(DTYP, "Raw Soft Channel")
    
    field(ZRVL, "1")
    field(ONVL, "16")
    field(TWVL, "32")
    field(THVL, "48")
    field(FRVL, "64")
    field(FVVL, "80")   
    
    field(ZRST, "Stopped")
    field(ONST, "Heating")
    field(TWST, "Cooling")
    field(THST, "Holding limit/end of ramp")
    field(FRST, "Holding the limit time")
    field(FVST, "Holding temperature")
	
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

#############
# Error byte
#############

record(scalcout, "$(P)CALC_ERR")
{
    field(CALC, "BYTE(AA[1,1])")
    field(INAA, "$(P)RAW_STAT")
    field(OUT, "$(P)IN_ERROR PP")
}

record(mbbiDirect, "$(P)IN_ERROR")
{
    field(DESC, "Raw error status byte")
    field(NOBT, "8")
}

record(bi, "$(P)FAST_COOL_RATE")
{
    field(DESC, "Cooling rate too fast")
    field(INP, "$(P)IN_ERROR.B0")
    field(SCAN, ".1 second")
    field(ZNAM, "OK")
    field(ONAM, "Error")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)OPEN_CIRCUIT")
{
    field(DESC, "Open circuit")
    field(INP, "$(P)IN_ERROR.B1")
    field(SCAN, ".1 second")
    field(ZNAM, "OK")
    field(ONAM, "Error")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)POWER_SURGE")
{
    field(DESC, "Protection set, overload")
    field(INP, "$(P)IN_ERROR.B2")
    field(SCAN, ".1 second")
    field(ZNAM, "OK")
    field(ONAM, "Error")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)NO_EXIT_300")
{
    field(DESC, "Tried to exit at T>300C")
    field(INP, "$(P)IN_ERROR.B3")
    field(SCAN, ".1 second")
    field(ZNAM, "OK")
    field(ONAM, "Error")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)LINK_ERROR")
{
    field(DESC, "Data transmission error")
    field(INP, "$(P)IN_ERROR.B5")
    field(SCAN, ".1 second")
    field(ZNAM, "OK")
    field(ONAM, "Error")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

###################
# Pump status byte
###################

record(scalcout, "$(P)CALC_PUMP")
{
    field(DESC, "Raw pump status byte")
    field(CALC, "BYTE(AA[2,2])")
    field(INAA, "$(P)RAW_STAT")
    field(OUT, "$(P)CALC_PUMP_SPEED.A PP")
}

record(calcout, "$(P)CALC_PUMP_SPEED")
{
    field(DESC, "Calc pump speed from byte")
    field(CALC, "A&31")
    field(OUT, "$(P)PUMP_SPEED PP")
    field(FLNK, "$(P)CALC_PUMP_STAT")
}

record(longin, "$(P)PUMP_SPEED")
{
    field(DESC, "Pump speed, 0-30")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(calcout, "$(P)CALC_PUMP_STAT")
{
    field(DESC,"Gets num val for pump stat")
    field(CALC,"(A>1&&A<30)?-1:A")
    field(INPA,"$(P)PUMP_SPEED")
    field(OUT,"$(P)PUMP:STAT.RVAL PP")
}

record(mbbi, "$(P)PUMP:STAT")
{
    field(DESC, "Pump status description")
    field(DTYP, "Raw Soft Channel")
    
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "30")   
    field(THVL, "-1")
    
    field(ZRST, "Stopped")
    field(ONST, "Minimum speed")
    field(TWST, "Maximum speed")
    field(THST, "OK")
	
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

##################################
# Dummy PV to consume extra bytes
##################################

#record(ai, "$(P)IN_DUMMY")
#{
#   field(DESC, "Dummy PV to consume extra info")
#   field(FLNK, "$(P)IN_TEMP")
#}

##################
# Temperature RBV
##################

record(scalcout, "$(P)PARSE_TEMP")
{
    field(CALC, "SSCANF(AA[6,9],'%X')")
    field(INAA, "$(P)RAW_STAT")
    field(OUT, "$(P)CALC_TEMP.A PP")
    info(archive, "VAL")
}

record(calcout, "$(P)CALC_TEMP")
{
    field(CALC, "((A<32767)?A:A-65536)*0.1")
    field(OUT, "$(P)TEMP:RBV PP")
}

#record(waveform, "$(P)IN_TEMP")
#{
#   field(DESC, "Raw temperature 4-byte value")
#   field(NELM, "4")
#   field(FTVL, "CHAR")
#   field(FLNK, "$(P)TEMP_CONVERTER")
#}
#
#record(asub, "$(P)TEMP_CONVERTER")
#{
#   field(DESC, "Convert raw temperature byte values to double")
#   field(SNAM, "convertLinkam95TempToDouble")
#   field(INPA, "$(P)IN_TEMP")
#   field(NOA, "4")
#   field(NEA, "4")
#   field(FTA, "CHAR")
#   field(OUTA, "$(P)TEMP:RBV PP")
#   field(FTVA, "DOUBLE")
#}

record(ai, "$(P)TEMP:RBV")
{
    field(DESC, "Temperature RBV")
    field(EGU, "C")
    field(PREC, "1")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

######################
#### Rate command ####
######################

record(ao, "$(P)RATE:SP") {
    field(DESC, "Set ramp rate")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setRate $(port)")
    field(PREC, "2")
    field(LINR, "LINEAR")
    field(ESLO, "0.01")
    field(DRVH, "99.99")
    field(DRVL, "0")
    field(EGU, "C/min")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RATE:SP")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)SIM:RATE:SP")
{
}

#######################
#### Limit command ####
#######################

record(ao, "$(P)LIMIT:SP") {
    field(DESC, "Set ramp limit")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setLimit $(port)")
    field(PREC, "1")
    field(LINR, "LINEAR")
    field(ESLO, "0.1")
    field(DRVH, "1500")
    field(DRVL, "-196")
    field(EGU, "C")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:LIMIT:SP")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)SIM:LIMIT:SP")
{
}

#############################
#### Start/stop commands ####
#############################

record(bo, "$(P)RAMP:ACTIVE:CMD") {
    field(DESC, "Ramp stop/start control")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setRampControl $(port)")
    field(ZNAM, "Stop")
    field(ONAM, "Start")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RAMP:ACTIVE:CMD")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bo, "$(P)SIM:RAMP:ACTIVE:CMD")
{
	field(ONAM, "Stop")
	field(ZNAM, "Start")
}

########################################
#### Force heating/cooling commands ####
########################################

record(mbbo, "$(P)RAMP:CONTROL:CMD") {
    field(DESC, "Start ramp heat/cool/hold")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setForceRamp $(port)")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(ZRST, "Heat")
    field(ONST, "Cool")
    field(TWST, "Hold")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RAMP:CONTROL:CMD")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(mbbo, "$(P)SIM:RAMP:CONTROL:CMD")
{
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(ZRST, "Heat")
    field(ONST, "Cool")
    field(TWST, "Hold")
}

###########################
#### LNP pump commands ####
###########################

record(bo, "$(P)PUMP:MODE:SP") {
    field(DESC, "Set pump mode")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setPumpMode $(port)")
    field(ZNAM, "Manual")
    field(ONAM, "Auto")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PUMP_MODE:SP")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(bo, "$(P)SIM:PUMP:MODE:SP")
{
	field(ONAM, "Manual")
	field(ZNAM, "Auto")
}

record(longout, "$(P)PUMP:SPEED:SP") {
    field(DESC, "Set pump speed")
    field(DTYP, "stream")
    field(OUT, "@devlinkam95.proto setPumpSpeed $(port)")
    field(DRVH, "30")
    field(DRVL, "0")
    field(HOPR, "30")
    field(LOPR, "0")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PUMP:SPEED:SP")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(longout, "$(P)SIM:PUMP:SPEED:SP")
{
}