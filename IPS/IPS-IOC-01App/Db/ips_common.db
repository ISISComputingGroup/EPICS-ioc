record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

#########################################################
# START OF RECORDS FOR READBACK FROM VERSION COMMAND.
# # Readback of the instrument model and version info.
# # Run the Version command, V.
# # The string was too long to put model and version into same record.
# # Scan this once, probably not needed again.
# The reply comes back and is split amongst other records in the StreamDevice protocol file.
record(stringin, "$(P)GET:VERSION") {
  field(DESC, "Examine status")
  field(DTYP, "stream")
  field(INP,  "@$(PROTO) getVersion($(P)) $(PORT)")
  field(PINI, "YES")
  field(FLNK, "$(P)MODEL")
  field(SCAN, "Passive")
  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:DONOTHING")
  field(SDIS, "$(P)DISABLE")
}

# Updated in GET:VERSION call to getVersion()
record(stringin, "$(P)MODEL") {
  field(DESC, "Model")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(FLNK, "$(P)VERSION")
}

# Updated in GET:VERSION call to getVersion()
record(stringin, "$(P)VERSION") {
  field(DESC, "Firmware version.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
}

# Hold means maintaining present current.
# Clamped means you cannot adjust it - powers up in this
# state.  Only the set activity hold command can get out
# of the clamped state.  Hold will interrupt a sweep.
record(mbbo, "$(P)ACTIVITY:SP") {
  field(DESC, "Activity control")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@$(PROTO) setActivity $(PORT)")
  field(ZRST, "Hold")
  field(ZRVL, "0")
  field(ONST, "To Setpoint")
  field(ONVL, "1")
  field(TWST, "To Zero")
  field(TWVL, "2")
  field(FRST, "Clamp")
  field(FRVL, "4")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:ACTIVITY:SP")
  field(SDIS, "$(P)DISABLE")
}

# Think this is the present current the unit is trying to supply.
record(ai, "$(P)CURR") {
  field(DESC, "Demand current readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getDemandCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:CURRENT")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The present current setpoint.
record(ai, "$(P)CURR:SP:RBV") {
  field(DESC, "Setpoint current readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getSetpointCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:CURRENT")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The present voltage.
record(ai, "$(P)SUPPLY:VOLT") {
  field(DESC, "Supply voltage readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getSupplyVoltage $(PORT)")
  field(EGU,  "V")
  field(PREC, "8")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:SUPPLY:VOLT")
  field(SDIS, "$(P)DISABLE")

  field(FLNK, "$(P)SUPPLY:VOLT:_STABILITY:BUF")

  info(archive, "VAL")
}

record(compress, "$(P)SUPPLY:VOLT:_STABILITY:BUF") {
  field(INP, "$(P)SUPPLY:VOLT")
  field(ALG, "Circular Buffer")
  field(NSAM, "5")
  field(FLNK, "$(P)SUPPLY:VOLT:_STABILITY:LOW")
}

record(compress, "$(P)SUPPLY:VOLT:_STABILITY:LOW") {
  field(INP, "$(P)SUPPLY:VOLT:_STABILITY:BUF")
  field(ALG, "N to 1 Low Value")
  field(NSAM, "1")
  field(N, "5")
  field(FLNK, "$(P)SUPPLY:VOLT:_STABILITY:HIGH")
}

record(compress, "$(P)SUPPLY:VOLT:_STABILITY:HIGH") {
  field(INP, "$(P)SUPPLY:VOLT:_STABILITY:BUF")
  field(ALG, "N to 1 High Value")
  field(NSAM, "1")
  field(N, "5")
  field(FLNK, "$(P)SUPPLY:VOLT:_STABILITY:CALC")
}

record(calcout, "$(P)SUPPLY:VOLT:_STABILITY:CALC") {
  field(INPA, "$(P)SUPPLY:VOLT:_STABILITY:HIGH")
  field(INPB, "$(P)SUPPLY:VOLT:_STABILITY:LOW")
  field(CALC, "ABS(A-B)<$(STABILITY_VOLTAGE)")
  field(OUT, "$(P)SUPPLY:VOLT:STABLE PP")
  field(OOPT, "Every Time")
}

record(bo, "$(P)SUPPLY:VOLT:STABLE") {
  field(ZNAM, "NO")
  field(ONAM, "YES")
  info(archive, "VAL")
}

# The present current measured.
record(ai, "$(P)MAGNET:CURR:MEAS") {
  field(DESC, "Measured magnet current readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getMeasuredMagnetCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:MAGNET:CURR:MEAS")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The present sweeprate for current.
record(ai, "$(P)CURR:RATE") {
  field(DESC, "Current sweep rate readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getCurrentSweepRate $(PORT)")
  field(EGU,  "A/min")
  field(PREC, "3")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:CURR:RATE")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The field the unit is attempting to create.
record(ai, "$(P)FIELD") {
  field(DESC, "Demand field readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getDemandField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD")
  field(SDIS, "$(P)DISABLE")

  info(INTEREST, "LOW")
  info(archive, "VAL")
}

record(ao, "$(P)FIELD:SP") {
  field(DESC, "Set setpoint field")
  field(SCAN, "Passive")
  field(EGU,  "T")
  field(PREC, "5")
  field(DRVH, "$(MAX_FIELD)")
  field(DRVL, "-$(MAX_FIELD)")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD")
  field(SDIS, "$(P)DISABLE")
  info(archive, "VAL")
}

# Set the Field Setpoint (i.e. the field the unit will go to and hold for the magnet.)
record(ao, "$(P)FIELD:SP:_RAW") {
  field(DESC, "Send raw field to box")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,  "@$(PROTO) setSetpointField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(DRVH, "$(MAX_FIELD)")
  field(DRVL, "-$(MAX_FIELD)")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD")
  field(SDIS, "$(P)DISABLE")
  info(archive, "VAL")
}

# The present field setpoint.  The target field the unit will aim for when
# told to go to the setpoint.
record(ai, "$(P)FIELD:SP:RBV") {
  field(DESC, "Setpoint field readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getSetpointField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD")
  field(SDIS, "$(P)DISABLE")
  info(archive, "VAL")
}

# The present sweeprate (a.k.a. ramprate) for adjusting the field.
record(ai, "$(P)FIELD:RATE") {
  field(DESC, "Field sweep rate readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getFieldSweepRate $(PORT)")
  field(EGU,  "T/min")
  field(PREC, "4")

  field(LOLO, "0")
  field(LLSV, "MAJOR")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD:RATE")
  field(SDIS, "$(P)DISABLE")
  info(INTEREST, "HIGH")
  info(archive, "VAL")
}

record(ao, "$(P)FIELD:RATE:SP") {
  field(DESC, "Set field sweep rate")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@$(PROTO) setFieldSweepRate $(PORT)")
  field(EGU,  "T/min")
  field(PREC, "4")
  field(DRVH, "$(MAX_SWEEP_RATE)")
  field(DRVL, "0")
  field(ASG, "$(MANAGER_ASG)")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:FIELD:RATE:SP")
  field(SDIS, "$(P)DISABLE")
}

# The voltage at which the unit will stop ramping/sweeping at the sweeprate
# requested, but reduce it to protect the voltage.
record(ai, "$(P)VOLT:LIMIT:SOFTWARE") {
  field(DESC, "Software voltage limit readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getSoftwareVoltageLimit $(PORT)")
  field(EGU,  "V")
  field(PREC, "8")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:SOFTWAREVOLTAGELIMIT")
  field(SDIS, "$(P)DISABLE")
}

# This is the current that is in the magnet, which in the case of a magnet with a switch
# and a heater is preserved even when the power unit is not connected (cos of how
# superconducting magnets behave).
record(ai, "$(P)MAGNET:CURR:PERSISTENT") {
  field(DESC, "Persistent magnet current readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getPersistentMagnetCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:PERSISTENTMAGNETCURRENT")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The field in the magnet due to the persistent current. See current for explanation.
record(ai, "$(P)MAGNET:FIELD:PERSISTENT") {
  field(DESC, "Persistent magnet field readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getPersistentMagnetField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:PERSISTENTMAGNETFIELD")
  field(SDIS, "$(P)DISABLE")

  info(INTEREST, "LOW")

  info(archive, "VAL")
}

# The resistance of the lead from the unit to the magnet that carries
# the current.  This is set by the supplier in the controller, all this
# record does is read and report the value.
record(ai, "$(P)RESISTANCE:LEAD") {
  field(DESC, "Leadresistance readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getLeadResistance $(PORT)")
  field(EGU,  "mohm")
  field(PREC, "5")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:LEADRESISTANCE")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# The inductance of the magnet. Believe this is also set by the supplier
# as a calibration.
record(ai, "$(P)MAGNET:INDUCTANCE") {
  field(DESC, "Magnet inductance readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@$(PROTO) getMagnetInductance $(PORT)")
  field(EGU,  "H")
  field(PREC, "5")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:MAGNETINDUCTANCE")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# Amount of time to wait for heater to warm up/cool down.  **CAN CAUSE MAGNET TO QUENCH IF SET TOO LOW**
# Oxford Instruments labview driver uses 30s.  ISIS cryogenics have asked us to increase this to 60s,
# which is more conservative.
# The HEATER_WAITTIME IOC macro, which is _not_ user-facing, has a default of 60s.
# Configurable to lower values to shorten time for IOC tests.

record(ao, "$(P)HEATER:WAITTIME") {
  field(DESC, "Time to wait for heater")
  field(VAL, "$(HEATER_WAITTIME)")
  field(PINI, "YES")
  info(archive, "VAL")
}

# CALC record to coerce heater status values.  Heater can be off in states 0 or 2, and in error in states 5 or 8,
# and circular buffer (N to 1 Low Value) only looks for lowest (0).
# Output 1 only if heater is on, 0 if off and all other states, including errors.

record(calc, "$(P)HEATER:_STATUS_CALC") {
    field(DESC, "Binary Heater Status")
    field(INPA, "$(P)HEATER:STATUS CP MS")
    field(CALC, "(A=1)?1:0")                # If heater is on, output 1, otherwise 0
    info(archive, "VAL")
}

record(bo, "$(P)HEATER:STATUS:SP") {
  field(DESC, "Set Remote/Local Control")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,  "@$(PROTO) setHeaterStatus $(PORT)")
  field(ZNAM, "Off")
  field(ONAM, "On")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:HEATER:STATUS:SP")
  field(SDIS, "$(P)DISABLE")
}

# COMPRESS Record with circular buffer to store $(HEATER_WAITTIME) worth of HEATER:STATUS values
# Used with second COMPRESS record below to check heater has been on for at least $(HEATER_WAITTIME) after starting IOC

record(compress, "$(P)HEATER:_STATUS_BUFFER") {
  field(DESC, "Buffer of heater status values")
  field(INP, "$(P)HEATER:_STATUS_CALC.VAL")
  field(ALG, "Circular Buffer")
  field(NSAM, "$(HEATER_WAITTIME)")
  field(SCAN, "1 second")
  field(FLNK, "$(P)HEATER:_STATUS_BUFFER_LOWEST")
}

# COMPRESS record to monitor above and output lowest value in buffer.
# If '1' then whole buffer contains '1' and therefore heater has been ON for at least $(HEATER_WAITTIME)
# If '0' then heater has been OFF at some point in $(HEATER_WAITTIME)

record(compress, "$(P)HEATER:_STATUS_BUFFER_LOWEST") {
  field(DESC, "Lowest value of heater status buffer")
  field(INP, "$(P)HEATER:_STATUS_BUFFER")
  field(ALG, "N to 1 Low Value")
  field(NSAM, "1")
  field(N, "$(HEATER_WAITTIME)")
  field(FLNK, "$(P)HEATER:ONTIME_OK")
  info(archive, "VAL")
}

# BO record to indicate whether or not heater been on for at least $(HEATER_WAITTIME).
# Monitored by statemachine to determine whether or not OK to set field.

record(bo, "$(P)HEATER:ONTIME_OK") {
  field(DESC, "Heater on for at least $(HEATER_WAITTIME)s")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(OMSL, "closed_loop")
  field(DOL, "$(P)HEATER:_STATUS_BUFFER_LOWEST.VAL")
  field(ZNAM, "Heater OFF in last $(HEATER_WAITTIME)s")
  field(ONAM, "Heater ON for > $(HEATER_WAITTIME)s")
  info(archive, "VAL")
}

# Readback from m of Mmn part of Examine command return.
# The Display is in Amps or Tesla.  The Magnet Sweep is fast or slow.
record(mbbi, "$(P)SWEEPMODE:PARAMS") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "Amps Fast")
  field(ZRVL, "0")
  field(ONST, "Tesla Fast")
  field(ONVL, "1")
  field(TWST, "Amps Fast")
  field(TWVL, "2")
  field(THST, "Tesla Fast")
  field(THVL, "3")
  field(FRST, "Amps Slow")
  field(FRVL, "4")
  field(FVST, "Tesla Slow")
  field(FVVL, "5")
  field(SXST, "Amps Slow")
  field(SXVL, "6")
  field(SVST, "Tesla Slow")
  field(SVVL, "7")
  field(EIST, "Amps Unaffected")
  field(EIVL, "8")
  field(NIST, "Tesla Unaffected")
  field(NIVL, "9")

  field(VAL, "3")
  field(PINI, "YES")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:SWEEPMODE:PARAMS")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}


# Readback from n of Mmn part of Examine command return.
# (Ignore the Pmn part of the Examine command return - no records for this.)
# 0 output constant, 1, 2, 3 output changing
record(mbbi, "$(P)STS:SWEEPMODE:SWEEP") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "At rest")
  field(ZRVL, "0")
  field(ONST, "Sweeping")
  field(ONVL, "1")
  field(TWST, "Sweep Limiting")
  field(TWVL, "2")
  field(THST, "Swping & Lmting")
  field(THVL, "3")

  field(SIML, "$(P)SIM")
  field(SIOL, "$(P)SIM:STS:SWEEPMODE:SWEEP")
  field(SDIS, "$(P)DISABLE")

  info(archive, "VAL")
}

# PERSISTENT pv is the magnet persistent mode in the cryomagnet statemachine.
record(bo, "$(P)PERSISTENT") {
  field(DESC, "Set magnet to persistent")
  field(ZNAM, "NO")
  field(ONAM, "YES")
  field(PINI, "YES")
  info(autosaveFields, "VAL")
  info(INTEREST, "HIGH")
  info(archive, "VAL")
}

# Play nicely with blocks/genie_python
alias("$(P)PERSISTENT", "$(P)PERSISTENT:SP")

record(mbbo, "$(P)STATEMACHINE") {
  field(DESC, "What the IOC is doing")

  field(ZRVL, "0")
  field(ZRST, "Initial state")

  field(ONVL, "1")
  field(ONST, "At field")

  field(TWVL, "2")
  field(TWST, "Set PSU to match magnet")

  field(THVL, "3")
  field(THST, "Wait for volts stable")

  field(FRVL, "4")
  field(FRST, "Ensure heater on & warm")

  field(FVVL, "5")
  field(FVST, "Set PSU to setpoint")

  field(SXVL, "6")
  field(SXST, "Turn heater off & wait")

  field(SVVL, "7")
  field(SVST, "Set PSU to zero")

  info(archive, "VAL")
}


###
### Records to be more "friendly" to the user.
###

record(calc, "$(P)FIELD:USER") {
    field(DESC, "Field readback")
    field(INPA, "$(P)MAGNET:FIELD:PERSISTENT CP MS")
    field(INPB, "$(P)FIELD CP MS")
    field(INPC, "$(P)HEATER:STATUS CP MS")
    field(CALC, "(C=0||C=2)?A:B")  # If heater is present and switched off, display persistent field, else display PSU field
    field(ASG, "READONLY")
    field(EGU, "T")
    field(PREC, "5")
    info(interest, "HIGH")
    info(archive, "VAL")
}

alias("$(P)FIELD:SP", "$(P)FIELD:USER:SP")  # "User" setpoint is same as "normal" setpoint


### Simulation record - Just to stop errors, doesn't do anything

record(ao, "$(P)SIM:DONOTHING") {}

record(bo, "$(P)SIM:HEATER:STATUS") {
  field(ZNAM, "Off")
  field(ONAM, "On")
}

alias("$(P)SIM:HEATER:STATUS", "$(P)SIM:HEATER:STATUS:SP")

record(ao, "$(P)SIM:MAGNETINDUCTANCE"){}
record(ao, "$(P)SIM:LEADRESISTANCE"){}
record(ao, "$(P)SIM:POSCURRENTLIMIT"){}
record(ao, "$(P)SIM:NEGCURRENTLIMIT"){}
record(ao, "$(P)SIM:HEATERCURRENT"){}
record(ao, "$(P)SIM:TRIPFIELD"){}
record(ao, "$(P)SIM:TRIPCURRENT"){}
record(ao, "$(P)SIM:CURR:RATE"){}
record(ao, "$(P)SIM:SUPPLY:VOLT"){}
record(ao, "$(P)SIM:CURRENT"){}
record(ao, "$(P)SIM:SOFTWAREVOLTAGELIMIT"){}
record(ao, "$(P)SIM:FIELD:RATE"){}
record(ao, "$(P)SIM:FIELD"){}
alias("$(P)SIM:FIELD:RATE", "$(P)SIM:FIELD:RATE:SP")

record(mbbo, "$(P)SIM:ACTIVITY") {
  field(ZRST, "Hold")
  field(ZRVL, "0")
  field(ONST, "To Setpoint")
  field(ONVL, "1")
  field(TWST, "To Zero")
  field(TWVL, "2")
  field(FRST, "Clamp")
  field(FRVL, "4")
}

alias("$(P)SIM:ACTIVITY", "$(P)SIM:ACTIVITY:SP")
record(bo, "$(P)SIM:HEATER:STATUS") {
  field(ZNAM, "Off")
  field(ONAM, "On")
}

