record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

#########################################################
# START OF RECORDS FOR READBACK FROM VERSION COMMAND.
# # Readback of the instrument model and version info.
# # Run the Version command, V.
# # The string was too long to put model and version into same record.
# # Scan this once, probably not needed again.
# The reply comes back and is split amongst other records.
record(stringin, "$(P)GET:VERSION") {
  field(DESC, "Examine Status")
  field(DTYP, "stream")
  field(INP,  "@OxInstIPS.protocol getVersion($(P)) $(PORT)")
  field(PINI, "YES")
  field(FLNK, "$(P)MODEL")
  field(SCAN, "Passive")
}

record(stringin, "$(P)MODEL") {
  field(DESC, "Model.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(FLNK, "$(P)VERSION")
}

record(stringin, "$(P)VERSION") {
  field(DESC, "Firmware version.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
}

# # Readback from Cn part of Examine command return.
record(mbbi, "$(P)CONTROL") {
  field(DESC, "Control status")
  field(DTYP, "Soft Channel")
  field(SCAN, "1 second")
  field(ZRST, "Local & Locked")
  field(ZRVL, "0")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Remote & Locked")
  field(ONVL, "1")
  field(ONSV, "NO_ALARM")
  field(TWST, "Local & Unlocked")
  field(TWVL, "2")
  field(TWSV, "NO_ALARM")
  field(THST, "Remote & Unlocked")
  field(THVL, "3")
  field(THSV, "NO_ALARM")
  field(FRST, "Auto-Run-Down")
  field(FRVL, "4")
  field(FRSV, "MAJOR")
  field(FVST, "Auto-Run-Down")
  field(FVVL, "5")
  field(FVSV, "MAJOR")
  field(SXST, "Auto-Run-Down")
  field(SXVL, "6")
  field(SXSV, "MAJOR")
  field(SVST, "Auto-Run-Down")
  field(SVVL, "7")
  field(SVSV, "MAJOR")
  # field(FLNK, "$(P)TFM:CONTROL")
}

# Grab remote vs local control
record(mbbo, "$(P)CONTROL:SP") {
  field(DESC, "Set Remote/Local Control")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,  "@OxInstIPS.protocol setControl $(PORT)")
  field(ZRST, "Local & Locked")
  field(ZRVL, "0")
  field(ONST, "Remote & Locked")
  field(ONVL, "1")
  field(TWST, "Local & Unlocked")
  field(TWVL, "2")
  field(THST, "Remote & Unlocked")
  field(THVL, "3")
}

# # Readback from An part of Examine command return.
# # Hold means maintaining present current.
# # Clamped means you cannot adjust it - powers up in this 
# # state.  Only the set activity hold command can get out
# # of the clamped state.  Hold will interrupt a sweep.
record(mbbi, "$(P)ACTIVITY") {
  field(DESC, "Activity status")
  field(DTYP, "Soft Channel")
  field(SCAN, "1 second")
  field(ZRST, "Hold")
  field(ZRVL, "0")
  field(ONST, "To Setpoint")
  field(ONVL, "1")
  field(TWST, "To Zero")
  field(TWVL, "2")
  field(FRST, "Clamped")
  field(FRVL, "4")
}

# # Hold means maintaining present current.
# # Clamped means you cannot adjust it - powers up in this 
# # state.  Only the set activity hold command can get out
# # of the clamped state.  Hold will interrupt a sweep.
record(mbbo, "$(P)ACTIVITY:SP") {
  field(DESC, "Activity Control")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@OxInstIPS.protocol setActivity $(PORT)")
  field(ZRST, "Hold")
  field(ZRVL, "0")
  field(ONST, "To Setpoint")
  field(ONVL, "1")
  field(TWST, "To Zero")
  field(TWVL, "2")
  field(FRST, "Clamp")
  field(FRVL, "4")
}

# Think this is the present current the unit is trying to supply.
record(ai, "$(P)CURRENT") {
  field(DESC, "Demand Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getDemandCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.0002" )
}

# Set the Setpoint Current (ie the current the unit will provide and hold when 
# told to go to the setpoint, the target current if you like.)
# The controller will automatically adjust the field setpoint.
record(ao, "$(P)CURRENT:SP") {
  field(DESC, "Set setpoint current")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@OxInstIPS.protocol setSetpointCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.0002" )
}

# The present current setpoint.
record(ai, "$(P)CURRENT:SP:RBV") {
  field(DESC, "Setpoint Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getSetpointCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.0002" )
}

# The present voltage.
record(ai, "$(P)SUPPLYVOLTAGE") {
  field(DESC, "Supply Voltage Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getSupplyVoltage $(PORT)")
  field(EGU,  "V")
  field(PREC, "8")
  field(ADEL, "0.02" )
}

# The present current measured.
record(ai, "$(P)MEASUREDMAGNETCURRENT") {
  field(DESC, "Measured Magnet Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getMeasuredMagnetCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.2" )
}

# The present sweeprate for current.
record(ai, "$(P)CURRENTSWEEPRATE") {
  field(DESC, "Current Sweep Rate Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getCurrentSweepRate $(PORT)")
  field(EGU,  "A/min")
  field(PREC, "3")
  field(ADEL, "0.002" )
}

record(ao, "$(P)CURRENTSWEEPRATE:SP") {
  field(DESC, "Set Current Sweep Rate")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@OxInstIPS.protocol setCurrentSweepRate $(PORT)")
  field(EGU,  "A/min")
  field(PREC, "3")
  field(ADEL, "0.002" )
}

# The field the unit is attempting to create.
record(ai, "$(P)FIELD") {
  field(DESC, "Demand Field Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getDemandField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(ADEL, "0.00002" )
}

# Set the Field Setpoint (i.e. the field the unit will go to and hold for the
# magnet.)
# The controller will automaticllay adjust the current setpoint.
record(ao, "$(P)FIELD:SP") {
  field(DESC, "Set setpoint field")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@OxInstIPS.protocol setSetpointField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(ADEL, "0.00002" )
}

# The present field setpoint.  The target field the unit will aim for when
# told to go to the setpoint.
record(ai, "$(P)FIELD:SP:RBV") {
  field(DESC, "Setpoint Field Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getSetpointField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(ADEL, "0.00002" )
}

# The present sweeprate (a.k.a. ramprate) for adjusting the field.
record(ai, "$(P)FIELDSWEEPRATE") {
  field(DESC, "Field Sweep Rate Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getFieldSweepRate $(PORT)")
  field(EGU,  "T/min")
  field(PREC, "4")
  field(ADEL, "0.0002" )
}

record(ao, "$(P)FIELDSWEEPRATE:SP") {
  field(DESC, "Set Field Sweep Rate")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT,   "@OxInstIPS.protocol setFieldSweepRate $(PORT)")
  field(EGU,  "T/min")
  field(PREC, "4")
  field(ADEL, "0.0002" )
}

# The voltage at which the unit will stop ramping/sweeping at the sweeprate
# requested, but reduce it to protect the voltage.
record(ai, "$(P)SOFTWAREVOLTAGELIMIT") {
  field(DESC, "Software Voltage Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "10 second")
  field(INP,  "@OxInstIPS.protocol getSoftwareVoltageLimit $(PORT)")
  field(EGU,  "V")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

# This is the current that is in the magnet, which in the case of a magnet with a switch
# and a heater is preserved even when the power unit is not connected (cos of how
# superconducting magnets behave).
record(ai, "$(P)PERSISTENTMAGNETCURRENT") {
  field(DESC, "Persistent Magnet Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getPersistentMagnetCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.000002" )
}

# The current at which a trip last occurred.  Am not sure if by trip, they mean
# a quench or a problem with the level meter.  Believe the unit will take the current
# and field to zero if there is a trip, so this parameter preserves what was happening
# at the time of the trip.
record(ai, "$(P)TRIPCURRENT") {
  field(DESC, "Trip Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getTripCurrent $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.000002" )
}

# The field in the magnet due to the persistent current. See current for explanation.
record(ai, "$(P)PERSISTENTMAGNETFIELD") {
  field(DESC, "Persistent Magnet Field Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getPersistentMagnetField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(ADEL, "0.000002" )
}

# The field at which a trip last occurred.  See current for explanation.
record(ai, "$(P)TRIPFIELD") {
  field(DESC, "Trip Field Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getTripField $(PORT)")
  field(EGU,  "T")
  field(PREC, "5")
  field(ADEL, "0.000002" )
}

# The current being provided to the heater.
# Our magnets do not have heaters, so this is not relevant.
record(ai, "$(P)HEATERCURRENT") {
  field(DESC, "Heater Current Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getHeaterCurrent  $(PORT)")
  field(EGU,  "mA")
  field(PREC, "4")
  field(ADEL, "0.000002" )
}

# The lower limit for the current.  This refers to a limit on the controller and
# is nothing to do with EPICS record limit or alarm fields.
record(ai, "$(P)NEGCURRENTLIMIT") {
  field(DESC, "Neg Current Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "10 second")
  field(INP,  "@OxInstIPS.protocol getNegCurrentLimit $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.000002" )
}

# The higher limit for the current.  This refers to a limit on the controller and
# is nothing to do with EPICS record limit or alarm fields.
record(ai, "$(P)POSCURRENTLIMIT") {
  field(DESC, "Pos Current Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "10 second")
  field(INP,  "@OxInstIPS.protocol getPosCurrentLimit $(PORT)")
  field(EGU,  "A")
  field(PREC, "4")
  field(ADEL, "0.000002" )
}

# The resistance of the lead from the unit to the magnet that carries
# the current.  This is set by the supplier in the controller, all this
# record does is read and report the value.
record(ai, "$(P)LEADRESISTANCE") {
  field(DESC, "LeadResistance Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getLeadResistance $(PORT)")
  field(EGU,  "mOhm")
  field(PREC, "5")
  field(ADEL, "0.00002" )
}

# The inductance of the magnet. Believe this is also set by the supplier
# as a calibration.
record(ai, "$(P)MAGNETINDUCTANCE") {
  field(DESC, "Magnet Inductance Readback")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP,  "@OxInstIPS.protocol getMagnetInductance $(PORT)")
  field(EGU,  "H")
  field(PREC, "5")
  field(ADEL, "0.00002" )
}

# # Run the Examine Status command, X.
# The reply comes back and is split amongst other records.
record(stringin, "$(P)GET:STATUS") {
  field(DESC, "Examine Status")
  field(DTYP, "stream")
  field(INP, "@OxInstIPS.protocol getStatus($(P)) $(PORT)")
  # field(FLNK, "$(P)FAN:STATUS:1")
  field(SCAN, "1 second")
  field(SDIS, "$(P)DISABLE")
}

# # Readback from m of Xmn part of Examine command return.
record(mbbi, "$(P)STS:SYSTEM:FAULT") {
  field(DESC, "System fault status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Quenched")
  field(ONVL, "1")
  field(ONSV, "MAJOR")
  field(TWST, "Overheated")
  field(TWVL, "2")
  field(TWSV, "MAJOR")
  field(FRST, "Warming Up")
  field(FRVL, "4")
  field(FRSV, "MAJOR")
  field(EIST, "Fault")
  field(EIVL, "8")
  field(EISV, "MAJOR")
}

# # Readback from n of Xmn part of Examine command return.
record(mbbi, "$(P)STS:SYSTEM:LIMIT") {
  field(DESC, "System limit status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ZRSV, "NO_ALARM")
  field(ONST, "On +ve V Limit")
  field(ONVL, "1")
  field(ONSV, "MINOR")
  field(TWST, "On -ve V Limit")
  field(TWVL, "2")
  field(TWSV, "MINOR")
  field(FRST, "Current too -ve")
  field(FRVL, "4")
  field(FRSV, "MINOR")
  field(EIST, "Current too +ve")
  field(EIVL, "8")
  field(EISV, "MINOR")
}

# # Readback from Hn part of Examine command return.
# Don't think I10 magnet will use this.  Not bothering with alarms.
# 0 switch closed, 1 switch open, 2 switch closed, 5 heater is on but low current, 8 no switch fitted.
record(mbbi, "$(P)STS:HEATER") {
  field(DESC, "Heater status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "Off Mag at 0")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(TWST, "Off Mag at F")
  field(TWVL, "2")
  field(FVST, "Heater Fault")
  field(FVVL, "5")
  field(FVSV, "MAJOR")
  field(EIST, "No Switch")
  field(EIVL, "8")
  field(EISV, "MAJOR")
}

# # Readback from m of Mmn part of Examine command return.
# The Display is in Amps or Tesla.  The Magnet Sweep is fast or slow.
record(mbbi, "$(P)SWEEPMODE:PARAMS") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "Amps Fast Linear")
  field(ZRVL, "0")
  field(ONST, "Tesla Fast Linear")
  field(ONVL, "1")
  field(TWST, "Amps Fast 1/H")
  field(TWVL, "2")
  field(THST, "Tesla Fast 1/H")
  field(THVL, "3")
  field(FRST, "Amps Slow Linear")
  field(FRVL, "4")
  field(FVST, "Tesla Slow Linear")
  field(FVVL, "5")
  field(SXST, "Amps Slow 1/H")
  field(SXVL, "6")
  field(SVST, "Tesla Slow 1/H")
  field(SVVL, "7")
  field(EIST, "Amps Unaffected")
  field(EIVL, "8")
  field(NIST, "Tesla Unaffected")
  field(NIVL, "9")
}

# To set the sweep and display mode - its a bit confusing as there
# are duplicates, but we do not present this choice to the user.
#
record(mbbo, "$(P)SWEEPMODE:PARAMS:SP") {
  field(DESC, "Set sweep and display mode.")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(ZRST, "Amps Fast Linear")
  field(ZRVL, "0")
  field(ONST, "Tesla Fast Linear")
  field(ONVL, "1")
  field(TWST, "Amps Fast 1/H")
  field(TWVL, "2")
  field(THST, "Tesla Fast 1/H")
  field(THVL, "3")
  field(FRST, "Amps Slow Linear")
  field(FRVL, "4")
  field(FVST, "Tesla Slow Linear")
  field(FVVL, "5")
  field(SXST, "Amps Slow 1/H")
  field(SXVL, "6")
  field(SVST, "Tesla Slow 1/H")
  field(SVVL, "7")
  field(EIST, "Amps Unaffected")
  field(EIVL, "8")
  field(NIST, "Tesla Unaffected")
  field(NIVL, "9")
  field(OUT,  "@OxInstIPS.protocol setMode $(PORT)")
}

# # Readback from n of Mmn part of Examine command return.
# # (Ignore the Pmn part of the Examine command return - no records for this.)
# 0 output constant, 1, 2, 3 output changing
record(mbbi, "$(P)STS:SWEEPMODE:SWEEP") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(ZRST, "At rest")
  field(ZRVL, "0")
  field(ONST, "Sweeping")
  field(ONVL, "1")
  field(TWST, "Sweep Limiting")
  field(TWVL, "2")
  field(THST, "Swping & Lmting")
  field(THVL, "3")
}

# To capture bits of mismatching status protocol.*3::
# We do not do much with it at the moment.
record(stringin, "$(P)DBG:STS:MISMATCH") {
  field(DESC, "Mismatching protocol string.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
}

# Diddle with the comms and reported resolution.
# This is the nasty Q command which does not reply and whose
# info does not get reported by the status command.
# This may be needed after power cycle of IPS or if it has
# been connected to the Oxford Instruments Windows Application
# to allow EPICS to talk to it and to allow the resolution to be extended.
# Are not supporting setting these things individually, just setting
# what we want.
record(ao, "$(P)SET:COMMSRES") {
  field(DESC, "Set Ext. Resn, No LF")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(VAL, "6")
  field(PINI, "YES")
  field(OUT,  "@OxInstIPS.protocol setCommsResExtended $(PORT)")
}

# Diddle with the comms wait interval.
# Probably will not need this, but put it here in case we do.  Will not put access to this
# on the GUI.
record(ao, "$(P)SET:WAITINTERVAL") {
  field(DESC, "Set Wait Interval")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(EGU, "msec")
  field(OUT,  "@OxInstIPS.protocol setWaitInterval $(PORT)")
}
