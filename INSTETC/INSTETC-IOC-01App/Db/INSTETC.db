record(bo, "$(P)SIM") 
{
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(ZNAM, "NO")
	field(ONAM, "YES")
	field(VAL, "$(RECSIM=0)")
}
record(mbbi, "$(P)MOT:BUMP_STOP")
{
    field(DESC, "Is Bump Stop tripped?")
    field(ZRST, "TRIPPED")
    field(ONST, "NOT_TRIPPED")
    field(TWST, "UNAVAILABLE")
    field(ZRVL, 0)
    field(ONVL, 1)
    field(TWVL, 2)
    
	field(VAL, 2)
    field(PINI, 1)
	field(ZRSV, "MAJOR")
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:MOT:BUMP_STOP")
	field(FLNK, "$(P)MOT:MESSAGE_FORWARD_CALC")
}

record(calcout, "$(P)MOT:BUMP_STOP_READ")
{
    field(DESC, "Get Status of Bump Stop")
	field(INPA, "$(P)$(BMPSTP) CP")
	field(CALC, "A = 0 ? 1 : 0")
    field(OUT, "$(P)MOT:BUMP_STOP PP MS")
    field(IVOA, "Set output to IVOV")
    field(IVOV, "2")
}

record(calc, "$(P)MOT:MESSAGE_FORWARD_CALC")
{
	field(INPA, "$(P)MOT:BUMP_STOP")
	field(CALC, "A+1")
	field(FLNK, "$(P)MOT:MESSAGE_SELECT")
}

record(fanout, "$(P)MOT:MESSAGE_SELECT")
{
	field(LNK1, "$(P)MOT:BUMP_TRIPPED_MESSAGE")
	field(SELM, "Specified")
	field(SELL, "$(P)MOT:MESSAGE_FORWARD_CALC")
}

record(stringout, "$(P)MOT:BUMP_TRIPPED_MESSAGE")
{
	field(DTYP, "stdio")
	field(OUT, "@errlog")
	field(VAL, "BUMP STOP TRIPPED")
}

## Stop all motion
record (longin, "$(P)CS:MOT:STOP:ALL") 
{
	field(DESC, "Stop motions if changes and non-zero")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(VAL, 0)
	field(MDEL, -1)
}

## String field for the status of motor movement
record(bi, "$(P)CS:MOT:MOVING:STR") 
{
	field(DESC, "IOCs with motion to complete")
	field(INP, "$(P)CS:MOT:MOVING CP MS")
	field(ZNAM, "STATIONARY")
	field(ONAM, "MOVING")
	field(ASG, "NOTRAPW")
}

## Are any motors moving
## A-J set by motors, L from _MOVING1
record(calc, "$(P)CS:MOT:MOVING") 
{
	field(DESC, "IOCs with motion to complete")
	field(VAL, "0")
	field(SCAN, "Passive")
	field(CALC, "(A+B+C+D+E+F+G+H+I+J+K+L) > 0 ? 1 : 0")
	field(ASG, "NOTRAPW")
	info(archive, "VAL")
}

## A-J set by motors, L from _MOVING2
record(calcout, "$(P)CS:MOT:_MOVING1") 
{
	field(DESC, "IOCs with motion to complete")
	field(VAL, "0")
	field(SCAN, "Passive")
	field(CALC, "(A+B+C+D+E+F+G+H+I+J+K+L) > 0 ? 1 : 0")
	field(OUT, "$(P)CS:MOT:MOVING.L PP")
	field(OOPT, "Every Time")
	field(DOPT, "Use CALC")
	field(ASG, "NOTRAPW")
	info(archive, "VAL")
}

## A-J set by motors, L from _MOVING3
record(calcout, "$(P)CS:MOT:_MOVING2") 
{
	field(DESC, "IOCs with motion to complete")
    field(VAL, "0")
	field(SCAN, "Passive")
	field(CALC, "(A+B+C+D+E+F+G+H+I+J+K+L) > 0 ? 1 : 0")
	field(OUT, "$(P)CS:MOT:_MOVING1.L PP")
	field(OOPT, "Every Time")
	field(DOPT, "Use CALC")
	field(ASG, "NOTRAPW")
    info(archive, "VAL")
}

# used by access security file
record (bo, "$(P)CS:EXCLUSIVE") 
{
	field(DESC, "Restrict access to localhost")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(PINI, "YES")
	field(VAL, "0")
	field(OMSL, "supervisory")
	field(ZNAM, "All access")
	field(ONAM, "Restricted access")
}

# Log file messages PV
record(waveform, "$(P)LOG:TEXT")
{
   field(DESC, "Log messages for DAE")	
   field(NELM, "10024")
   field(FTVL, "CHAR")
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(daelog,0,0)TEXT")
   field(SCAN, "I/O Intr")
}

record(waveform, "$(P)LOG:CONSOLES:TEXT")
{
   field(DESC, "Log messages from running IoCs")  
   field(NELM, "10024")
   field(FTVL, "CHAR")
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(consoleslog,0,0)TEXT")
   field(SCAN, "I/O Intr")
}

# user@host with control
record (stringin, "$(P)CS:CONTROL")
{
	field(DESC, "Host which has the control batton")
	field(INP, "$(P)CS:CONTROL:REQUEST")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	
}

# write user@host here to request control
record (stringout, "$(P)CS:CONTROL:REQUEST") 
{
	field(DESC, "Request control")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(SDIS, "$(P)CS:CONTROL:LOCKED")
	field(DISV, "1")
	field(FLNK, "$(P)CS:CONTROL")
}

record (stringin, "$(P)CS:CONTROL:STAT") 
{
	field(DESC, "Request control status")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
}

# set to YES to lock out anybody else requesting access
record (bo, "$(P)CS:CONTROL:LOCKED") 
{
	field(DESC, "Request control lock")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(ZNAM, "NO")
	field(ONAM, "YES")
	field(PINI, "YES")
	field(VAL, "0")
}

record (bo, "$(P)CS:MANAGER") 
{
	field(DESC, "Manager access")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(PINI, "YES")
	field(VAL, "0")
	field(OMSL, "supervisory")
	field(ZNAM, "No")
	field(ONAM, "Yes")
	field(ZSV, "NO_ALARM")
    field(OSV, "MAJOR")
}

# This points to the centrally located shutter status and archives it locally 
record (mbbi, "$(P)CS:SHUTTER")
{
	field(INP, "$(P)SHTR:STAT CP")
	field(PINI, "YES")
	field(ZRVL, 0)
	field(ONVL, 1)
	field(TWVL, 2)
	field(THVL, 3)
	field(FRVL, 4)
	field(ZRST, "DEACT")
	field(ONST, "OPEN")
	field(TWST, "CLOSED")
	field(THST, "MOVING")
	field(FRST, "FAULT")	
	field(SIML, "$(P)SIM")
	field(SIOL, "$(P)SIM:CS:SHUTTER CP")
	info(archive, "VAL")
}

### SIMULATION RECORDS ###

record(mbbi, "$(P)SIM:BUMP_STOP")
{
	field(SCAN, "Passive")
    field(ZRST, "TRIPPED")
    field(ONST, "NOT_TRIPPED")
    field(TWST, "UNAVAILABLE")
    field(ZRVL, 0)
    field(ONVL, 1)
    field(TWVL, 2)
	field(VAL, 2)
	field(DTYP, "Soft Channel")
	field(FLNK, "$(P)BUMP_STOP")
}


record (mbbo, "$(P)SIM:CS:SHUTTER")
{
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")	
}

# User records
record (longin, "$(P)PARS:USER:MAX") 
{
	field(DESC, "Highest index of user variable")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(VAL, "$(NUM_USER_VARS)")
	field(PINI, "YES")
}

record (longin, "$(P)PARS:USER:BUTTONS:MAX") 
{
	field(DESC, "Highest index of user variable")
	field(SCAN, "Passive")
	field(DTYP, "Soft Channel")
	field(VAL, "$(NUM_USER_BUTTONS)")
	field(PINI, "YES")
}
