# terminator for output and input
# use OutTerminator and InTerminator if these are different
# Terminator set in st.cmd via asynOctetSetOutputEos() etc
# Terminator = CR LF;

# so we can use $SP for a space
SP = " ";

# this is hooked up to a 40 character stringout record, which will contain the reply after processing
sendString {
    ExtraInput = Ignore;
    out "%s"; in "%39c";
}

# $1 is the $(P)$(Q) record prefix, _OUT contains the string to send
# the format of the value contained in $2 (typically $2 would be %f or similar)
getValue {
#    ExtraInput = Ignore;
    out "%(\$1GETVAL:_OUT.VAL)s"; in "\$2";
}

# $1 is the $(P)$(Q) record prefix, _OUT contains the strings to prefix the value to send  $3 is the reply format
setValue {
#    ExtraInput = Ignore;
    out "%(\$1SETVAL:_OUT.VAL)s\$2"; in "\$3";
}

getAllOutputString {
    ExtraInput = Ignore;
    in "%39c";
}

# this uses a char waveform, use camonitor/caget with -S option to read
# size need to coordinate with waveform definition in db file (but be 1 less to leave space for NULL terminator)
getAllOutputLongString {
    ExtraInput = Ignore;
    in "%1023c";
}
