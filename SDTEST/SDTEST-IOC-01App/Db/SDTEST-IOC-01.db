# % macro, P, device prefix
# % macro, Q, device sub prefix
# % macro, NAME, device name
# % macro, DEV, device COM port

record(stringin, "$(P)$(Q)NAME")
{
    field(DESC, "Name of device")
    field(VAL, "$(NAME) [$(DEV)]")
}

record(stringin, "$(P)$(Q)DEVICE")
{
    field(DESC, "Device COM port")
    field(VAL, "$(DEV)")
}

record(stringin, "$(P)$(Q)INIT:_OUT")
{
    field(VAL, "$(INITOUT=)")
}

record(longout, "$(P)$(Q)INIT")
{
    field(DESC, "Init device")
	field(DTYP, "stream")
	field(OUT, "@$(PROTO) initDev($(P)$(Q),$(INITIN)) $(PORT)")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
    field(EGU, "")
    field(PINI, "$(INITP)")
    info(INTEREST, "MEDIUM")
}

## send a string to a device, reply will get written back to this record but we pass it onto another for clarity 
record(stringout, "$(P)$(Q)COMM")
{
    field(DESC, "Send string to device")
	field(DTYP, "stream")
	field(OUT, "@SDTEST-common.proto sendString $(PORT)")
	field(FLNK, "$(P)$(Q)REPLY.PROC")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
#    info(autosaveFields, "VAL")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}
alias("$(P)$(Q)COMM", "$(P)$(Q)COMM:SP")
alias("$(P)$(Q)COMM", "$(P)$(Q)COMM:SP:RBV")

# string needs to be 'fff','ggg',CR   etc
#record(stringout, "$(P)$(Q)COMM:Q")
#{
#    field(DESC, "Send quoted string to device")
#	field(DTYP, "stream")
#	field(OUT, "@$(PROTO) sendStringQ $(PORT)")
#	field(FLNK, "$(P)$(Q)REPLY.PROC")
#	field(SIML, "$(P)$(Q)SIM")
#	field(SIOL, "$(P)$(Q)SIM:VAL")
#	field(SDIS, "$(P)$(Q)DISABLE")
#    info(autosaveFields, "VAL")
 #   info(archive, "VAL")
  #  info(INTEREST, "MEDIUM")
#}

## we are triggered when command is processed and pick up reply
record(stringin, "$(P)$(Q)REPLY")
{
    field(DESC, "Reply from device")
    field(INP, "$(P)$(Q)COMM NPP")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

## the command sent to the device to read a value
record(stringin, "$(P)$(Q)GETVAL:_OUT")
{
    field(VAL, "$(GETOUT=)")
}

# PV names are too long to put entirely into protocol arguments, so just pass prefix and put rest of name in protocol file
record(ai, "$(P)$(Q)GETVAL")
{
    field(DESC, "Read value from device")
	field(DTYP, "stream")
    field(SCAN, "$(SCAN)")
	field(INP, "@$(PROTO) getValue($(P)$(Q),$(GETIN)) $(PORT)")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
    field(EGU, "")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)$(Q)SETVAL:_OUT")
{
    field(VAL, "$(SETOUTA=)")
}

# arg1 = prefix, arg2 = format for value to send, $3 = format for value to receive. 
# we either need $3 to discard or match the value
record(ao, "$(P)$(Q)SETVAL")
{
    field(DESC, "Send value to device")
	field(DTYP, "stream")
	field(OUT, "@$(PROTO) setValue($(P)$(Q),$(SETOUTB),$(SETOUTC),$(SETIN)) $(PORT)")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
    field(EGU, "")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
#    info(autosaveFields, "VAL")
}
alias("$(P)$(Q)SETVAL", "$(P)$(Q)SETVAL:SP")
alias("$(P)$(Q)SETVAL", "$(P)$(Q)SETVAL:SP:RBV")

# we get any output sent by device, whether in response to a command or not 
record(stringin, "$(P)$(Q)REPLY:ASYNC")
{
    field(DESC, "Unsollicited output from device")
	field(DTYP, "stream")
	field(INP, "@SDTEST-common.proto getAllOutputString $(PORT)")
#    field(SCAN, "I/O Intr")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
    info(INTEREST, "MEDIUM")
}

# we get any output sent by device, whether in response to a command or not 
# waveform size need to be one more than max length defined in .proto file function used
record(waveform, "$(P)$(Q)REPLYWF:ASYNC")
{
    field(DESC, "Unsollicited output from device")
	field(DTYP, "stream")
	field(INP, "@SDTEST-common.proto getAllOutputLongString $(PORT)")
	field(FTVL, "CHAR")
	field(NELM, "1024")
#    field(SCAN, "I/O Intr")
	field(SIML, "$(P)$(Q)SIM")
	field(SIOL, "$(P)$(Q)SIM:VAL")
	field(SDIS, "$(P)$(Q)DISABLE")
    info(INTEREST, "MEDIUM")
}

## SIM and DISABLE records
record( bo, "$(P)$(Q)DISABLE") 
{
  field(DESC, "Disable comms")
  field(PINI, "YES")
  field(VAL, "$(DISABLE)")
  field(OMSL, "supervisory")
  field(ZNAM, "Comms Enabled")
  field(ONAM, "Comms Disabled")
}

record(bo, "$(P)$(Q)SIM") 
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(SIM)")
}

record(stringout, "$(P)$(Q)SIM:VAL")
{
    field(VAL, "")
}
