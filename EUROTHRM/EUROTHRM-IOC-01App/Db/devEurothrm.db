#FileList for ramp
###################

record(waveform, "$(P)RAMP_DIRBASE:SP")
{
    field(DESC, "Set directory of ramp files")
    field(DTYP, "asynOctetWrite")
    field(PINI, "NO")
    field(INP, "@asyn($(RAMPLIST),0,1)DIRBASE")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

record(waveform, "$(P)RAMP_DIRBASE")
{
    field(DESC, "Get directory of ramp files")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(RAMPLIST),0,1)DIRBASE")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

record(waveform, "$(P)RAMP_FILES")
{
    field(DESC, "Compressed JSON list of ramp files")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(RAMPLIST),0,1)JARR")
    field(NELM, 16384)
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)RAMP_PATTERN:SP")
{
    field(DESC, "Set regex search of ramp files")
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn($(RAMPLIST),0,1)SEARCH")
    field(PINI, "NO")
    field(FTVL, "CHAR")
    field(NELM, 256)
}
record(waveform, "$(P)RAMP_PATTERN")
{
    field(DESC, "Get regex search of ramp files")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(RAMPLIST),0,1)SEARCH")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

#ReadASCII
###################
record(waveform, "$(P)READ_RAMP_DIRBASE:SP")
{
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn($(READ),0,1)DIRBASE")
    field(PINI, "NO")
    field(FTVL, "CHAR")
    field(NELM, 256)

}

record(waveform, "$(P)READ_RAMP_DIRBASE")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(READ),0,1)DIRBASE")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, 256)
    field(SCAN, "I/O Intr")
}

record(stringin, "$(P)RAMP_FILE")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(READ),0,1)DIR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)RAMP_FILE_NOT_DEFAULT")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(READ),0,1)LUTNDF")
    field(SCAN, "I/O Intr")
}

record(stringout, "$(P)RAMP_FILE:SP")
{
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(READ),0,1)DIR")
}

# This set point is passed to the ReadASCII ramp, which decides what value to pass on to the device.
record(ao, "$(P)TEMP:SP")
{
    field(DESC, "Temperature setpoint")
    field(DTYP, "asynFloat64")
    $(IFNEEDLE_VALVE) field(DRVH, "320") #The maximum temperature for Eurotherms, also close to 16bit signed max that can be sent via modbus
    field(OUT, "@asyn($(READ),0,1)TGT")
# I/O intr FLNK won't process until we trigger PROC via CA
    field(FLNK, "$(P)OUT_SP.PROC CA")
    field(EGU, "K")
    field(UDFS, "NO_ALARM") 
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# This set point is read back from the ReadASCII ramp to say where it is ramping to
record(ao, "$(P)TEMP:SP:RBV")
{
    field(DESC, "Temperature setpoint readback")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(READ),0,1)TGT:RBV")
    field(EGU, "K")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(ao, "$(P)RATE:SP")
{
    field(DESC, "Rate the ramp increases/decreases")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(READ),0,1)RATE")
    field(EGU, "K/min")
    info(INTEREST, "MEDIUM")
}

record(ai, "$(P)RATE")
{
    field(DESC, "Rate the ramp increases/decreases")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(READ),0,1)RATE")
    field(EGU, "K/min")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)RAMPING")
{
    field(DESC, "High if ramp is executing")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(READ),0,1)CURRMP")
    field(SCAN, "I/O Intr")
}

# This is the value that is being sent to the ReadASCII ramp to tell it at what temperature we currently are
record(ao, "$(P)CURRENT_TEMP")
{
    field(DESC, "The current temperature of the sensor")
    field(DOL, "$(P)TEMP CP")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(READ),0,1)CUR")
    field(EGU, "K")
}

record(bo, "$(P)RAMPON:SP")
{
    field(DESC, "Toggles the SP ramp")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(READ),0,1)RMP")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(bi, "$(P)RAMPON")
{
    field(DESC, "Toggles the SP ramp")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(READ),0,1)RMP")
    field(SCAN, "I/O Intr")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(bo, "$(P)LUTON:SP")
{
    field(DESC, "Toggles the PID lookup")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(READ),0,1)LUT")
}

record(bi, "$(P)LUTON")
{
    field(DESC, "Toggles the PID lookup")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(READ),0,1)LUT")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)OUT_SP")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(READ),0,1)SP")
    field(PREC, "5")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)RAMP_SP.PROC PP")
}

record(ai, "$(P)OUT_P")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(READ),0,1)P")
    field(PREC, "5")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)RAMP_P")
}

record(ai, "$(P)OUT_I")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(READ),0,1)I")
    field(PREC, "5")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)RAMP_I")
}

record(ai, "$(P)OUT_D")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(READ),0,1)D")
    field(PREC, "5")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)RAMP_D")
}

record(ai, "$(P)OUT_MAX")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(READ),0,1)MH")
    field(PREC, "5")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)RAMP_MAXOUT")
}

###########
# Cache & disable ramp when sensor disconnected

record(ai, "$(P)NO_SENSOR_VALUE")
{
    field(DESC, "Indicates disconnected sensor")
    field(VAL, 1529)
}


record(calcout, "$(P)SENSOR_CONNECTED")
{
    field(DESC, "Check if temp sensor reconnected")
    field(INPA, "$(P)RBV CP")
    field(INPB, "$(P)NO_SENSOR_VALUE")
    field(CALC, "A = B")
    field(OOPT, "Transition To Zero")
    field(OUT, "$(P)RAMPON:ENABLE PP")
    info(archive, "VAL")
}

record(bo, "$(P)RAMPON:ENABLE")
{
    field(DESC, "Enables Ramp setting control")
    field(OUT,  "$(P)RAMPON:SP.DISP PP")
    field(SCAN, "Passive")
    field(FLNK, "$(P)RAMPON:RETRIEVE")
}

record(calcout, "$(P)RAMPON:RETRIEVE")
{
# As calcout to add delay
    field(DESC, "Retrieve and set ramp setting")
    field(ODLY, "1")
    field(INPA, "$(P)RAMPON:CACHE")
    field(CALC, "A")
    field(OUT, "$(P)RAMPON:SP PP")
}

record(calcout, "$(P)SENSOR_DISCONNECTED")
{
    field(DESC, "Check temp sensor is disconnected")
    field(INPA, "$(P)RBV CP")
    field(INPB, "$(P)NO_SENSOR_VALUE")
    field(CALC, "A = B")
    field(OOPT, "Transition To Non-zero")
    field(OUT, "$(P)RAMPON:CACHE.PROC PP")
    info(archive, "VAL")
}

record(bi, "$(P)RAMPON:CACHE")
{
    field(DESC, "Caches the current Ramp setting")
    field(DTYP, "Soft Channel")
    field(INP,  "$(P)RAMPON")
    field(SCAN, "Passive")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(FLNK, "$(P)RAMPON:CLEAR")
}

record(bo, "$(P)RAMPON:CLEAR")
{
    field(VAL, 0)
    field(DESC, "Clears the current Ramp setting")
    field(DTYP, "Soft Channel")
    field(OUT,  "$(P)RAMPON:SP PP")
    field(SCAN, "Passive")
    field(FLNK, "$(P)RAMPON:DISABLE")
}

record(bo, "$(P)RAMPON:DISABLE")
{
    field(VAL, 1)
    field(DESC, "Disables ramp setting control")
    field(OUT,  "$(P)RAMPON:SP.DISP PP")
    field(SCAN, "Passive")
}

###########

#Pass on PID ramp from ReadASCII to the device
record(ao, "$(P)RAMP_SP")
{
    field(DTYP, "Soft Channel")
    field(DOL, "$(P)OUT_SP")
    field(FLNK, "$(P)TEMP:SP:CONV.PROC PP")
    field(OMSL, "closed_loop")
    field(OIF, "Full")
}

record(ao, "$(P)RAMP_P")
{
    field(DTYP, "Soft Channel")
    field(DOL, "$(P)OUT_P")
    field(OMSL, "closed_loop")
    field(OIF, "Full")
    field(OUT, "$(P)P:SP PP")
}

record(ao, "$(P)RAMP_I")
{
    field(DTYP, "Soft Channel")
    field(DOL, "$(P)OUT_I")
    field(OMSL, "closed_loop")
    field(OIF, "Full")
    field(OUT, "$(P)I:SP PP")
}

record(ao, "$(P)RAMP_D")
{
    field(DTYP, "Soft Channel")
    field(DOL, "$(P)OUT_D")
    field(OMSL, "closed_loop")
    field(OIF, "Full")
    field(OUT, "$(P)D:SP PP")
}

record(ao, "$(P)RAMP_MAXOUT")
{
    field(DTYP, "Soft Channel")
    field(DOL, "$(P)OUT_MAX")
    field(OMSL, "closed_loop")
    field(OIF, "Full")
    field(OUT, "$(P)MAX_OUTPUT:SP PP")
}

##################

#Fanout reads so that they can be interrupted

record(seq, "$(P)READ") {

    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DO3, "1")
    field(DO4, "1")
    field(DO5, "1")
    field(DO6, "1")
    field(DO7, "1")
    field(DO8, "1")

    field(DLY1, "$(TREAD)")
    field(DLY2, "$(TREAD)")
    field(DLY3, "$(TREAD)")
    field(DLY4, "$(TREAD)")
    field(DLY5, "$(TREAD)")
    field(DLY6, "$(TREAD)")
    field(DLY7, "$(TREAD)")
    field(DLY8, "$(TREAD)")

    field(LNK1, "$(P)READ_FAST.PROC")
    field(LNK2, "$(P)READ_SLOW1.PROC")
    field(LNK3, "$(P)READ_FAST.PROC")
    field(LNK4, "$(P)READ_SLOW2.PROC")
    field(LNK5, "$(P)READ_FAST.PROC")
    field(LNK6, "$(P)READ_SLOW3.PROC")
    field(LNK7, "$(P)READ_FAST.PROC")
    field(LNK8, "$(P)READ_SLOW4.PROC")

    field(SELM, "All")
}

record(calcout, "$(P)READ_RESTART"){
    field(INPA, $(P)RBV MS)
    field(SCAN, "1 second")
    field(CALC "A")
    field(IVOA, "Don't drive outputs")
    field(OUT, "$(P)READ.PROC")
}

record(seq, "$(P)READ_FAST") {
    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DLY1, "$(TDLY)")
    field(DLY2, "$(TDLY)")
    field(SELM, "All")
    field(LNK1, "$(P)RBV.PROC")
    field(LNK2, "$(P)OUTPUT.PROC")
}

record(seq, "$(P)READ_SLOW1") {
    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DLY1, "$(TDLY)")
    field(DLY2, "$(TDLY)")
    field(SELM, "All")
    field(LNK1, "$(P)TEMP:HIGHLIMIT.PROC")
    field(LNK2, "$(P)TEMP:LOWLIMIT.PROC")
}

record(seq, "$(P)READ_SLOW2") {
    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DO3, "1")
    field(DLY1, "$(TDLY)")
    field(DLY2, "$(TDLY)")
    field(DLY3, "$(TDLY)")
    field(SELM, "All")
    field(LNK1, "$(P)CAL:SEL:RBV.PROC")
    field(LNK2, "$(P)SP:RBV.PROC")
    field(LNK3, "$(P)CAL:RBV.PROC")
}

record(seq, "$(P)READ_SLOW3") {
    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DLY1, "$(TDLY)")
    field(DLY2, "$(TDLY)")
    field(SELM, "All")
    field(LNK1, "$(P)MAX_OUTPUT.PROC")
    field(LNK2, "$(P)AUTOTUNE.PROC")
}

record(seq, "$(P)READ_SLOW4") {
    field(SCAN, "Passive")
    field(DO1, "1")
    field(DO2, "1")
    field(DO3, "1")
    field(DLY1, "$(TDLY)")
    field(DLY2, "$(TDLY)")
    field(DLY3, "$(TDLY)")
    field(SELM, "All")
    field(LNK1, "$(P)P.PROC")
    field(LNK2, "$(P)I.PROC")
    field(LNK3, "$(P)D.PROC")
	$(IFNEEDLE_VALVE) field(LNK4, "$(P)FLOW.PROC")
	$(IFNEEDLE_VALVE) field(LNK5, "$(P)MANUAL_FLOW.PROC")
	$(IFNEEDLE_VALVE) field(LNK6, "$(P)FLOW_SP_LOWLIM.PROC")
	$(IFNEEDLE_VALVE) field(LNK7, "$(P)FLOW_SP_MODE_SELECT.PROC")
	$(IFNEEDLE_VALVE) field(LNK8, "$(P)VALVE_DIR.PROC")
	$(IFNEEDLE_VALVE) field(LNK9, "$(P)NEEDLE_VALVE_STOP.PROC")
}

record(ai, "$(P)CHECK_READ") {
    field(FLNK, "$(P)RBV")
    field(SCAN, "10 second")
}

####
record(longin, "$(P)ADDRESS") {
    field(DTYP, "Soft Channel")
    field(DESC, "Eurotherm address")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, "$(ADDR)")
}

record(longin, "$(P)GAD") {
    field(DESC, "Eurotherm greater address")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, "$(GAD)")
}

record(longin, "$(P)LAD") {
    field(DESC, "Eurotherm lesser address")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, "$(LAD)")
}

record(ai, "$(P)OUTPUT") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Heater output Readback")
    field(SCAN, "Passive")
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),OP,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),3,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(OUTPUT_SCALING)")
    
    field(EGU, "%")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:OUTPUT")
    field(SDIS, "$(Q)DISABLE")
    info(archive, "VAL")
}

record(ai, "$(P)MAX_OUTPUT") {
    field(DESC, "Max Output Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),HO,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),30,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(OUTPUT_SCALING)")
    
    field(EGU, "%")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:MAX_OUTPUT")
    field(SDIS, "$(Q)DISABLE")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(ao, "$(P)MAX_OUTPUT:SP") {
    field(DESC, "Max Output Setpoint")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),HO,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),30,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(OUTPUT_SCALING)")
    
    field(DRVH, "100")
    field(DRVL, "0")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:MAX_OUTPUT:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)MAX_OUTPUT.PROC PP")
    info(archive, "VAL")
}

alias("$(P)MAX_OUTPUT", "$(P)MAX_OUTPUT:SP:RBV")

record(ai, "$(P)OUTPUT_RATE") {
    field(DESC, "Output Rate Setpoint")
    field(EGU,  "%/min")
    field(SCAN, "Passive")
    field(PINI, "YES")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),OR,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),37,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(OUTPUT_RATE_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:OUTPUT_RATE")
    field(SDIS, "$(Q)DISABLE")
    info(INTEREST, "MEDIUM")
    info(archive, "VAL")
}

record(ao, "$(P)OUTPUT_RATE:SP") {
    field(DESC, "Output Rate Setpoint")
    field(EGU,  "%/min")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),OR,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),37,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(OUTPUT_RATE_SCALING)")
    
    field(DRVH, "32767") #16bit signed max, without this drvh, the setpoint will overflow back into negative numbers due to modbus communication protocol use of 16 bit.
    field(DRVL, "0")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:OUTPUT_RATE:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)OUTPUT_RATE.PROC PP")
    info(archive, "VAL")
}

alias("$(P)OUTPUT_RATE", "$(P)OUTPUT_RATE:SP:RBV")

record(mbbi, "$(P)ERR_READ") {
    field(DESC, "Current error message")
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto readhex($(P),EE,$(GAD),$(LAD)) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "No Error")
    field(ONVL, "1")
    field(ONST, "Invalid Param")
    field(TWVL, "2")
    field(TWST, "Read Only")
    field(SVVL, "7")
    field(SVST, "Incorrect Msg")
    field(EIVL, "8")
    field(EIST, "Limit Error")
    field(PINI, "YES")
    field(FLNK, "$(P)ERR_READ_PUSH")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:ERR")
    field(SDIS, "$(Q)DISABLE")
    info(archive, "VAL")
}

# This error record is usually written to by an error that happens during writing to the device
# However when err_read is processed this also write to here.
record(mbbi, "$(P)ERR") {
    field(DESC, "Last error message")
    field(ZRVL, "0")
    field(ZRST, "No Error")
    field(ONVL, "1")
    field(ONST, "Invalid Param")
    field(TWVL, "2")
    field(TWST, "Read Only")
    field(SVVL, "7")
    field(SVST, "Incorrect Msg")
    field(EIVL, "8")
    field(EIST, "Limit Error")
    field(PINI, "YES")
    info(archive, "VAL")
    info(INTEREST, "MEDIUM")
}

record(mbbo, "$(P)ERR_READ_PUSH") {
    field(DESC, "Push error from device to error record")
    field(DOL, "$(P)ERR_READ")
    field(OUT, "$(P)ERR")
    field(OMSL, "closed_loop")
}

record(ai, "$(P)P") {
    info(INTEREST, "HIGH")
    field(DESC, "P Param Readback")
    field(SCAN, "Passive")
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),XP,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),6,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(P_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:P")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)P:SP") {
    field(DESC, "P Setpoint")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),XP,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),6,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(P_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:P:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)P.PROC")
}

alias("$(P)P", "$(P)P:SP:RBV")

record(ai, "$(P)I") {
    info(INTEREST, "HIGH")
    field(DESC, "I Param Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),TI,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),8,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(I_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:I")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)I:SP") {
    field(DESC, "I Setpoint")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),TI,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),8,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(I_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:I:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)I.PROC")
}

alias("$(P)I", "$(P)I:SP:RBV")

record(ai, "$(P)D") {
    info(INTEREST, "HIGH")
    field(DESC, "D Param Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),TD,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),9,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(D_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:D")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
}

record(ao, "$(P)D:SP") {
    field(DESC, "D Setpoint")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),TD,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),9,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(D_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:D:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)D.PROC")
}

alias("$(P)D", "$(P)D:SP:RBV")

record(ai, "$(P)AUTOTUNE") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Autotune Readback")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),AT,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),270,1000)MODBUS_DATA")
    
    field(SCAN, "Passive")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:AUTOTUNE")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
}

record(ao, "$(P)AUTOTUNE:SP") {
    field(DESC, "Autotune Setpoint")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),AT,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),270,1000)MODBUS_DATA")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:AUTOTUNE:SP")
    field(SDIS, "$(Q)DISABLE")
    field(FLNK, "$(P)AUTOTUNE.PROC")
    field(EGU, "")
}

alias("$(P)AUTOTUNE", "$(P)AUTOTUNE:SP:RBV")

# calc needed here to make new EGU for RATE
record(scalcout, "$(P)RATE:UPDATE_EGU")
{
    field(CALC, "AA+'/min'") # AA comes from st-euro.cmd
    field(OUT, "$(P)RATE.EGU")
}

record(ai, "$(P)RBV") {
    info(INTEREST, "HIGH")
    field(DESC, "Temperature Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),PV,$(GAD),$(LAD)) $(PORT)")

    $(IFNOTUSES_BISYNCH) field(DTYP, "asynFloat64")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),1,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(TEMP_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "mV")
    field(PREC, "3")
    info(archive, "VAL")
    info(alarm, "Euro")
}

alias("$(P)RBV", "$(P)SENSOR")

record(ai, "$(P)SP:RBV") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Temperature Setpoint Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),SP,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynFloat64")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),2,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(TEMP_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP:RBV")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
    field(PREC, "3")
    field(FLNK, "$(P)TEMP:SP:RBV:CONV")
    info(archive, "VAL")
    info(alarm, "Euro")
}

record(ao, "$(P)SP") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Temperature Setpoint")
    field(OUT, "$(P)_SP NPP")
    field(EGU, "")
    field(PREC, "3")
    info(archive, "VAL")
    field(FLNK, "$(P)_DOSP.PROC PP")
}

record(longout, "$(P)_DOSP") {
    field(VAL, "0")
    field(OUT, "$(P)SP:RETRYCNT PP")
    field(FLNK, "$(P)_SP.PROC PP")
}

record(ao, "$(P)_SP") {
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(OUT, "@eurotherm2k.proto write($(P),SL,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(OUT, "@asyn(MODBUS_TX_$(GAD)$(LAD),2,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(TEMP_SCALING)")
    
    field(UDFS, "NO_ALARM")
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP")
    field(SDIS, "$(Q)DISABLE")
    field(EGU, "")
    field(PREC, "3")
    field(FLNK, "$(P)_CHECKSP.PROC PP")
    info(archive, "VAL")
    info(alarm, "Euro")
}

## how many times to resend a setpoint if it doesn't match readback
record(longout, "$(P)SP:NRETRY") {
    field(VAL, "5")
    field(OUT, "$(P)SP:RETRYCNT.HIGH")
    field(PINI, "YES")
}

## current setpoint retry number
## HIGH alarm value should be same as retry count NRETRY
record(longout, "$(P)SP:RETRYCNT") {
    field(DESC, "Last setpoint retry count")
    field(VAL, "0")
    field(PINI, "YES")
    field(HIGH, "5")
    field(HSV, "MINOR")
    info(archive, "VAL")
}

## difference between sent SP and readback SP to trigger a resend of SP
## note this is a tolerance on the raw value sent to the Eurotherm via the stream device command
record(ai, "$(P)SP:CHKTOL") {
    field(DESC, "Setpoint check tolerance")
    field(VAL, "0.001")
}

## check difference between sent and readback SP and re-issue send if necessary
## the PP on INPB forces a setpoint readback
## request resend setpoint after a 1 second delay
record(calcout, "$(P)_CHECKSP") {
    field(DESC, "Check SP received or resend")
    field(INPA, "$(P)_SP NPP")
    field(INPB, "$(P)SP:RBV PP")
    field(INPC, "$(P)SP:CHKTOL NPP")
    field(INPD, "$(P)SP:NRETRY NPP")
    field(INPE, "$(P)SP:RETRYCNT NPP")
    field(CALC, "(ABS(A-B)>C)&&(E<D)?1:0")
    field(OOPT, "When Non-zero")
# we need to use CA on OUT as otherwise SP will not reprocess as we are currently part of its existing processing chain
    field(OUT, "$(P)_DORETRY.PROC PP")
    field(HIGH, "0.5")
    field(HSV, "MINOR")
    field(ODLY, 1)
    info(archive, "VAL")
}

record(calcout, "$(P)_DORETRY") {
    field(INPA, "$(P)SP:RETRYCNT NPP")
    field(CALC, "A+1")
    field(OOPT, "Every Time")
    field(OUT, "$(P)SP:RETRYCNT PP")
# we need to use CA on OUT as otherwise SP will not reprocess as we are currently part of its existing processing chain
    field(FLNK, "$(P)_SP.PROC CA")
}

record(ai, "$(P)HILIM") {
    field(DESC, "Setpoint Highlimit Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),HS,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),111,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(TEMP_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:HIGHLIMIT")
    field(SDIS, "$(Q)DISABLE")
    field(PREC, "3")
}

record(ai, "$(P)LOWLIM") {
    field(DESC, "Setpoint Lowlimit Readback")
    field(SCAN, "Passive")
    
    $(IFUSES_BISYNCH) field(DTYP, "stream")
    $(IFUSES_BISYNCH) field(INP, "@eurotherm2k.proto read($(P),LS,$(GAD),$(LAD)) $(PORT)")
    
    $(IFNOTUSES_BISYNCH) field(DTYP, "asynInt32")
    $(IFNOTUSES_BISYNCH) field(INP, "@asyn(MODBUS_RX_$(GAD)$(LAD),112,1000)MODBUS_DATA")
    $(IFNOTUSES_BISYNCH) field(ASLO, "$(TEMP_SCALING)")
    
    field(SIML, "$(Q)SIM")
    field(SIOL, "$(P)SIM:TEMP:LOWLIMIT")
    field(SDIS, "$(Q)DISABLE")
    field(PREC, "3")
}

record(calc, "$(P)TEMP:RANGE:UNDER") {
    field(DESC, "TEMP lower than min calibration value")
    field(INPA, "$(P)TEMP CP")
    # B is the minimum calibration value written to by the CAL:RANGE aSub record
    field(CALC, "A < B")
}

record(calc, "$(P)TEMP:RANGE:OVER") {
    field(DESC, "TEMP higher than max calibration value")
    field(INPA, "$(P)TEMP CP")
    # B is the maximum calibration value written to by the CAL:RANGE aSub record
    field(CALC, "B < A")
}

### SIMULATION RECORDS ###

record(ai, "$(P)SIM:MAX_OUTPUT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:MAX_OUTPUT","$(P)SIM:MAX_OUTPUT:SP")

alias("$(P)SIM:MAX_OUTPUT","$(P)SIM:MAX_OUTPUT:SP:RBV")

record(ai, "$(P)SIM:OUTPUT_RATE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:OUTPUT_RATE","$(P)SIM:OUTPUT_RATE:SP")

alias("$(P)SIM:OUTPUT_RATE","$(P)SIM:OUTPUT_RATE:SP:RBV")

record(ai, "$(P)SIM:TEMP:LOWLIMIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:D")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:D","$(P)SIM:D:SP")

alias("$(P)SIM:D","$(P)SIM:D:SP:RBV")

record(mbbi, "$(P)SIM:ERR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:TEMP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:TEMP","$(P)SIM:TEMP:SP")

alias("$(P)SIM:TEMP","$(P)SIM:TEMP:SP:RBV")

record(ai, "$(P)SIM:I")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:I","$(P)SIM:I:SP")

alias("$(P)SIM:I","$(P)SIM:I:SP:RBV")

record(ai, "$(P)SIM:AUTOTUNE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:AUTOTUNE","$(P)SIM:AUTOTUNE:SP")

alias("$(P)SIM:AUTOTUNE","$(P)SIM:AUTOTUNE:SP:RBV")

alias("$(P)SIM:TEMP","$(P)SIM:SENSOR")

record(ai, "$(P)SIM:P")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:P","$(P)SIM:P:SP")

alias("$(P)SIM:P","$(P)SIM:P:SP:RBV")

record(ai, "$(P)SIM:OUTPUT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:TEMP:HIGHLIMIT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
