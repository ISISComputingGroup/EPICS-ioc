for channel in range(1, 10+1):
    with open(f"devEurothrmA0{channel}.substitutions", "w") as f:
        modbus_base_addr = 1024 * (channel - 1)
    
        macros = [
            ("P", r'"\$(P)"'),
            ("GAD", f'"{(channel)//10}"'),
            ("LAD", f'"{(channel)%10}"'),
            ("MODBUS_PV", f'"{modbus_base_addr + 1}"'),
            ("MODBUS_SP", f'"{modbus_base_addr + 2}"'),
            ("MODBUS_XP", f'"{modbus_base_addr + 6}"'),
            ("MODBUS_TI", f'"{modbus_base_addr + 8}"'),
            ("MODBUS_TD", f'"{modbus_base_addr + 9}"'),
            ("MODBUS_HS", f'"{modbus_base_addr + 111}"'),
            ("MODBUS_LS", f'"{modbus_base_addr + 112}"'),
            ("MODBUS_AT", f'"{modbus_base_addr + 270}"'),
            ("MODBUS_HO", f'"{modbus_base_addr + 30}"'),
            ("MODBUS_OP", f'"{modbus_base_addr + 3}"'),
        ]
        
        f.write("# Note: this file is generated by generate_substitutions.py\n")
        f.write("file devEurothrm.template {\n")
        f.write(f"pattern {{ {', '.join(macro[0] for macro in macros) } }}\n")
        f.write(f"{{ {', '.join(macro[1] for macro in macros)} }}\n")
        f.write("}\n")
