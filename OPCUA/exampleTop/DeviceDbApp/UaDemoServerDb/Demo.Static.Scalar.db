# Database connecting to the UaServerCpp example server
# that is part of all Unified Automation bundles

# Static part of the Demo server

# Records connecting to variables of different types

# bi/bo  -  Bool
#  - the "...x" variants are not monitored

record(bi, "$(P)$(R)bibool") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Boolean")
    field(ZNAM, "false")
    field(ONAM, "true")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(bo, "$(P)$(R)bobool") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Boolean")
    field(ZNAM, "false")
    field(ONAM, "true")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(bi, "$(P)$(R)biboolx") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Boolean monitor=n")
    field(ZNAM, "false")
    field(ONAM, "true")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(bo, "$(P)$(R)boboolx") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Boolean monitor=n")
    field(ZNAM, "false")
    field(ONAM, "true")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

# mbbi/mbbo  -  Byte

record(mbbi, "$(P)$(R)mbbibyte") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Byte")
    field(ZRST, "zero")
    field(ONST, "one")
    field(TWST, "two")
    field(THST, "three")
    field(FRST, "four")
    field(FVST, "five")
    field(SXST, "six")
    field(SVST, "seven")
    field(EIST, "eight")
    field(NIST, "nine")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(mbbo, "$(P)$(R)mbbobyte") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Byte")
    field(ZRST, "zero")
    field(ONST, "one")
    field(TWST, "two")
    field(THST, "three")
    field(FRST, "four")
    field(FVST, "five")
    field(SXST, "six")
    field(SVST, "seven")
    field(EIST, "eight")
    field(NIST, "nine")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(longin, "$(P)$(R)libyte") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Byte")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

# mbbiDirect/mbboDirect  -  UInt32

record(mbbiDirect, "$(P)$(R)mbbiduint32") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.UInt32")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(mbboDirect, "$(P)$(R)mbboduint32") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.UInt32")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

# ai/ao  -  Double

record(ai, "$(P)$(R)aidouble") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Double")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(ao, "$(P)$(R)aodouble") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Double")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

# ai/ao  -  int32 (using linear conversion)

record(ai, "$(P)$(R)aiint32") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Int32")
    field(LINR, "LINEAR")
    field(EGUL, "-1e3")
    field(EGUF, "1e3")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(ao, "$(P)$(R)aoint32") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.Int32")
    field(LINR, "LINEAR")
    field(EGUL, "-1e3")
    field(EGUF, "1e3")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

# si/so  -  String

record(stringin, "$(P)$(R)sistring") {
    field(DTYP, "OPCUA")
    field(INP,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.String")
    field(SCAN, "I/O Intr")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}

record(stringout, "$(P)$(R)sostring") {
    field(DTYP, "OPCUA")
    field(OUT,  "@$(SUBS) ns=2;s=Demo.Static.Scalar.String")
    field(TSE,  "-2")
    field(TPRO, "$(DEBUG=0)")
}
