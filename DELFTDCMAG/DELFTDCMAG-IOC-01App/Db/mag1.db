
# Initially generated by $Id$
# 
# auto-generated EPICS records specify an asyn port "lvfp", but this can be changed - it just needs
# to match the first argument of the relevant lvDCOMConfigure() command in the IOC st.cmd 
# 
      
# 
# Definitions from configSection "frontpanel" in XML input file
#
#     lvDCOMConfigure("lvfp", "frontpanel", "/path/to/lvinput.xml")
# 
      
# Read LabVIEW control/indicator "Stop" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Stop_RBV")
{
	field(DESC, "LabVIEW 'Stop'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Stop")
    field(SCAN, ".1 second")
    field(ZNAM, "Stop Program")
    field(ONAM, "")
}

# Write to LabVIEW control "Stop" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Stop")
{
	field(DESC, "LabVIEW 'Stop'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop")
    field(ZNAM, "Stop Program")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "P" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)P_RBV")
{
	field(DESC, "LabVIEW 'P'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)P")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "P" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)P")
{
	field(DESC, "LabVIEW 'P'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)P")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "I" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)I_RBV")
{
	field(DESC, "LabVIEW 'I'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)I")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "I" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)I")
{
	field(DESC, "LabVIEW 'I'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)I")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "D" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)D_RBV")
{
	field(DESC, "LabVIEW 'D'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)D")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "D" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)D")
{
	field(DESC, "LabVIEW 'D'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)D")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "LIMIT(mT)" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)LIMIT(mT)_RBV")
{
	field(DESC, "LabVIEW 'LIMIT(mT)'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)LIMIT(mT)")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "LIMIT(mT)" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)LIMIT(mT)")
{
	field(DESC, "LabVIEW 'LIMIT(mT)'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)LIMIT(mT)")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Range(muT)" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)Range(muT)_RBV")
{
	field(DESC, "LabVIEW 'Range(muT)'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Range(muT)")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Range(muT)" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)Range(muT)")
{
	field(DESC, "LabVIEW 'Range(muT)'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Range(muT)")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Process value (mT) 1" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)Process_value_(mT)_1_RBV")
{
	field(DESC, "LabVIEW 'Process value (mT) 1'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Process_value_(mT)_1")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Process value (mT) 1" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)Process_value_(mT)_1")
{
	field(DESC, "LabVIEW 'Process value (mT) 1'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Process_value_(mT)_1")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Process value (mT) 2" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)Process_value_(mT)_2_RBV")
{
	field(DESC, "LabVIEW 'Process value (mT) 2'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Process_value_(mT)_2")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Process value (mT) 2" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)Process_value_(mT)_2")
{
	field(DESC, "LabVIEW 'Process value (mT) 2'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Process_value_(mT)_2")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Enable 1" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Enable_1_RBV")
{
	field(DESC, "LabVIEW 'Enable 1'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Enable_1")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

# Write to LabVIEW control "Enable 1" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Enable_1")
{
	field(DESC, "LabVIEW 'Enable 1'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Enable_1")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}


# Read LabVIEW control/indicator "Enable 2" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Enable_2_RBV")
{
	field(DESC, "LabVIEW 'Enable 2'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Enable_2")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

# Write to LabVIEW control "Enable 2" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Enable_2")
{
	field(DESC, "LabVIEW 'Enable 2'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Enable_2")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}


# Read LabVIEW control/indicator "Init ctrl" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Init_ctrl_RBV")
{
	field(DESC, "LabVIEW 'Init ctrl'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Init_ctrl")
    field(SCAN, ".1 second")
    field(ZNAM, "Apply  Sets Controller")
    field(ONAM, "")
}

# Write to LabVIEW control "Init ctrl" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Init_ctrl")
{
	field(DESC, "LabVIEW 'Init ctrl'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Init_ctrl")
    field(ZNAM, "Apply  Sets Controller")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Start" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Start_RBV")
{
	field(DESC, "LabVIEW 'Start'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Start")
    field(SCAN, ".1 second")
    field(ZNAM, "Start Control")
    field(ONAM, "")
}

# Write to LabVIEW control "Start" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Start")
{
	field(DESC, "LabVIEW 'Start'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Start")
    field(ZNAM, "Start Control")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Stop ctrl" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Stop_ctrl_RBV")
{
	field(DESC, "LabVIEW 'Stop ctrl'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Stop_ctrl")
    field(SCAN, ".1 second")
    field(ZNAM, "Stop Control")
    field(ONAM, "")
}

# Write to LabVIEW control "Stop ctrl" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Stop_ctrl")
{
	field(DESC, "LabVIEW 'Stop ctrl'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Stop_ctrl")
    field(ZNAM, "Stop Control")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Hold" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Hold_RBV")
{
	field(DESC, "LabVIEW 'Hold'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Hold")
    field(SCAN, ".1 second")
    field(ZNAM, "HOLD Control")
    field(ONAM, "")
}

# Write to LabVIEW control "Hold" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Hold")
{
	field(DESC, "LabVIEW 'Hold'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Hold")
    field(ZNAM, "HOLD Control")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Set point reached all" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Set_point_reached_all_RBV")
{
	field(DESC, "LabVIEW 'Set point reached all'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Set_point_reached_all")
    field(SCAN, ".1 second")
    field(ZNAM, "")
    field(ONAM, "")
}

# Write to LabVIEW control "Set point reached all" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Set_point_reached_all")
{
	field(DESC, "LabVIEW 'Set point reached all'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Set_point_reached_all")
    field(ZNAM, "")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Setpoint reached M1" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Setpoint_reached_M1_RBV")
{
	field(DESC, "LabVIEW 'Setpoint reached M1'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Setpoint_reached_M1")
    field(SCAN, ".1 second")
    field(ZNAM, "")
    field(ONAM, "")
}

# Write to LabVIEW control "Setpoint reached M1" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Setpoint_reached_M1")
{
	field(DESC, "LabVIEW 'Setpoint reached M1'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Setpoint_reached_M1")
    field(ZNAM, "")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Setpoint reached M2" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)Setpoint_reached_M2_RBV")
{
	field(DESC, "LabVIEW 'Setpoint reached M2'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)Setpoint_reached_M2")
    field(SCAN, ".1 second")
    field(ZNAM, "")
    field(ONAM, "")
}

# Write to LabVIEW control "Setpoint reached M2" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)Setpoint_reached_M2")
{
	field(DESC, "LabVIEW 'Setpoint reached M2'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)Setpoint_reached_M2")
    field(ZNAM, "")
    field(ONAM, "")
}


# Read LabVIEW control/indicator "Setpoint M1" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)Setpoint_M1_RBV")
{
	field(DESC, "LabVIEW 'Setpoint M1'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Setpoint_M1")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Setpoint M1" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)Setpoint_M1")
{
	field(DESC, "LabVIEW 'Setpoint M1'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Setpoint_M1")
    field(PREC, "3")
}


# Read LabVIEW control/indicator "Setpoint M2" on "Test application DC_MC 1 controlller.vi"
record(ai, "$(P)Setpoint_M2_RBV")
{
	field(DESC, "LabVIEW 'Setpoint M2'")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(lvfp,0,0)Setpoint_M2")
    field(PREC, "3")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "Setpoint M2" on "Test application DC_MC 1 controlller.vi"
record(ao, "$(P)Setpoint_M2")
{
	field(DESC, "LabVIEW 'Setpoint M2'")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(lvfp,0,0)Setpoint_M2")
    field(PREC, "3")
}


## Creating both stringout/stringin and waveform records for "status" on "Test application DC_MC 1 controlller.vi"
## EPICS strings are restricted to 40 characters in length, if your strings are
## longer than this choose the character waveform records and adjust NELM if necessary

# Read LabVIEW control/indicator "status" on "Test application DC_MC 1 controlller.vi"
record(stringin, "$(P)status_RBV")
{
	field(DESC, "LabVIEW 'status'")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(lvfp,0,0)status")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "status" on "Test application DC_MC 1 controlller.vi"
record(stringout, "$(P)status")
{
	field(DESC, "LabVIEW 'status'")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(lvfp,0,0)status")
}

# Read LabVIEW control/indicator "status" on "Test application DC_MC 1 controlller.vi"
record(waveform, "$(P)statusWF_RBV")
{
	field(DESC, "LabVIEW 'status'")
    field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)status")
    field(SCAN, ".1 second")
}

# Write to LabVIEW control "status" on "Test application DC_MC 1 controlller.vi"
record(waveform, "$(P)statusWF")
{
	field(DESC, "LabVIEW 'status'")
    field(DTYP, "asynOctetWrite")
	field(FTVL, "CHAR")
	field(NELM, 256)
    field(INP,  "@asyn(lvfp,0,0)status")
}


# Read LabVIEW control/indicator "ALARM" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)ALARM_RBV")
{
	field(DESC, "LabVIEW 'ALARM'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)ALARM")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

# Write to LabVIEW control "ALARM" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)ALARM")
{
	field(DESC, "LabVIEW 'ALARM'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)ALARM")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}


# Read LabVIEW control/indicator "RST" on "Test application DC_MC 1 controlller.vi"
record(bi, "$(P)RST_RBV")
{
	field(DESC, "LabVIEW 'RST'")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(lvfp,0,0)RST")
    field(SCAN, ".1 second")
    field(ZNAM, "RESET")
    field(ONAM, "")
}

# Write to LabVIEW control "RST" on "Test application DC_MC 1 controlller.vi"
record(bo, "$(P)RST")
{
	field(DESC, "LabVIEW 'RST'")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(lvfp,0,0)RST")
    field(ZNAM, "RESET")
    field(ONAM, "")
}

